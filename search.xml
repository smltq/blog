<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring Cloud Alibaba（一） 如何使用nacos服务注册和发现</title>
    <url>/2019/11/27/Spring%20Cloud%20Alibaba/README1/</url>
    <content><![CDATA[<h2 id="Nacos介绍"><a href="#Nacos介绍" class="headerlink" title="Nacos介绍"></a>Nacos介绍</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p>
<p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p>
<h3 id="Nacos-的关键特性"><a href="#Nacos-的关键特性" class="headerlink" title="Nacos 的关键特性"></a>Nacos 的关键特性</h3><ul>
<li>服务发现和服务健康监测</li>
<li>动态配置服务，带管理界面，支持丰富的配置维度。</li>
<li>动态 DNS 服务</li>
<li>服务及其元数据管理</li>
</ul>
<h2 id="Nacos下载及部署"><a href="#Nacos下载及部署" class="headerlink" title="Nacos下载及部署"></a>Nacos下载及部署</h2><p>官方介绍文档：<a href="https://nacos.io/zh-cn/docs/quick-start.html">Nacos 快速开始</a>或者直接下载zip包，部署<a href="https://github.com/alibaba/nacos/releases">下载</a></p>
<h3 id="windows环境部署过程遇到的问题汇总"><a href="#windows环境部署过程遇到的问题汇总" class="headerlink" title="windows环境部署过程遇到的问题汇总"></a>windows环境部署过程遇到的问题汇总</h3><h4 id="jdk版本要求"><a href="#jdk版本要求" class="headerlink" title="jdk版本要求"></a>jdk版本要求</h4><p>一定要注意，jdk版本要求 64bit JDK 1.8+</p>
<h4 id="运行报错"><a href="#运行报错" class="headerlink" title="运行报错"></a>运行报错</h4><p>运行startup.cmd，一闪而过。打开startup.cmd脚本，在最后一行添加 pause 使报错不会立即结束方便查看报错信息，这时会发现以下报错信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedClassVersionError: org/springfra</span><br><span class="line">mework/boot/loader/PropertiesLauncher : Unsupported major.minor version 52.0</span><br><span class="line">        at java.lang.ClassLoader.defineClass1(Native Method)</span><br><span class="line">        at java.lang.ClassLoader.defineClass(ClassLoader.java:800)</span><br><span class="line">        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:14</span><br><span class="line">2)</span><br><span class="line">        at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)</span><br><span class="line">        at java.net.URLClassLoader.access$100(URLClassLoader.java:71)</span><br><span class="line">        at java.net.URLClassLoader$1.run(URLClassLoader.java:361)</span><br><span class="line">        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)</span><br><span class="line">        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)</span><br><span class="line">        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:482)</span><br></pre></td></tr></table></figure>
<p>产生以上问题的原因是我电脑上有些老项目使用jdk 1.7，所以项目是jdk1.7和jdk1.8交叉着使用。在cmd里查看版本 java -version  输出然后是1.8.0_211（只会输出最高的版本）</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>配置java_home，增加jdk1.8环境变量，怎么添加环境变量需要自行百度，以下贴出我的java环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;set java_home</span><br><span class="line">JAVA_HOME=D:\Program Files\Java\jdk1.7.0_71</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;set java8_home</span><br><span class="line">JAVA8_HOME=D:\Program Files\Java\jdk1.8.0_201</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>调整startup.cmd脚本，使用java8_home变量，使它能正确调用jdk1.8而非jdk1.7，以下是调整部分代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if not exist &quot;%JAVA8_HOME%\bin\java.exe&quot; echo Please set the JAVA8_HOME variable in your environment, We need java(x64)! jdk8 or later is better! &amp; EXIT /B 1</span><br><span class="line">set &quot;JAVA=%JAVA8_HOME%\bin\java.exe&quot;</span><br></pre></td></tr></table></figure>
<p>这里只做个替换，把原来的JAVA_HOME规划成JAVA8_HOME，运行startup.cmd，此时能正确运行Nacos服务了</p>
<h3 id="查看界面"><a href="#查看界面" class="headerlink" title="查看界面"></a>查看界面</h3><p>启动成功，在浏览器上访问：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> ，会跳转到登陆界面，默认的登陆用户名为nacos，密码也为nacos。</p>
<p>登陆成功后，就可以操作管理界面了</p>
<h2 id="使用Nacos服务注册和发现"><a href="#使用Nacos服务注册和发现" class="headerlink" title="使用Nacos服务注册和发现"></a>使用Nacos服务注册和发现</h2><p>要使用nacos，需要在pom.xml添加必要的依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="服务注册与发现示例代码创建"><a href="#服务注册与发现示例代码创建" class="headerlink" title="服务注册与发现示例代码创建"></a>服务注册与发现示例代码创建</h3><p>在本案例中，使用3个服务注册到Nacos上，分别为服务提供者ali-nacos-provider和负载均衡ribbon消费者ali-nacos-consumer-ribbon、申明式服务调用feign消费者ali-nacos-consumer-feign。</p>
<p>什么是ribbon和feign，及使用示例这里不重复介绍，需要了解可以<a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-feign">查看示例</a></p>
<h4 id="创建服务提供者ali-nacos-provider"><a href="#创建服务提供者ali-nacos-provider" class="headerlink" title="创建服务提供者ali-nacos-provider"></a>创建服务提供者ali-nacos-provider</h4><p>pom.xml添加nacos依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>application.yml配置<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span>  <span class="comment">#指定为9000端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-provider</span>  <span class="comment">#服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#服务注册地址(nacos默认为8848端口)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>启动类增加 @EnableDiscoveryClient 注解<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.aliNacosProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliNacosProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AliNacosProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>写个hello服务接口 HelloController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.aliNacosProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hello/&#123;str&#125;&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----------收到消费者请求-----------&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;收到消费者传递的参数：&quot;</span> + str);</span><br><span class="line">        String result = <span class="string">&quot;我是服务提供者，见到你很高兴==&gt;&quot;</span> + str;</span><br><span class="line">        log.info(<span class="string">&quot;提供者返回结果：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建ribbon服务消费者"><a href="#创建ribbon服务消费者" class="headerlink" title="创建ribbon服务消费者"></a>创建ribbon服务消费者</h4><p>pom.xml增加nocos和ribbon依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>application.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-consumer-ribbon</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></p>
<p>服务调用HomeController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.ancRibbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----------------consumer调用开始-----------------&quot;</span>);</span><br><span class="line">        String param = <span class="string">&quot;云天&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;消费者传递参数：&quot;</span> + param);</span><br><span class="line">        String result = restTemplate.getForObject(<span class="string">&quot;http://ali-nacos-provider/hello/&quot;</span> + param, String.class);</span><br><span class="line">        log.info(<span class="string">&quot;收到提供者响应：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ribbon消费者，&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启用类AncRibbonConsumerApplication.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.ancRibbon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AncRibbonConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AncRibbonConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="创建feign服务消费者"><a href="#创建feign服务消费者" class="headerlink" title="创建feign服务消费者"></a>创建feign服务消费者</h4><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>application.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-consumer-feign</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span>  <span class="comment">#允许一样的beanName</span></span><br></pre></td></tr></table></figure><br>这里有个坑要注意下，如果allow-bean-definition-overriding没有设置为true,运行会报如下错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误： Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true</span><br></pre></td></tr></table></figure>
<p>这里有问题的详细介绍<a href="https://github.com/alibaba/nacos/issues/452">问题原因</a></p>
<p>申请服务HelloService.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.ancFeign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;ali-nacos-provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;hello/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;str&quot;)</span> String param)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>服务调用HomeController.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.ancFeign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----------------consumer调用开始-----------------&quot;</span>);</span><br><span class="line">        String param = <span class="string">&quot;云天&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;消费者传递参数：&quot;</span> + param);</span><br><span class="line">        String result = helloService.hello(param);</span><br><span class="line">        log.info(<span class="string">&quot;收到提供者响应：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;feign消费者&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>启动类AncFeignConsumerApplication.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.ancFeign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.easy.ancFeign&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AncFeignConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AncFeignConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="现有三个项目如下"><a href="#现有三个项目如下" class="headerlink" title="现有三个项目如下"></a>现有三个项目如下</h3><p>ali-nacos-provider：服务提供者1，服务名：ali-nacos-provider，端口：9000<br>ali-nacos-consumer-ribbon：ribbon服务消费者，服务名：ali-nacos-consumer-ribbon，端口：9100<br>ali-nacos-consumer-feign：feign消费者，服务名：ali-nacos-consumer-feign，端口：9101</p>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>首先要启动服务注册中心 nacos<br>其次，分别启动ali-nacos-provider、ali-nacos-consumer-ribbon、ali-nacos-consumer-feign三个服务</p>
<ul>
<li>访问地址：<a href="http://localhost:9100/">http://localhost:9100/</a> ，返回：ribbon消费者，我是服务提供者，见到你很高兴==&gt;云天，说明ribbon消费成功了。</li>
<li>访问地址：<a href="http://localhost:9101/">http://localhost:9101/</a> ，返回：feign消费者我是服务提供者，见到你很高兴==&gt;云天，说明feign消费费成功了。</li>
<li>访问地址：<a href="http://localhost:9000/hello/yuntian">http://localhost:9000/hello/yuntian</a> ，返回：我是服务提供者，见到你很高兴==&gt;yuntian，说明服务提供者访问成功了(PS:服务提供者一般是不对外公开的，怎么隐蔽接口将在接下去的文章里介绍)</li>
<li>访问地址：<a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a> ，输入用户：nacos，密码：nacos。进入服务管理界面，在服务管理-服务列表里可以看到我们运行的三个服务了。</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba">Spring Cloud Alibaba 示例源码</a></li>
<li><a href="https://nacos.io/zh-cn/">Nacos官网</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Spring Cloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba（二） 配置中心多项目、多配置文件、分目录实现</title>
    <url>/2019/11/27/Spring%20Cloud%20Alibaba/README2/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之前<a href="https://github.com/smltq/spring-boot-demo/tree/master/cloud-config">Spring Cloud Config基础篇</a>这篇文章介绍了Spring Cloud Config 配置中心基础的实现，今天继续聊下Spring Cloud Config 并结合nacos做服务注册中心，实现多项目、多配置文件、按项目目录划分等功能的配置服务中心。</p>
<p>阅读本篇文章之前，最好要有nacos基础；关于nacos是什么，如何使用，可以参考我的上一篇文章 <a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba/README1.md">Spring Cloud Alibaba（一） 如何使用nacos服务注册和发现</a>，或者直接链接到官网教程<a href="https://nacos.io/zh-cn/docs/quick-start.html">Nacos 快速开始</a></p>
<h2 id="本示例主要内容"><a href="#本示例主要内容" class="headerlink" title="本示例主要内容"></a>本示例主要内容</h2><ul>
<li>采用nacos做服务注册中心，Spring Cloud Config做配置服务中心，在上一篇基础上新建了ali-nacos-config-server配置服务中心项目、ali-nacos-config-client配置客户端项目、并把ali-nacos-consumer-feign配置也调整成从配置中心加载配置</li>
<li>支持多项目，config-repo配置文件目录按项目名称来规划，在配置中心 searchPaths: /cloud-alibaba/config-repo/{application}/ 使用application自动识别查找目录</li>
<li>支持单项目多配置文件，ali-nacos-config-client项目的配置文件 spring.cloud.config.name=${spring.application.name},myconfig，通过指定多个name实现多配置文件</li>
</ul>
<h2 id="实现示例过程"><a href="#实现示例过程" class="headerlink" title="实现示例过程"></a>实现示例过程</h2><h3 id="新建ali-nacos-config-server项目"><a href="#新建ali-nacos-config-server项目" class="headerlink" title="新建ali-nacos-config-server项目"></a>新建ali-nacos-config-server项目</h3><p>该项目用来做配置服务中心，以下贴出关键部分代码</p>
<p>pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>application.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">#uri: https://github.com/smltq/spring-boot-demo.git</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/tqlin/spring-boot-demo.git</span></span><br><span class="line">          <span class="attr">searchPaths:</span> <span class="string">/cloud-alibaba/config-repo/&#123;application&#125;/</span></span><br><span class="line">          <span class="attr">force-pull:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>启动类AnConfigServerApplication.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AnConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="新建ali-nacos-config-client项目"><a href="#新建ali-nacos-config-client项目" class="headerlink" title="新建ali-nacos-config-client项目"></a>新建ali-nacos-config-client项目</h3><p>该项目用来做配置中心客户端测试之一，以下贴出几处关键代码</p>
<p>pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>bootstrap.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;,myconfig</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8001/</span> <span class="comment"># config server 配置服务地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active&#125;</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">pro</span>                  <span class="comment"># 配置文件版本（该示例分为test,dev,pro）</span></span><br></pre></td></tr></table></figure></p>
<p>写个配置读取测试类HelloController.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;easy.hello&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String hello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;easy.myconfig&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String myconfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>, hello);</span><br><span class="line">        map.put(<span class="string">&quot;myconfig&quot;</span>, myconfig);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>启动类AnConfigClientApplication.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnConfigClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AnConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调整ali-nacos-consumer-feign项目"><a href="#调整ali-nacos-consumer-feign项目" class="headerlink" title="调整ali-nacos-consumer-feign项目"></a>调整ali-nacos-consumer-feign项目</h3><p>以下贴出调整部分代码</p>
<p>pom.xml增加spring-cloud-starter-config依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>yml配置文件增加bootstrap.yml，把核心配置移到该配置文件<br>bootstrap.yml<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-consumer-feign</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8001/</span> <span class="comment"># config server 配置服务地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active&#125;</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>                  <span class="comment"># 配置文件版本（该示例分为test,dev,pro）</span></span><br></pre></td></tr></table></figure></p>
<p>编写配置读写测试类HomeController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;easy.hello&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String hello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----------------consumer调用开始-----------------&quot;</span>);</span><br><span class="line">        String param = <span class="string">&quot;云天&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;消费者传递参数：&quot;</span> + param);</span><br><span class="line">        String result = helloService.hello(param);</span><br><span class="line">        log.info(<span class="string">&quot;收到提供者响应：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;feign消费者&quot;</span> + result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;hello&quot;</span>, hello);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最后放上配置文件目录规划"><a href="#最后放上配置文件目录规划" class="headerlink" title="最后放上配置文件目录规划"></a>最后放上配置文件目录规划</h3><ul>
<li><a href="https://gitee.com/tqlin/spring-boot-demo/tree/master/cloud-alibaba/config-repo">config-repo配置总目录</a></li>
<li><a href="https://gitee.com/tqlin/spring-boot-demo/tree/master/cloud-alibaba/config-repo/ali-nacos-config-client">ali-nacos-config-server 项目GIT的配置目录</a></li>
<li><a href="https://gitee.com/tqlin/spring-boot-demo/tree/master/cloud-alibaba/config-repo/ali-nacos-consumer-feign">ali-nacos-consumer-feign 项目GIT的配置目录</a></li>
</ul>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="在上一篇基础上，我们新建了2个项目，并调整ali-nacos-consumer-feign项目使它支持配置远程读取，有以下三个项目做测试。"><a href="#在上一篇基础上，我们新建了2个项目，并调整ali-nacos-consumer-feign项目使它支持配置远程读取，有以下三个项目做测试。" class="headerlink" title="在上一篇基础上，我们新建了2个项目，并调整ali-nacos-consumer-feign项目使它支持配置远程读取，有以下三个项目做测试。"></a>在上一篇基础上，我们新建了2个项目，并调整ali-nacos-consumer-feign项目使它支持配置远程读取，有以下三个项目做测试。</h3><p>ali-nacos-config-server：配置服务中心，服务名：ali-nacos-config-server，端口：8001<br>ali-nacos-config-client：配置客户端1（消费端），服务名：ali-nacos-config-client，端口：8002<br>ali-nacos-consumer-feign：配置客户端2（消费端），服务名：ali-nacos-consumer-feign，端口：9101</p>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>首先要启动服务注册中心 nacos</p>
<h4 id="启动ali-nacos-config-server服务，配置服务中心测试"><a href="#启动ali-nacos-config-server服务，配置服务中心测试" class="headerlink" title="启动ali-nacos-config-server服务，配置服务中心测试"></a>启动ali-nacos-config-server服务，配置服务中心测试</h4><ul>
<li>访问：<a href="http://localhost:8001/ali-nacos-config-client/dev">http://localhost:8001/ali-nacos-config-client/dev</a> ，返回：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&quot;ali-nacos-config-client&quot;</span>,</span><br><span class="line">    profiles: [</span><br><span class="line">    <span class="string">&quot;dev&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    label: <span class="literal">null</span>,</span><br><span class="line">    version: <span class="string">&quot;5456d7ca31d46e91464b6efd3a0831a8208413d9&quot;</span>,</span><br><span class="line">    state: <span class="literal">null</span>,</span><br><span class="line">    propertySources: [ ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问：<a href="http://localhost:8001/ali-nacos-config-client/test">http://localhost:8001/ali-nacos-config-client/test</a> ，返回：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&quot;ali-nacos-config-client&quot;</span>,</span><br><span class="line">    profiles: [</span><br><span class="line">    <span class="string">&quot;test&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    label: <span class="literal">null</span>,</span><br><span class="line">    version: <span class="string">&quot;5456d7ca31d46e91464b6efd3a0831a8208413d9&quot;</span>,</span><br><span class="line">    state: <span class="literal">null</span>,</span><br><span class="line">    propertySources: [ ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这表示配置能正确从git上加载到了。</li>
</ul>
<h4 id="启动ali-nacos-config-client服务，运行客户端测试1"><a href="#启动ali-nacos-config-client服务，运行客户端测试1" class="headerlink" title="启动ali-nacos-config-client服务，运行客户端测试1"></a>启动ali-nacos-config-client服务，运行客户端测试1</h4><ul>
<li>bootstrap.yml的active调成dev，访问：<a href="http://localhost:8002/hello">http://localhost:8002/hello</a> ，返回：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    hello: <span class="string">&quot;ali-nacos-config-client 项目的 dev config&quot;</span>,</span><br><span class="line">    myconfig: <span class="string">&quot;ali-nacos-config-client 项目的 myconfig config&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>bootstrap.yml的active调成test，访问：<a href="http://localhost:8002/hello">http://localhost:8002/hello</a> ，返回：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">hello: <span class="string">&quot;ali-nacos-config-client 项目的 test config&quot;</span>,</span><br><span class="line">myconfig: <span class="string">&quot;ali-nacos-config-client 项目的 myconfig config&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表示我git上该项目的2个配置文件都成功读取到了。</p>
<h4 id="启动ali-nacos-consumer-feign项目，测试客户端测试2"><a href="#启动ali-nacos-consumer-feign项目，测试客户端测试2" class="headerlink" title="启动ali-nacos-consumer-feign项目，测试客户端测试2"></a>启动ali-nacos-consumer-feign项目，测试客户端测试2</h4><p>访问：<a href="http://localhost:9101/hello">http://localhost:9101/hello</a></p>
<p>返回结果<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  hello: <span class="string">&quot;ali-nacos-consumer-feign 项目的 dev config&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>表示该项目的配置文件加载成功了</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba">Spring Cloud Alibaba 示例源码</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba/README2.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Spring Cloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba（三）Sentinel之熔断降级</title>
    <url>/2019/11/27/Spring%20Cloud%20Alibaba/README3/</url>
    <content><![CDATA[<p>本项目演示如何使用 Sentinel 完成 Spring Cloud 应用的熔断降级调用。</p>
<p>Sentinel 是阿里巴巴开源的分布式系统的流量防卫组件，Sentinel 把流量作为切入点，从流量控制，熔断降级，系统负载保护等多个维度保护服务的稳定性。</p>
<p>OpenFeign是一款声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API，需要了解OpenFeign使用基础，可以参考<a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-feign">cloud-feign示例源码</a>。</p>
<p>本项目服务注册中心使用nacos，服务提供者使用<a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba/README1.md">Spring Cloud Alibaba（一） 如何使用nacos服务注册和发现</a>创建的ali-nacos-provider服务</p>
<h2 id="Sentinel介绍"><a href="#Sentinel介绍" class="headerlink" title="Sentinel介绍"></a>Sentinel介绍</h2><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p>Sentinel 具有以下特征:</p>
<ul>
<li>1.丰富的应用场景</li>
</ul>
<p>Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p>
<ul>
<li>2.完备的实时监控</li>
</ul>
<p>Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p>
<ul>
<li>3.广泛的开源生态</li>
</ul>
<p>Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p>
<ul>
<li>4.完善的 SPI 扩展点</li>
</ul>
<p>Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p>
<h3 id="Sentinel-分为两个部分"><a href="#Sentinel-分为两个部分" class="headerlink" title="Sentinel 分为两个部分"></a>Sentinel 分为两个部分</h3><ul>
<li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li>
<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>
</ul>
<h3 id="Sentinel主要特性"><a href="#Sentinel主要特性" class="headerlink" title="Sentinel主要特性"></a>Sentinel主要特性</h3><p><img src="http://49.235.170.100:8090/upload/2019/10/Sentinel%20%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7-ed3121ad317c4704b72801d76be4e707.png" alt="Sentinel 主要特性"></p>
<h3 id="Sentinel开源生态"><a href="#Sentinel开源生态" class="headerlink" title="Sentinel开源生态"></a>Sentinel开源生态</h3><p><img src="http://49.235.170.100:8090/upload/2019/10/Sentinel%20%E5%BC%80%E6%BA%90%E7%94%9F%E6%80%81-b97ff929cf14465a8ae79b2204d2b3df.png" alt="Sentinel 开源生态"></p>
<h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><p>对调用链路中不稳定的资源进行熔断降级是保障高可用的重要措施之一。由于调用关系的复杂性，如果调用链路中的某个资源不稳定，最终会导致请求发生堆积。Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出 DegradeException）</p>
<h3 id="降级策略"><a href="#降级策略" class="headerlink" title="降级策略"></a>降级策略</h3><ul>
<li>平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。</li>
<li>异常比例 (DEGRADE_GRADE_EXCEPTION_RATIO)：当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态。</li>
<li>异常数 (DEGRADE_GRADE_EXCEPTION_COUNT)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。</li>
</ul>
<h2 id="熔断降级代码实现"><a href="#熔断降级代码实现" class="headerlink" title="熔断降级代码实现"></a>熔断降级代码实现</h2><h3 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h3><p>创建ali-nacos-provider项目</p>
<ol>
<li>首先， 依赖nacos 注册中心</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>定义服务提供方接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hello/&#123;str&#125;&quot;, produces = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----------收到消费者请求-----------&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;收到消费者传递的参数：&quot;</span> + str);</span><br><span class="line">        String result = <span class="string">&quot;我是服务提供者，见到你很高兴==&gt;&quot;</span> + str;</span><br><span class="line">        log.info(<span class="string">&quot;提供者返回结果：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="服务提消费方"><a href="#服务提消费方" class="headerlink" title="服务提消费方"></a>服务提消费方</h3><p>创建ali-nacos-sentinel-feign项目</p>
<p>1.首先，pom.xml添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.定义FeignClient,及其降级配置</p>
<ul>
<li>定义FeignClient</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.ansFeign.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.easy.ansFeign.fallback.HelloServiceFallbackFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;ali-nacos-provider&quot;, fallbackFactory = HelloServiceFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用服务提供方的输出接口.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 用户输入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hello result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;str&quot;)</span> String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>定义fallback 工厂，获取异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">HelloServiceFallback</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloServiceFallback <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloServiceFallback(throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>定义具体的fallback 实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceFallback</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Throwable throwable;</span><br><span class="line"></span><br><span class="line">    HelloServiceFallback(Throwable throwable) &#123;</span><br><span class="line">        <span class="keyword">this</span>.throwable = throwable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用服务提供方的输出接口.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 用户输入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务调用失败，降级处理。异常信息：&quot;</span> + throwable.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>测试入口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello-feign/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">feign</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.hello(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="示例关联项目"><a href="#示例关联项目" class="headerlink" title="示例关联项目"></a>示例关联项目</h3><p>在<a href="README1.md">Spring Cloud Alibaba（一） 如何使用nacos服务注册和发现</a>基础上，我们新建了ali-nacos-sentinel-feign项目，并调用ali-nacos-provider项目用作该示例的服务提供方，有以下二个项目做测试。</p>
<ul>
<li><p>ali-nacos-provider：服务提供者，服务名：ali-nacos-provider，端口：9000</p>
</li>
<li><p>ali-nacos-sentinel-feign：服务消费者，服务名：ali-nacos-sentinel-feign，端口：9102</p>
</li>
</ul>
<h3 id="运行示例测试"><a href="#运行示例测试" class="headerlink" title="运行示例测试"></a>运行示例测试</h3><p>首先要启动服务注册中心 nacos、ali-nacos-provider服务及ali-nacos-sentinel-feign服务</p>
<ul>
<li>访问地址： <a href="http://localhost:9102/hello-feign/yuntian">http://localhost:9102/hello-feign/yuntian</a></li>
</ul>
<p>返回<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">我是服务提供者，见到你很高兴==&gt;yuntian</span><br></pre></td></tr></table></figure><br>表示我们的服务成功调用到了</p>
<ul>
<li>关闭ali-nacos-provider服务，访问： <a href="http://localhost:9102/hello-feign/yuntian">http://localhost:9102/hello-feign/yuntian</a></li>
</ul>
<p>返回<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">服务调用失败，降级处理。异常信息：com.netflix.client.ClientException: Load balancer does not have available server for client: ali-nacos-provider</span><br></pre></td></tr></table></figure><br>表示执行了我们预定的回调，服务成功降级了。</p>
<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba">Spring Cloud Alibaba Sentinel 示例源码</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba/README3.md">原文地址</a></li>
<li><a href="https://github.com/alibaba/Sentinel">Sentinel GitHub</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Spring Cloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba（四）实现Dubbo服务消费</title>
    <url>/2019/11/27/Spring%20Cloud%20Alibaba/README4/</url>
    <content><![CDATA[<p>本项目演示如何使用 Spring Cloud Alibaba 完成 Dubbo 的RPC调用。</p>
<h2 id="Spring-Cloud与Dubbo"><a href="#Spring-Cloud与Dubbo" class="headerlink" title="Spring Cloud与Dubbo"></a>Spring Cloud与Dubbo</h2><ul>
<li><p>Spring Cloud是一套完整的微服务架构方案</p>
</li>
<li><p>Dubbo是国内目前非常流行的服务治理与RPC实现方案</p>
</li>
</ul>
<p>由于Dubbo在国内有着非常大的用户群体，但是其周边设施与组件相对来说并不那么完善（比如feign，ribbon等等）。很多开发者使用Dubbo，又希望享受Spring Cloud的生态，因此也会有一些Spring Cloud与Dubbo一起使用的案例与方法出现。</p>
<p>Spring Cloud Alibaba的出现，实现了Spring Cloud与Dubbo的完美融合。在之前的教程中，我们已经介绍过使用Spring Cloud Alibaba中的Nacos来作为服务注册中心，并且在此之下可以如传统的Spring Cloud应用一样地使用Ribbon或Feign来实现服务消费。这篇，我们就来继续说说Spring Cloud Alibaba 下额外支持的RPC方案：Dubbo</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们通过一个简单的例子，使用Nacos做服务注册中心，利用Dubbo来实现服务提供方与服务消费方。这里省略Nacos的安装与使用，下面就直接进入Dubbo的使用步骤。</p>
<h3 id="定义-Dubbo-服务接口"><a href="#定义-Dubbo-服务接口" class="headerlink" title="定义 Dubbo 服务接口"></a>定义 Dubbo 服务接口</h3><p>创建 ali-nacos-dubbo-api 工程</p>
<p>Dubbo 服务接口是服务提供方与消费方的远程通讯契约，通常由普通的 Java 接口（interface）来声明，如 HelloService 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了确保契约的一致性，推荐的做法是将 Dubbo 服务接口打包在jar包中，如以上接口就存放在 ali-nacos-dubbo-api 之中。 对于服务提供方而言，不仅通过依赖 artifact 的形式引入 Dubbo 服务接口，而且需要将其实现。对应的服务消费端，同样地需要依赖该 artifact， 并以接口调用的方式执行远程方法。接下来进一步讨论怎样实现 Dubbo 服务提供方和消费方。</p>
<h3 id="实现-Dubbo-服务提供方"><a href="#实现-Dubbo-服务提供方" class="headerlink" title="实现 Dubbo 服务提供方"></a>实现 Dubbo 服务提供方</h3><p>创建 ali-nacos-dubbo-provider，端口：9001 工程</p>
<p>pom.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-nacos-dubbo-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- API --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-nacos-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>bootstrap.yaml配置<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="comment"># dubbo 服务扫描基准包</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.easy.andProvider.service</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Dubbo 服务暴露的协议配置，其中子属性 name 为协议名称，port 为协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#Dubbo 服务注册中心配置，其中子属性 address 的值 “spring-cloud://localhost”，说明挂载到 Spring Cloud 注册中心</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">spring-cloud://localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># Dubbo 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-dubbo-provider</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># Nacos 服务发现与注册配置</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Dubbo Spring Cloud 继承了 Dubbo Spring Boot 的外部化配置特性，也可以通过标注 @DubboComponentScan 来实现基准包扫描。</p>
</blockquote>
<h4 id="实现-Dubbo-服务"><a href="#实现-Dubbo-服务" class="headerlink" title="实现 Dubbo 服务"></a>实现 Dubbo 服务</h4><p>HelloService 作为暴露的 Dubbo 服务接口，服务提供方 ali-nacos-dubbo-provider 需要将其实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.andProvider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.easy.and.api.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好 &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>import org.apache.dubbo.config.annotation.Service 是 Dubbo 服务注解，仅声明该 Java 服务实现为 Dubbo 服务</p>
</blockquote>
<p>贴上启动类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AndProviderApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现-Dubbo-服务消费方"><a href="#实现-Dubbo-服务消费方" class="headerlink" title="实现 Dubbo 服务消费方"></a>实现 Dubbo 服务消费方</h3><p>创建 ali-nacos-dubbo-consumer，端口：9103 工程</p>
<p>pom.xml依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-nacos-dubbo-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-nacos-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>yaml配置文件<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">spring-cloud://localhost</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">subscribed-services:</span> <span class="string">ali-nacos-dubbo-provider</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-nacos-dubbo-consumer</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></p>
<h4 id="实现-Dubbo-服务消费方-1"><a href="#实现-Dubbo-服务消费方-1" class="headerlink" title="实现 Dubbo 服务消费方"></a>实现 Dubbo 服务消费方</h4><p>HomeController.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.andConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.easy.and.api.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.hello(<span class="string">&quot;云天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>AndConsumerApplication.java启动类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.andConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AndConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="示例关联项目"><a href="#示例关联项目" class="headerlink" title="示例关联项目"></a>示例关联项目</h3><p>本示例我们创建了三个项目实现</p>
<ul>
<li><p>ali-nacos-dubbo-api：定义Dubbo服务接口工程</p>
</li>
<li><p>ali-nacos-dubbo-provider：Dubbo服务提供方并向nacos注册服务，服务名：ali-nacos-dubbo-provider，端口：9001</p>
</li>
<li><p>ali-nacos-dubbo-consumer：Dubbo服务消费方并向nacos注册服务，服务名：ali-nacos-dubbo-consumer，端口：9103</p>
</li>
</ul>
<h3 id="运行示例测试"><a href="#运行示例测试" class="headerlink" title="运行示例测试"></a>运行示例测试</h3><p>首先要启动服务注册中心 nacos、ali-nacos-dubbo-provider服务及ali-nacos-dubbo-consumer服务</p>
<ul>
<li>访问服务消费方地址： <a href="http://localhost:9103/hello">http://localhost:9103/hello</a></li>
</ul>
<p>返回<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">你好 云天</span><br></pre></td></tr></table></figure></p>
<p>或者你也可以通过 curl 命令执行 HTTP GET 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$curl http://127.0.0.1:9103/hello</span><br></pre></td></tr></table></figure>
<p>HTTP 响应为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好 云天</span><br></pre></td></tr></table></figure>
<p>以上结果说明应用 ali-nacos-dubbo-consumer 通过消费 Dubbo 服务，返回服务提供方 ali-nacos-dubbo-provider 运算后的内容。</p>
<p>以上我们完成了 Dubbo 服务提供方和消费方的入门运用，源代码请直接参考模块：</p>
<ul>
<li><a href="https://github.com/smltq/spring-boot-demo/tree/master/cloud-alibaba/ali-nacos-dubbo-provider">ali-nacos-dubbo-provider</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/tree/master/cloud-alibaba/ali-nacos-dubbo-consumer">ali-nacos-dubbo-consumer</a></li>
</ul>
<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba">Spring Cloud Alibaba 示例源码</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba/README4.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Spring Cloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba（五）RocketMQ 异步通信实现</title>
    <url>/2019/12/04/Spring%20Cloud%20Alibaba/README5/</url>
    <content><![CDATA[<p>本文探讨如何使用 RocketMQ Binder 完成 Spring Cloud 应用消息的订阅和发布。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://rocketmq.apache.org/">RocketMQ</a> 是一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务，广泛应用于多个领域，包括异步通信解耦、企业解决方案、金融支付、电信、电子商务、快递物流、广告营销、社交、即时通信、移动应用、手游、视频、物联网、车联网等。</p>
<p>RocketMQ 是阿里巴巴在2012年开源的分布式消息中间件，目前已经捐赠给 Apache 软件基金会，并于2017年9月25日成为 Apache 的顶级项目。作为经历过多次阿里巴巴双十一这种“超级工程”的洗礼并有稳定出色表现的国产中间件，以其高性能、低延时和高可靠等特性近年来已经也被越来越多的国内企业使用。</p>
<h3 id="RocketMQ特点"><a href="#RocketMQ特点" class="headerlink" title="RocketMQ特点"></a>RocketMQ特点</h3><ul>
<li>是一个队列模型的消息中间件，具有高性能、高可靠、高实时、分布式等特点</li>
<li>Producer、Consumer、队列都可以分布式</li>
<li>Producer 向一些队列轮流发送消息，队列集合称为 Topic，Consumer 如果做广播消费，则一个 Consumer 实例消费这个 Topic 对应的所有队列，如果做集群消费，则多个 Consumer 实例平均消费这个 Topic 对应的队列集合</li>
<li>能够保证严格的消息顺序</li>
<li>支持拉（pull）和推（push）两种消息模式</li>
<li>高效的订阅者水平扩展能力</li>
<li>实时的消息订阅机制</li>
<li>亿级消息堆积能力</li>
<li>支持多种消息协议，如 JMS、OpenMessaging 等</li>
<li>较少的依赖</li>
</ul>
<h2 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h2><p>Spring Cloud Stream 是一个构建消息驱动微服务的框架。</p>
<p>Spring Cloud Stream 提供了消息中间件配置的统一抽象，推出了 pub/sub，consumer groups，semantics，stateful partition 这些统一的模型支持。</p>
<p>Spring Cloud Stream 核心构件有：Binders、Bindings和Message，应用程序通过 inputs 或者 outputs 来与 binder 交互，通过我们配置来 binding ，而 binder 负责与中间件交互，Message为数据交换的统一数据规范格式。</p>
<ul>
<li>Binding: 包括 Input Binding 和 Output Binding。</li>
</ul>
<p>Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。</p>
<ul>
<li>Binder: 跟外部消息中间件集成的组件，用来创建 Binding，各消息中间件都有自己的 Binder 实现。</li>
</ul>
<p>比如 <code>Kafka</code> 的实现 <code>KafkaMessageChannelBinder</code>，<code>RabbitMQ</code> 的实现 <code>RabbitMessageChannelBinder</code> 以及 <code>RocketMQ</code> 的实现 <code>RocketMQMessageChannelBinder</code>。</p>
<ul>
<li>Message：是 Spring Framework 中的一个模块，其作用就是统一消息的编程模型。</li>
</ul>
<p>比如消息 Messaging 对应的模型就包括一个消息体 Payload 和消息头 Header。</p>
<p><a href="https://spring.io/projects/spring-cloud-stream">spring-cloud-stream 官网</a></p>
<h2 id="Window搭建部署RocketMQ"><a href="#Window搭建部署RocketMQ" class="headerlink" title="Window搭建部署RocketMQ"></a>Window搭建部署RocketMQ</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://mirror.bit.edu.cn/apache/rocketmq/4.6.0/">当前最新版本为4.6.0</a></p>
<p>下载出来解压到：D:\rocketmq 目录，目录最好不要带空格和太深，否则服务运行可能会报错</p>
<h3 id="启动NameServer服务"><a href="#启动NameServer服务" class="headerlink" title="启动NameServer服务"></a>启动NameServer服务</h3><p>在启动之前需要配置系统环境，不然会报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please set the ROCKETMQ_HOME variable in your environment! </span><br></pre></td></tr></table></figure>
<p>系统环境变量名：ROCKETMQ_HOME</p>
<p>根据你解压的目录配置环境变量，比如我的变量值为：D:\rocketmq</p>
<p>进入window命令窗口，进入D:\rocketmq\bin目录下，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start mqnamesrv.cmd</span><br></pre></td></tr></table></figure>
<p>如上则NameServer启动成功。使用期间，窗口不要关闭。</p>
<h3 id="启动Broker服务"><a href="#启动Broker服务" class="headerlink" title="启动Broker服务"></a>启动Broker服务</h3><p>进入bin目录下，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start mqbroker.cmd -n localhost:9876</span><br></pre></td></tr></table></figure>
<p>如上的 ip+port 是rocketmq的服务地址和端口。</p>
<p>运行如上命令，可能会报如下错误。找不到或无法加载主类</p>
<p>如果出此情况，打开bin—&gt;runbroker.cmd，修改%CLASSPATH%成”%CLASSPATH%”</p>
<p>保存再次执行如上命令。执行成功后，提示boot success 代表成功。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>本示例实现三种消息的发布以及订阅接收。</p>
<h3 id="创建-RocketMQ-消息生产者"><a href="#创建-RocketMQ-消息生产者" class="headerlink" title="创建 RocketMQ 消息生产者"></a>创建 RocketMQ 消息生产者</h3><p>创建 ali-rocketmq-producer 工程，端口为：28081</p>
<ul>
<li>pom.xml添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-rocketmq-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--rocketmq依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置 Output 的 Binding 信息并配合 <code>@EnableBinding</code> 注解使其生效</li>
</ul>
<p>application.yml配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">28081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-rocketmq-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="comment"># RocketMQ 服务器地址</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">output1:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic1</span>, <span class="attr">content-type:</span> <span class="string">application/json</span>&#125;</span><br><span class="line">        <span class="attr">output2:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic2</span>, <span class="attr">content-type:</span> <span class="string">application/json</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>
<p>ArProduceApplication.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;MySource.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArProduceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ArProduceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>消息生产者服务</li>
</ul>
<p>MySource.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.arProduce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Output;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MySource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(&quot;output1&quot;)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">output1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(&quot;output2&quot;)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">output2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SenderService.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.arProduce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.support.RocketMQHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MimeTypeUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SenderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MySource source;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        Message message = MessageBuilder.withPayload(msg)</span><br><span class="line">                .build();</span><br><span class="line">        source.output1().send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带tag的字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendWithTags</span><span class="params">(String msg, String tag)</span> </span>&#123;</span><br><span class="line">        Message message = MessageBuilder.withPayload(msg)</span><br><span class="line">                .setHeader(RocketMQHeaders.TAGS, tag)</span><br><span class="line">                .build();</span><br><span class="line">        source.output1().send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sendObject</span><span class="params">(T msg, String tag)</span> </span>&#123;</span><br><span class="line">        Message message = MessageBuilder.withPayload(msg)</span><br><span class="line">                .setHeader(RocketMQHeaders.TAGS, tag)</span><br><span class="line">                .setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON)</span><br><span class="line">                .build();</span><br><span class="line">        source.output2().send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编写 TestController.java 控制器方便测试<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.arProduce;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SenderService senderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/send&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        senderService.send(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;字符串消息发送成功!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/sendWithTags&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendWithTags</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        senderService.sendWithTags(msg, <span class="string">&quot;tagStr&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;带tag字符串消息发送成功!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/sendObject&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendObject</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        senderService.sendObject(<span class="keyword">new</span> Foo(index, <span class="string">&quot;foo&quot;</span>), <span class="string">&quot;tagObj&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Object对象消息发送成功!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="创建-RocketMQ-消息消费者"><a href="#创建-RocketMQ-消息消费者" class="headerlink" title="创建 RocketMQ 消息消费者"></a>创建 RocketMQ 消息消费者</h3><p>创建 ali-rocketmq-consumer 工程，端口为：28082</p>
<ul>
<li>pom.xml添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ali-rocketmq-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rocketmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>-配置 Input 的 Binding 信息并配合 <code>@EnableBinding</code> 注解使其生效</p>
<p>application.yml配置<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">28082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ali-rocketmq-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rocketmq:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">name-server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span> <span class="comment">#rocketmq 服务地址</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">input1:</span> &#123;<span class="attr">consumer.orderly:</span> <span class="literal">true</span>&#125;  <span class="comment">#是否排序</span></span><br><span class="line">          <span class="attr">input2:</span> &#123;<span class="attr">consumer.tags:</span> <span class="string">tagStr</span>&#125;   <span class="comment">#订阅 带tag值为tagStr的字符串</span></span><br><span class="line">          <span class="attr">input3:</span> &#123;<span class="attr">consumer.tags:</span> <span class="string">tagObj</span>&#125;   <span class="comment">#订阅 带tag值为tabObj的字符串</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">input1:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic1</span>, <span class="attr">content-type:</span> <span class="string">text/plain</span>, <span class="attr">group:</span> <span class="string">test-group1</span>, <span class="attr">consumer.maxAttempts:</span> <span class="number">1</span>&#125;</span><br><span class="line">        <span class="attr">input2:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic1</span>, <span class="attr">content-type:</span> <span class="string">application/plain</span>, <span class="attr">group:</span> <span class="string">test-group2</span>, <span class="attr">consumer.maxAttempts:</span> <span class="number">1</span>&#125;</span><br><span class="line">        <span class="attr">input3:</span> &#123;<span class="attr">destination:</span> <span class="string">test-topic2</span>, <span class="attr">content-type:</span> <span class="string">application/plain</span>, <span class="attr">group:</span> <span class="string">test-group3</span>, <span class="attr">consumer.maxAttempts:</span> <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></p>
<p>ArConsumerApplication.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.arConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;MySource.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ArConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>消息消费者服务</li>
</ul>
<p>MySource.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.arConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Input;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.SubscribableChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MySource</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Input(&quot;input1&quot;)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(&quot;input2&quot;)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(&quot;input3&quot;)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ReceiveService.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.arConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput1</span><span class="params">(String receiveMsg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;input1 接收到了消息：&quot;</span> + receiveMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput2</span><span class="params">(String receiveMsg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;input2 接收到了消息：&quot;</span> + receiveMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(&quot;input3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveInput3</span><span class="params">(<span class="meta">@Payload</span> Foo foo)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;input3 接收到了消息：&quot;</span> + foo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="示例关联项目"><a href="#示例关联项目" class="headerlink" title="示例关联项目"></a>示例关联项目</h3><p>本示例我们创建了两个项目实现</p>
<ul>
<li><p>ali-rocketmq-producer：RocketMQ 消息服务生产者，服务名：ali-rocketmq-producer，端口：28081</p>
</li>
<li><p>ali-rocketmq-consumer：RocketMQ 消息服务消费者，服务名：ali-rocketmq-producer，端口：28082</p>
</li>
</ul>
<h3 id="运行示例测试"><a href="#运行示例测试" class="headerlink" title="运行示例测试"></a>运行示例测试</h3><p>首先要启动ali-rocketmq-producer服务及ali-rocketmq-consumer服务</p>
<ul>
<li>访问消息服务生产者地址： <a href="http://localhost:28081/test/send?msg=yuntian">http://localhost:28081/test/send?msg=yuntian</a></li>
</ul>
<p>查看服务消费者控制台，输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-12-04 15:37:47.859  INFO 6356 --- [MessageThread_1] com.easy.arConsumer.ReceiveService       : input1 接收到了消息：yuntian</span><br><span class="line">2019-12-04 15:37:47.859  INFO 6356 --- [MessageThread_1] s.b.r.c.RocketMQListenerBindingContainer : consume C0A8096E200818B4AAC212CDA70E0014 cost: 1 ms</span><br></pre></td></tr></table></figure><br>表示字符串消费成功被input1消费了</p>
<ul>
<li>访问消息服务生产者地址： <a href="http://localhost:28081/test/sendWithTags?msg=tagyuntian">http://localhost:28081/test/sendWithTags?msg=tagyuntian</a></li>
</ul>
<p>查看服务消费者控制台，输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-12-04 15:38:09.586  INFO 6356 --- [MessageThread_1] com.easy.arConsumer.ReceiveService       : input2 接收到了消息：tagyuntian</span><br><span class="line">2019-12-04 15:38:09.592  INFO 6356 --- [MessageThread_1] com.easy.arConsumer.ReceiveService       : input1 接收到了消息：tagyuntian</span><br><span class="line">2019-12-04 15:38:09.592  INFO 6356 --- [MessageThread_1] s.b.r.c.RocketMQListenerBindingContainer : consume C0A8096E200818B4AAC212CDFCD30015 cost: 6 ms</span><br></pre></td></tr></table></figure><br>表示带tag的字符串成功被input2和input1消费了，因为input1也订阅了test-topic1，并且没有我们没有加tag过滤，默认表示接收所有消息，所以也能成功接收tagyuntian字符串</p>
<ul>
<li>访问消息服务生产者地址： <a href="http://localhost:28081/test/sendObject?index=1">http://localhost:28081/test/sendObject?index=1</a></li>
</ul>
<p>查看服务消费者控制台，输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-12-04 15:41:15.285  INFO 6356 --- [MessageThread_1] com.easy.arConsumer.ReceiveService       : input3 接收到了消息：Foo&#123;id=1, bar=&#x27;foo&#x27;&#125;</span><br></pre></td></tr></table></figure><br>表示input3成功接收到了tag带tagObj的对象消息了，而input1却没有输出消息，这是因为sendObject发布的消息走的是test-topic2消息管道，所以不会发布给input1及input2订阅者</p>
<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba">Spring Cloud Alibaba 示例源码</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-alibaba/README5.md">原文地址</a></li>
<li><a href="https://github.com/apache/rocketmq">RocketMQ 项目</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Spring Cloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Bean 生命周期</title>
    <url>/2020/01/09/issueGather/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>对于普通的Java对象，当new的时候创建对象，当它没有任何引用的时候被垃圾回收机制回收。而由Spring IoC容器托管的对象，它们的生命周期完全由容器控制。</p>
<p><img src="https://tqlin.cn/images/bean.jpg" alt="bean生命周期"></p>
<h2 id="Bean生命周期流程"><a href="#Bean生命周期流程" class="headerlink" title="Bean生命周期流程"></a>Bean生命周期流程</h2><h3 id="1-实例化Bean"><a href="#1-实例化Bean" class="headerlink" title="1.实例化Bean"></a>1.实例化Bean</h3><p>实例化Bean对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。 </p>
<p>对于ApplicationContext容器，当容器启动结束后，便实例化所有的bean。 </p>
<p>容器通过获取BeanDefinition对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。 实例化对象被包装在BeanWrapper对象中，BeanWrapper提供了设置对象属性的接口，从而避免了使用反射机制设置属性。</p>
<h3 id="2-设置对象属性（依赖注入）"><a href="#2-设置对象属性（依赖注入）" class="headerlink" title="2.设置对象属性（依赖注入）"></a>2.设置对象属性（依赖注入）</h3><p>实例化后的对象被封装在BeanWrapper对象中，并且此时对象仍然是一个原生的状态，并没有进行依赖注入。 紧接着，Spring根据BeanDefinition中的信息进行依赖注入。 并且通过BeanWrapper提供的设置属性的接口完成依赖注入。</p>
<h3 id="3-注入Aware接口"><a href="#3-注入Aware接口" class="headerlink" title="3.注入Aware接口"></a>3.注入Aware接口</h3><p>紧接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给bean。</p>
<ul>
<li><p>如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID</p>
</li>
<li><p>如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）</p>
</li>
<li><p>如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，ApplicationContext是BeanFactory的子接口，有更多的实现方法</p>
</li>
</ul>
<h3 id="4-BeanPostProcessor"><a href="#4-BeanPostProcessor" class="headerlink" title="4.BeanPostProcessor"></a>4.BeanPostProcessor</h3><p>当经过上述几个步骤后，bean对象已经被正确构造，但如果你想要对象被使用前再进行一些自定义的处理，就可以通过BeanPostProcessor接口实现。 </p>
<p>该接口提供了两个函数：</p>
<ul>
<li>postProcessBeforeInitialzation( Object bean, String beanName )</li>
</ul>
<p>当前正在初始化的bean对象会被传递进来，我们就可以对这个bean作任何处理。 这个函数会先于InitialzationBean执行，因此称为前置处理。 所有Aware接口的注入就是在这一步完成的。</p>
<ul>
<li>postProcessAfterInitialzation( Object bean, String beanName )</li>
</ul>
<p>当前正在初始化的bean对象会被传递进来，我们就可以对这个bean作任何处理。 这个函数会在InitialzationBean完成后执行，因此称为后置处理。</p>
<h3 id="5-InitializingBean与init-method"><a href="#5-InitializingBean与init-method" class="headerlink" title="5.InitializingBean与init-method"></a>5.InitializingBean与init-method</h3><p>当BeanPostProcessor的前置处理完成后就会进入本阶段。 </p>
<p>InitializingBean接口只有一个函数：</p>
<ul>
<li>afterPropertiesSet()</li>
</ul>
<p>这一阶段也可以在bean正式构造完成前增加我们自定义的逻辑，但它与前置处理不同，由于该函数并不会把当前bean对象传进来，因此在这一步没办法处理对象本身，只能增加一些额外的逻辑。 若要使用它，我们需要让bean实现该接口，并把要增加的逻辑写在该函数中。然后Spring会在前置处理完成后检测当前bean是否实现了该接口，并执行afterPropertiesSet函数。</p>
<p>当然，Spring为了降低对客户代码的侵入性，给bean的配置提供了init-method属性，该属性指定了在这一阶段需要执行的函数名。Spring便会在初始化阶段执行我们设置的函数。init-method本质上仍然使用了InitializingBean接口。</p>
<h3 id="6-DisposableBean和destroy-method"><a href="#6-DisposableBean和destroy-method" class="headerlink" title="6. DisposableBean和destroy-method"></a>6. DisposableBean和destroy-method</h3><p>和init-method一样，通过给destroy-method指定函数，就可以在bean销毁前执行指定的逻辑。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;AnnotationBean 开始初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;AnnotationBean 开始销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="InitializingBean-DisposableBean-接口"><a href="#InitializingBean-DisposableBean-接口" class="headerlink" title="InitializingBean, DisposableBean 接口"></a>InitializingBean, DisposableBean 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;SpringLifeCycleService 开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;SpringLifeCycleService 销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义初始化和销毁方法"><a href="#自定义初始化和销毁方法" class="headerlink" title="自定义初始化和销毁方法"></a>自定义初始化和销毁方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;SpringLifeCycle 开始初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;SpringLifeCycle 开始销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(initMethod = &quot;start&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringLifeCycle <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringLifeCycle springLifeCycle = <span class="keyword">new</span> SpringLifeCycle();</span><br><span class="line">        <span class="keyword">return</span> springLifeCycle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者通过xml配置如下<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.easy.bean.SpringLifeCycle&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="实现-xxxAware-接口"><a href="#实现-xxxAware-接口" class="headerlink" title="实现 xxxAware 接口"></a>实现 xxxAware 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleAware</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        log.info(<span class="string">&quot;SpringLifeCycleAware 开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在 springLifeCycleAware 这个 bean 初始化会就会调用 setApplicationContext 方法，并可以获得 applicationContext 对象。</p>
<h3 id="BeanPostProcessor-增强处理器"><a href="#BeanPostProcessor-增强处理器" class="headerlink" title="BeanPostProcessor 增强处理器"></a>BeanPostProcessor 增强处理器</h3><p>实现 BeanPostProcessor 接口，Spring 中所有 bean 在做初始化时都会调用该接口中的两个方法，可以用于对一些特殊的 bean 进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预初始化 初始化之前调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;annotationBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SpringLifeCycleProcessor 开始初始化 beanName=&#123;&#125;&quot;</span>, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后初始化  bean 初始化完成调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;annotationBean&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;SpringLifeCycleProcessor 初始化结束 beanName=&#123;&#125;&quot;</span>, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行示例查看控制台输出"><a href="#运行示例查看控制台输出" class="headerlink" title="运行示例查看控制台输出"></a>运行示例查看控制台输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-01-09 17:46:37.022  INFO 9544 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2020-01-09 17:46:37.023  INFO 9544 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1642 ms</span><br><span class="line">2020-01-09 17:46:37.081  INFO 9544 --- [           main] com.easy.bean.SpringLifeCycleProcessor   : SpringLifeCycleProcessor 开始初始化 beanName=annotationBean</span><br><span class="line">2020-01-09 17:46:37.089  INFO 9544 --- [           main] com.easy.bean.AnnotationBean             : AnnotationBean 开始初始化</span><br><span class="line">2020-01-09 17:46:37.089  INFO 9544 --- [           main] com.easy.bean.SpringLifeCycleProcessor   : SpringLifeCycleProcessor 初始化结束 beanName=annotationBean</span><br><span class="line">2020-01-09 17:46:37.090  INFO 9544 --- [           main] com.easy.bean.SpringLifeCycleAware       : SpringLifeCycleAware 开始</span><br><span class="line">2020-01-09 17:46:37.091  INFO 9544 --- [           main] com.easy.bean.SpringLifeCycleService     : SpringLifeCycleService 开始</span><br><span class="line">2020-01-09 17:46:37.093  INFO 9544 --- [           main] com.easy.bean.SpringLifeCycle            : SpringLifeCycle 开始初始化</span><br><span class="line">2020-01-09 17:46:37.279  INFO 9544 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/bean">bean生命周期示例源码</a></li>
<li><a href="https://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch04s04.html">官方文档</a></li>
<li><a href="https://www.zhihu.com/question/38597960">参考资料</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7部署mysql</title>
    <url>/2019/11/22/issueGather/Centos7%E9%83%A8%E7%BD%B2mysql/</url>
    <content><![CDATA[<h1 id="Centos7部署mysql"><a href="#Centos7部署mysql" class="headerlink" title="Centos7部署mysql"></a>Centos7部署mysql</h1><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><blockquote>
<p>yum install mysql mysql-server</p>
</blockquote>
<p>会出现以下错误：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@yl-web yl]# yum install mysql-server</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.sina.cn</span><br><span class="line"> * extras: mirrors.sina.cn</span><br><span class="line"> * updates: mirrors.sina.cn</span><br><span class="line">No package mysql-server available.</span><br><span class="line">Error: Nothing to do</span><br></pre></td></tr></table></figure><br>出现这个问题的原因是，CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替。</p>
<h3 id="解决办法1：安装mariadb"><a href="#解决办法1：安装mariadb" class="headerlink" title="解决办法1：安装mariadb"></a>解决办法1：安装mariadb</h3><p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>
<p>安装mariadb，文件几十M左右大小</p>
<blockquote>
<p>yum install mariadb-server mariadb </p>
</blockquote>
<p>mariadb数据库的相关命令是：</p>
<ul>
<li>systemctl start mariadb  #启动MariaDB</li>
<li>systemctl stop mariadb  #停止MariaDB</li>
<li>systemctl restart mariadb  #重启MariaDB</li>
<li>systemctl enable mariadb  #设置开机启动</li>
</ul>
<h3 id="解决办法2：官网下载安装mysql-server"><a href="#解决办法2：官网下载安装mysql-server" class="headerlink" title="解决办法2：官网下载安装mysql-server"></a>解决办法2：官网下载安装mysql-server</h3><p>安装前，我们可以检测系统是否自带安装 MySQL:</p>
<blockquote>
<p>rpm -qa | grep mysql</p>
</blockquote>
<p>如果系统有安装，那可以选择进行卸载:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e mysql  // 普通删除模式</span><br><span class="line">rpm -e --nodeps mysql // 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span><br></pre></td></tr></table></figure>
<p>1.安装 MySQL</p>
<p>接下来我们在 Centos7 系统下使用 yum 命令安装 MySQL，需要注意的是 CentOS 7 版本中 MySQL数据库已从默认的程序列表中移除，所以在安装前我们需要先去官网下载 Yum 资源包，下载地址为：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure>
<p>2.初始化 MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure>
<p>3.启动 MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p>4.查看 MySQL 运行状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>
<p>5.验证 MySQL 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin --version</span><br></pre></td></tr></table></figure>
<p>输出类似以下信息，表示安装成功了</p>
<blockquote>
<p>mysqladmin  Ver 8.42 Distrib 5.6.46, for Linux on x86_64</p>
</blockquote>
<p>如果以上命令执行后未输出任何信息，说明你的Mysql未安装成功。</p>
<p>6.密码设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password &quot;new_password&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="navicat-远程访问mysql失败，修改配置如下"><a href="#navicat-远程访问mysql失败，修改配置如下" class="headerlink" title="navicat 远程访问mysql失败，修改配置如下"></a>navicat 远程访问mysql失败，修改配置如下</h2><p>1.首先配置允许访问的用户，采用授权的方式给用户权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION</span><br></pre></td></tr></table></figure>
<p>root是登陆数据库的用户，123456是登陆数据库的密码</p>
<p>2.配置好权限之后，刷新生效</p>
<p>flush privileges</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/java-gather/src/main/java/com/easy/javaGather/Centos7%E9%83%A8%E7%BD%B2mysql.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令</title>
    <url>/2020/03/26/issueGather/Docker%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="docker命令详解"><a href="#docker命令详解" class="headerlink" title="docker命令详解"></a>docker命令详解</h1><h4 id="docker-存在的意义"><a href="#docker-存在的意义" class="headerlink" title="docker 存在的意义"></a>docker 存在的意义</h4><ul>
<li>使用dokcer加速本地开发和构建，开发人员可以构建、运行并分享Docker容器，容器可以在开发环境中构建，然后轻松地提交到测试环境中，并最终进入生产环境</li>
<li>能够让独立服务或应用程序在不同环境中，得到相同的运行结果。</li>
<li>用docker 创建隔离环境进行测试</li>
<li>docker 可以让开发者先在本机上构建一个复杂的程序测试，而不是一开始就在生产环境进行测试</li>
</ul>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul>
<li><a href="#docker概念">docker概念</a></li>
<li><a href="#docker的使用命令">docker的使用命令</a></li>
<li><a href="#操作docker镜像">操作docker镜像</a></li>
<li><a href="#启动容器">启动容器</a></li>
<li><a href="#查看容器">查看容器</a></li>
<li><a href="#保存和加载镜像">保存和加载镜像</a></li>
<li><a href="#登录">登录Docker Hub</a></li>
<li><a href="#发布docker镜像">发布docker镜像</a></li>
<li><a href="#构建镜像">构建镜像</a></li>
</ul>
<h4 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h4><ul>
<li>Docker 的常用文档:<a href="https://docs.docker.com/">https://docs.docker.com/</a></li>
<li>Docker 镜像: 用户基于镜像来运行自己的容器，可以把镜像当做容器的『源代码』，镜像体积很小，易于分享、存储和更新</li>
<li>Registry: Docker 用 Registry 保存用户构建的镜像，Registry 分为公共和私有两种:<ul>
<li>Docker 公司运营的公共 Registry 叫做 Docker Hub，我们可以在上面注册账号，分享并保存自己的镜像。</li>
<li>可以在 Docker Hub 保存自己的私有镜像或者架设自己私有的 Registry</li>
</ul>
</li>
<li>Docker 容器: 把应用程序或服务打包放进去，容器是基于镜像启动的，容器中可以运行一个或多个进程。<ul>
<li>镜像是 Docker 生命周期中的构建或打包阶段</li>
<li>容器则是启动或执行阶段</li>
</ul>
</li>
</ul>
<h4 id="docker的使用命令"><a href="#docker的使用命令" class="headerlink" title="docker的使用命令"></a>docker的使用命令</h4><p>1 docker 命令介绍</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --help</span><br><span class="line"></span><br><span class="line">管理命令:</span><br><span class="line">  container   管理容器</span><br><span class="line">  image       管理镜像</span><br><span class="line">  network     管理网络</span><br><span class="line">命令：</span><br><span class="line">  attach      介入到一个正在运行的容器</span><br><span class="line">  build       根据 Dockerfile 构建一个镜像</span><br><span class="line">  commit      根据容器的更改创建一个新的镜像</span><br><span class="line">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class="line">  create      创建一个新容器</span><br><span class="line">  exec        在容器中执行一条命令</span><br><span class="line">  images      列出镜像</span><br><span class="line">  kill        杀死一个或多个正在运行的容器    </span><br><span class="line">  logs        取得容器的日志</span><br><span class="line">  pause       暂停一个或多个容器的所有进程</span><br><span class="line">  ps          列出所有容器</span><br><span class="line">  pull        拉取一个镜像或仓库到 registry</span><br><span class="line">  push        推送一个镜像或仓库到 registry</span><br><span class="line">  rename      重命名一个容器</span><br><span class="line">  restart     重新启动一个或多个容器</span><br><span class="line">  rm          删除一个或多个容器</span><br><span class="line">  rmi         删除一个或多个镜像</span><br><span class="line">  run         在一个新的容器中执行一条命令</span><br><span class="line">  search      在 Docker Hub 中搜索镜像</span><br><span class="line">  start       启动一个或多个已经停止运行的容器</span><br><span class="line">  stats       显示一个容器的实时资源占用</span><br><span class="line">  stop        停止一个或多个正在运行的容器</span><br><span class="line">  tag         为镜像创建一个新的标签</span><br><span class="line">  top         显示一个容器内的所有进程</span><br><span class="line">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>docker run命令:<br><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> [OPTIONS] IMAGE [COMMAND] [ARG...]    </span></span><br><span class="line"> </span><br><span class="line"> -d, --detach=false         指定容器运行于前台还是后台，默认为false     </span><br><span class="line"> -i, --interactive=false   打开STDIN，用于控制台交互    </span><br><span class="line"> -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false    </span><br><span class="line"> -u, --<span class="keyword">user</span>=<span class="string">&quot;&quot;</span>              指定容器的用户    </span><br><span class="line"> -a, --attach=[]            登录容器（必须是以docker <span class="keyword">run</span><span class="bash"> -d启动的容器）  </span></span><br><span class="line"> -w, --<span class="keyword">workdir</span><span class="bash">=<span class="string">&quot;&quot;</span>           指定容器的工作目录   </span></span><br><span class="line"> -c, --cpu-shares=<span class="number">0</span>        设置容器CPU权重，在CPU共享场景使用    </span><br><span class="line"> -e, --<span class="keyword">env</span>=[]               指定环境变量，容器中可以使用该环境变量    </span><br><span class="line"> -m, --memory=<span class="string">&quot;&quot;</span>            指定容器的内存上限    </span><br><span class="line"> -P, --publish-all=false    指定容器暴露的端口    </span><br><span class="line"> -p, --publish=[]           指定容器暴露的端口   </span><br><span class="line"> -h, --hostname=<span class="string">&quot;&quot;</span>          指定容器的主机名    </span><br><span class="line"> -v, --<span class="keyword">volume</span><span class="bash">=[]            给容器挂载存储卷，挂载到容器的某个目录    </span></span><br><span class="line"> --volumes-<span class="keyword">from</span>=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  </span><br><span class="line"> --cap-<span class="keyword">add</span><span class="bash">=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities    </span></span><br><span class="line"> --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/<span class="number">7</span>/capabilities    </span><br><span class="line"> --cidfile=<span class="string">&quot;&quot;</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法    </span><br><span class="line"> --cpuset=<span class="string">&quot;&quot;</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU    </span><br><span class="line"> --device=[]                添加主机设备给容器，相当于设备直通    </span><br><span class="line"> --dns=[]                   指定容器的dns服务器    </span><br><span class="line"> --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件    </span><br><span class="line"> --<span class="keyword">entrypoint</span><span class="bash">=<span class="string">&quot;&quot;</span>            覆盖image的入口点    </span></span><br><span class="line"> --<span class="keyword">env</span>-file=[]              指定环境变量文件，文件格式为每行一个环境变量    </span><br><span class="line"> --<span class="keyword">expose</span>=[]                指定容器暴露的端口，即修改镜像的暴露端口    </span><br><span class="line"> --link=[]                  指定容器间的关联，使用其他容器的IP、<span class="keyword">env</span>等信息    </span><br><span class="line"> --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用    </span><br><span class="line"> --name=<span class="string">&quot;&quot;</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字    </span><br><span class="line"> --net=<span class="string">&quot;bridge&quot;</span>             容器网络设置:  </span><br><span class="line">                               bridge 使用docker daemon指定的网桥       </span><br><span class="line">                               host    //容器使用主机的网络    </span><br><span class="line">                               container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源    </span><br><span class="line">                               none 容器使用自己的网络（类似--net=bridge），但是不进行配置   </span><br><span class="line"> --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities    </span><br><span class="line"> --restart=<span class="string">&quot;no&quot;</span>             指定容器停止后的重启策略:  </span><br><span class="line">                               no：容器退出时不重启    </span><br><span class="line">                               on-failure：容器故障退出（返回值非零）时重启   </span><br><span class="line">                               always：容器退出时总是重启    </span><br><span class="line"> --rm=false                 指定容器停止后自动删除容器(不支持以docker <span class="keyword">run</span><span class="bash"> -d启动的容器)    </span></span><br><span class="line"> --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理    </span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>2.更详细的功能参数配置</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>—api-enable-cors=false</td>
<td>开放远程API调用的 CORS 头信息。这个接口开关对想进行二次开发的上层应用提供了支持.</td>
</tr>
<tr>
<td>-b, —bridge=””</td>
<td>挂载已经存在的网桥设备到 Docker 容器里。注意，使用 none 可以停用容器里的网络.</td>
</tr>
<tr>
<td>—bip=””</td>
<td>使用 CIDR 地址来设定网络桥的 IP。注意，此参数和 -b 不能一起使用.</td>
</tr>
<tr>
<td>-D, —debug=false</td>
<td>开启Debug模式。例如：docker -d -D</td>
</tr>
<tr>
<td>-d, —daemon=false</td>
<td>开启Daemon模式.</td>
</tr>
<tr>
<td>—dns=[]</td>
<td>强制容器使用DNS服务器.例如： docker -d —dns 8.8.8.8</td>
</tr>
<tr>
<td>—dns-search=[]</td>
<td>强制容器使用指定的DNS搜索域名.例如： docker -d —dns-search example.com</td>
</tr>
<tr>
<td>-e, —exec-driver=”native”</td>
<td>强制容器使用指定的运行时驱动.例如：docker -d -e lxc</td>
</tr>
<tr>
<td>-G, —group=”docker”</td>
<td>在后台运行模式下，赋予指定的Group到相应的unix socket上。注意，当此参数 —group 赋予空字符串时，将去除组信息。</td>
</tr>
<tr>
<td>-g, —graph=”/var/lib/docker”</td>
<td>配置Docker运行时根目录</td>
</tr>
<tr>
<td>-H, —host=[]</td>
<td>在后台模式下指定socket绑定，可以绑定一个或多个 tcp://host:port, unix:///path/to/socket, fd://* 或 fd://socketfd。例如：$ docker -H tcp://0.0.0.0:2375 ps 或者 $ export DOCKER_HOST=”tcp://0.0.0.0:2375” $ docker ps</td>
</tr>
<tr>
<td>—icc=true</td>
<td>启用内联容器的通信.</td>
</tr>
<tr>
<td>—ip=”0.0.0.0”</td>
<td>容器绑定IP时使用的默认IP地址.</td>
</tr>
<tr>
<td>—ip-forward=true</td>
<td>启动容器的 net.ipv4.ip_forward.</td>
</tr>
<tr>
<td>—iptables=true</td>
<td>启动Docker容器自定义的iptable规则.</td>
</tr>
<tr>
<td>—mtu=0</td>
<td>设置容器网络的MTU值，如果没有这个参数，选用默认 route MTU，如果没有默认route，就设置成常量值 1500.</td>
</tr>
<tr>
<td>-p, —pidfile=”/var/run/docker.pid”</td>
<td>后台进程PID文件路径.</td>
</tr>
<tr>
<td>-r, —restart=true</td>
<td>重启之前运行中的容器.</td>
</tr>
<tr>
<td>-s, —storage-driver=””</td>
<td>强制容器运行时使用指定的存储驱动，例如,指定使用devicemapper, 可以这样：docker -d -s devicemapper</td>
</tr>
<tr>
<td>—selinux-enabled=false</td>
<td>启用selinux支持</td>
</tr>
<tr>
<td>—storage-opt=[]</td>
<td>配置存储驱动的参数</td>
</tr>
<tr>
<td>—tls=false</td>
<td>启动TLS认证开关</td>
</tr>
<tr>
<td>—tlscacert=”/Users/dxiao/.docker/ca.pem”</td>
<td>通过CA认证过的的certificate文件路径</td>
</tr>
<tr>
<td>—tlscert=”/Users/dxiao/.docker/cert.pem”</td>
<td>TLS的certificate文件路径</td>
</tr>
<tr>
<td>—tlskey=”/Users/dxiao/.docker/key.pem”</td>
<td>TLS的key文件路径</td>
</tr>
<tr>
<td>—tlsverify=false</td>
<td>使用TLS并做后台进程与客户端通讯的验证</td>
</tr>
<tr>
<td>-v, —version=false</td>
<td>显示版本信息</td>
</tr>
</tbody>
</table>
</div>
<p>*注意：其中带有[] 的启动参数可以指定多次，例如<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -a stdin -a stdout -a stderr -i -t ubuntu /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="docker基本信息"><a href="#docker基本信息" class="headerlink" title="docker基本信息"></a>docker基本信息</h4><ol>
<li>查看系统内核 </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
<ol>
<li>启动docker 境像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker </span><br></pre></td></tr></table></figure>
<p>3.查看docker版本  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker verison</span><br></pre></td></tr></table></figure>
<p>4.显示docker系统的信息 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<h4 id="操作docker镜像"><a href="#操作docker镜像" class="headerlink" title="操作docker镜像"></a>操作docker镜像</h4><p>1.检索image </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search image-name</span><br></pre></td></tr></table></figure>
<p>2.下载image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull image-name</span><br></pre></td></tr></table></figure>
<p>3.列出镜像列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<p>4.删除一个或者多个镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi image-name</span><br></pre></td></tr></table></figure>
<p>5.显示一个镜像的历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker history image-name  </span><br></pre></td></tr></table></figure>
<p>6.通过容器创建镜像</p>
<p><em>从已经创建的容器中更新镜像，并且提交这个镜像
</em>使用 Dockerfile 指令来创建一个新的镜像<br>下面通过已存在的容器创建一个新的镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit -m=&quot;First Image&quot; -a=&quot;keke&quot; 7a15f99695c0 keke/unbantu:17.10.0</span><br><span class="line"></span><br><span class="line">上面命令参数说明：</span><br><span class="line">* -m 提交的描述信息</span><br><span class="line">* -a 指定镜像作者</span><br><span class="line">* 7a15f99695c0 记住这个是容器id，不是镜像id</span><br><span class="line">* keke/unbantu:17.10.0 创建的目标镜像名</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>在<a href="https://www.docker.com/">Docker</a> 注册账户，发布的镜像都在<a href="https://cloud.docker.com/repository/list">这个页面里</a>展示</li>
<li>将上面做的镜像<code>unbantu</code>，起个新的名字<code>unbantu-test</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag keke/unbantu:17.10.0 keke/unbantu-test:lastest</span><br></pre></td></tr></table></figure>
<ol>
<li>登录docker</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
<p>4.上传unbantu镜像<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push keke/unbantu-test:lastest</span><br></pre></td></tr></table></figure></p>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容器也会完全的停止。</p>
<p>1.在容器中安装新的程序<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run image-name apt-get install -y -name</span><br></pre></td></tr></table></figure><br>2.在容器中运行”echo”命令，输出”hello word”<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run image-name echo &quot;hello word&quot; </span><br></pre></td></tr></table></figure><br>3.交互式进入容器中<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -i -t image_name /bin/bash  </span><br></pre></td></tr></table></figure><br>注意:在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失.</p>
<h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><p>1.列出当前所有正在运行的container<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></p>
<p>2.列出所有的container<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a  </span><br></pre></td></tr></table></figure></p>
<p>3.列出最近一次启动的container<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -l  </span><br></pre></td></tr></table></figure></p>
<p>4.保存对容器的修改<br>当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。</p>
<p>1.保存对容器的修改; -a, —author=”” Author; -m, —message=”” Commit message<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit ID new-image-name </span><br></pre></td></tr></table></figure></p>
<p>5.操作容器</p>
<p>1.删除所有容器<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm `docker ps -a -q`</span><br></pre></td></tr></table></figure></p>
<p>2.删除单个容器; -f, —force=false; -l, —link=false Remove the specified link and not the underlying container; -v, —volumes=false Remove the volumes associated to the container<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm Name/ID </span><br></pre></td></tr></table></figure></p>
<p>3.停止、启动、杀死一个容器<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop Name/ID  </span><br><span class="line">docker start Name/ID  </span><br><span class="line">docker kill Name/ID </span><br></pre></td></tr></table></figure></p>
<p>4.从一个容器中取日志; -f, —follow=false Follow log output; -t, —timestamps=false Show timestamps<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs Name/ID  </span><br></pre></td></tr></table></figure></p>
<p>5.列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker diff Name/ID</span><br></pre></td></tr></table></figure></p>
<p>6.显示一个运行的容器里面的进程信息<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top Name/ID  </span><br></pre></td></tr></table></figure></p>
<p>7.从容器里面拷贝文件/目录到本地一个路径 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp Name:/container-path to-path  </span><br><span class="line">docker cp ID:/container-path to-path </span><br></pre></td></tr></table></figure>
<p>8.重启一个正在运行的容器; -t, —time=10 Number of seconds to try to stop for before killing the container, Default=10<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart Name/ID</span><br></pre></td></tr></table></figure></p>
<p>9.附加到一个运行的容器上面; —no-stdin=false Do not attach stdin; —sig-proxy=true Proxify all received signal to the process<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach ID #重新启动并运行一个交互式会话shell</span><br></pre></td></tr></table></figure><br>注意：使用这个命令可以挂载正在后台运行的容器，在开发应用的过程中运用这个命令可以随时观察容器內进程的运行状况.</p>
<h4 id="保存和加载镜像"><a href="#保存和加载镜像" class="headerlink" title="保存和加载镜像"></a>保存和加载镜像</h4><p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。</p>
<p>1.保存镜像到一个tar包; -o, —output=”” Write to an file<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save image-name -o file-path </span><br></pre></td></tr></table></figure></p>
<p>2.加载一个tar包格式的镜像; -i, —input=”” Read from a tar archive file<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i file-path </span><br></pre></td></tr></table></figure></p>
<p>3.从机器A拷贝到机器B<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save image-name &gt; /home/keke/main.tar</span><br><span class="line"></span><br><span class="line">*使用scp将main.tar拷到机器A上:</span><br><span class="line"></span><br><span class="line">docker load &lt; /home/keke/main.tar</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>1.登陆registry server; -e, —email=”” Email; -p, —password=”” Password; -u, —username=”” Username</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
<h4 id="发布docker镜像"><a href="#发布docker镜像" class="headerlink" title="发布docker镜像"></a>发布docker镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push new-image-name </span><br></pre></td></tr></table></figure>
<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><ol>
<li>Dockerfile文件使用</li>
</ol>
<p>docker build命令会根据Dockerfile文件及上下文构建新Docker镜像。构建上下文是指Dockerfile所在的本地路径或一个URL（Git仓库地址）。构建上下文环境会被递归处理，所以，构建所指定的路径还包括了子目录，而URL还包括了其中指定的子模块。</p>
<ul>
<li>构建镜像</li>
</ul>
<p>将当前目录做为构建上下文时，可以像下面这样使用docker build命令构建镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/Downloads/hello-system$ sudo docker build .</span></span><br><span class="line">Sending build context to Docker daemon  70.14kB</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>说明：构建会在Docker后台守护进程（daemon）中执行，而不是CLI中。构建前，构建进程会将全部内容（递归）发送到守护进程。大多情况下，应该将一个空目录作为构建上下文环境，并将Dockerfile文件放在该目录下。</p>
<p>在构建上下文中使用的Dockerfile文件，是一个构建指令文件。为了提高构建性能，可以通过.dockerignore文件排除上下文目录下，不需要的文件和目录。</p>
<p>Dockerfile一般位于构建上下文的根目录下，也可以通过-f指定该文件的位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker build -f /home/keke/Downloads/hello-system/Dockerfile .</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>构建时,还可以通过-t参数指定构建成后,镜像的仓库,标签等：</p>
<ul>
<li>镜像标签</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/Downloads/hello-system$ sudo docker build -t keke/myapp .</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果存在多个仓库下，或使用多个镜像标签，就可以使用多个-t参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t keke/myapp:1.0.2 -t keke/myapp:latest .</span></span><br></pre></td></tr></table></figure>
<p>在Docker守护进程执行Dockerfile中的指令前，首先会对Dockerfile进行语法检查，有语法错误时会返回：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t <span class="built_in">test</span>/myapp .</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Dockerfile文件格式<br>Dockerfile文件中指令不区分大小写，但为了更易区分，约定使用大写形式。</li>
</ul>
<p>Docker 会依次执行Dockerfile中的指令，文件中的第一条指令必须是FROM，FROM指令用于指定一个基础镜像。</p>
<p>FROM指令用于指定其后构建新镜像所使用的基础镜像。FROM指令必是Dockerfile文件中的首条命令，启动构建流程后，Docker将会基于该镜像构建新镜像，FROM后的命令也会基于这个基础镜像。</p>
<p>Dockerfile文件格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Comment</span></span><br><span class="line">INSTRUCTION arguments</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Dockerfile文件中指令不区分大小写，但为了更易区分，约定使用大写形式。</p>
<p>Docker 会依次执行Dockerfile中的指令，文件中的第一条指令必须是FROM,FROM指令用于指定一个基础镜像。</p>
<ul>
<li>FROM语法格式为：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">FROM <span class="xml"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span> 或 FROM <span class="xml"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span>:<span class="xml"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过FROM指定的镜像，可以是任何有效的基础镜像。FROM有以下限制：</p>
<p>FROM必须是Dockerfile中第一条非注释命令<br>在一个Dockerfile文件中创建多个镜像时，FROM可以多次出现。只需在每个新命令FROM之前，记录提交上次的镜像ID。<br>tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</p>
<ul>
<li>RUN<br>RUN用于在镜像容器中执行命令,其有以下两种命令执行方式：<br>shell执行<br>在这种方式会在shell中执行命令，Linux下默认使用/bin/sh -c，Windows下使用cmd /S /C。<br>注意：通过SHELL命令修改RUN所使用的默认shell</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">RUN <span class="xml"><span class="tag">&lt;<span class="name">command</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>exec执行<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br></pre></td></tr></table></figure><br>RUN可以执行任何命令，然后在当前镜像上创建一个新层并提交。提交后的结果镜像将会用在Dockerfile文件的下一步。</p>
<p>通过RUN执行多条命令时，可以通过\换行执行：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">RUN /bin/bash -c &#x27;source $HOME/.bashrc; \</span><br><span class="line">echo $HOME&#x27;</span><br></pre></td></tr></table></figure></p>
<p>也可以在同一行中，通过分号分隔命令：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">RUN /bin/bash -c &#x27;source $HOME/.bashrc; echo $HOME&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定—no-cache参数，如：docker build —no-cache。</p>
<ul>
<li>CMD<br>CMD用于指定在容器启动时所要执行的命令。CMD有以下三种格式：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">CMD command param1 param2</span><br></pre></td></tr></table></figure>
<p>CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。<br>CMD与RUN在功能实现上也有相似之处。如：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker run -t -i keke/static /bin/true 等价于：cmd [&quot;/bin/true&quot;]</span><br></pre></td></tr></table></figure></p>
<p>CMD在Dockerfile文件中仅可指定一次，指定多次时，会覆盖前的指令。<br>另外，docker run命令也会覆盖Dockerfile中CMD命令。如果docker run运行容器时，使用了Dockerfile中CMD相同的命令，就会覆盖Dockerfile中的CMD命令。<br>如，我们在构建镜像的Dockerfile文件中使用了如下指令：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure></p>
<p>使用docker build构建一个新镜像，镜像名为keke/test。构建完成后，使用这个镜像运行一个新容器，运行效果如下：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo docker run -i -t keke/test</span><br></pre></td></tr></table></figure></p>
<p>在使用docker run运行容器时，我们并没有在命令结尾指定会在容器中执行的命令，这时Docker就会执行在Dockerfile的CMD中指定的命令。<br>如果不想使用CMD中指定的命令，就可以在docker run命令的结尾指定所要运行的命令：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo docker run -i  -t keke/test /bin/ps</span><br></pre></td></tr></table></figure><br>这时，docker run结尾指定的/bin/ps命令覆盖了Dockerfile的CMD中指定的命令.</p>
<ul>
<li>ENTRYPOINT<br>ENTRYPOINT用于给容器配置一个可执行程序。也就是说，每次使用镜像创建容器时，通过ENTRYPOINT指定的程序都会被设置为默认程序。ENTRYPOINT有以下两种形式：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">ENTRYPOINT command param1 param2</span><br></pre></td></tr></table></figure>
ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。<br>docker run运行容器时指定的参数都会被传递给ENTRYPOINT，且会覆盖CMD命令指定的参数。如，执行docker run <image> -d时， -d参数将被传递给入口点。也可以通过docker run —entrypoint重写ENTRYPOINT入口点。<br>如：可以像下面这样指定一个容器执行程序：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT [&quot;/usr/bin/nginx&quot;]</span><br></pre></td></tr></table></figure>
完整构建代码：<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ...</span><br><span class="line"><span class="keyword">MAINTAINER</span> keke <span class="string">&quot;2536495681@gmail.com&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器内的程序将会使用容器的指定端口</span></span><br><span class="line"><span class="comment"># 配合 docker run -p</span></span><br><span class="line"><span class="keyword">EXPOSE</span> ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
使用docker build构建镜像，并将镜像指定为keke/test：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo docker build -t=&quot;itbilu/test&quot; .</span><br></pre></td></tr></table></figure>
<p>构建完成后，使用keke/test启动一个容器：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo docker run -i -t keke/test -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure><br>在运行容器时，我们使用了-g “daemon off;” ，这个参数将会被传递给ENTRYPOINT，最终在容器中执行的命令为/usr/sbin/nginx -g “daemon off;” 。</p>
<ul>
<li>EXPOSE<br>EXPOSE用于指定容器在运行时监听的端口：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">EXPOSE <span class="xml"><span class="tag">&lt;<span class="name">port</span>&gt;</span></span> [<span class="xml"><span class="tag">&lt;<span class="name">port</span>&gt;</span></span>...]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口。</p>
<ul>
<li>RUN: 指定镜像被构建时要运行的命令</li>
<li>CMD: 指定容器被启动时要运行的命令</li>
<li>ENTRYPOINT: 同 CMD ，但不会被 docker run -t 覆盖</li>
<li>WORKDIR: CMD/ENTRYPOINT 会在这个目录下执行</li>
<li>VOLUME:创建挂载点，即向基于所构建镜像创始的容器添加卷</li>
<li>ADD:用于复制构建环境中的文件或目录到镜像中</li>
<li>COPY:同样用于复制构建环境中的文件或目录到镜像中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker history images-name</span><br></pre></td></tr></table></figure>
<p>1.从新镜像启动容器<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 4000:80 --name [name] #可以在 Dokcer 宿主机上指定一个具体的端口映射到容器的80端口上</span><br></pre></td></tr></table></figure></p>
<h4 id="守护容器"><a href="#守护容器" class="headerlink" title="守护容器"></a>守护容器</h4><pre><code class="lang-shell">docker run -d container-name #创建守护容器
docker top container-name #查看容器内进程
docker exec container-name touch a.txt #在容器内部运行进程
docker stop container-name #停止容器
</code></pre>
<h4 id="关于docker"><a href="#关于docker" class="headerlink" title="关于docker"></a>关于docker</h4><p>觉得此文章不错可以给我star！<br>如果还有遇到问题可以加我微信Sen0676备注下来自github,进go实战群详细交流！ </p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><h4 id="官方英文资源"><a href="#官方英文资源" class="headerlink" title="官方英文资源"></a>官方英文资源</h4><ul>
<li>Docker官网：<a href="http://www.docker.com">http://www.docker.com</a></li>
<li>Docker windows入门：<a href="https://docs.docker.com/windows/">https://docs.docker.com/windows/</a></li>
<li>Docker Linux 入门：<a href="https://docs.docker.com/linux/">https://docs.docker.com/linux/</a></li>
<li>Docker mac 入门：<a href="https://docs.docker.com/mac/">https://docs.docker.com/mac/</a></li>
<li>Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/">https://docs.docker.com/engine/userguide/</a></li>
<li>Docker 官方博客：<a href="http://blog.docker.com/">http://blog.docker.com/</a></li>
<li>Docker Hub: <a href="https://hub.docker.com/">https://hub.docker.com/</a></li>
<li>Docker开源： <a href="https://www.docker.com/open-source">https://www.docker.com/open-source</a></li>
</ul>
<h4 id="中文资源"><a href="#中文资源" class="headerlink" title="中文资源"></a>中文资源</h4><ul>
<li>Docker中文网站：<a href="http://www.docker.org.cn">http://www.docker.org.cn</a></li>
<li>Docker中文文档：<a href="http://www.dockerinfo.net/document">http://www.dockerinfo.net/document</a></li>
<li>Docker安装手册：<a href="http://www.docker.org.cn/book/install.html">http://www.docker.org.cn/book/install.html</a></li>
<li>一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22">https://blog.csphere.cn/archives/22</a></li>
<li>Docker中文指南：<a href="http://www.widuu.com/chinese_docker/index.html">http://www.widuu.com/chinese_docker/index.html</a></li>
</ul>
<h4 id="其它资源"><a href="#其它资源" class="headerlink" title="其它资源"></a>其它资源</h4><ul>
<li><a href="https://github.com/eon01/DockerCheatSheet">Docker 快速手册！</a></li>
<li><a href="http://www.runoob.com/docker/docker-tutorial.html">Docker 教程</a></li>
<li><a href="http://blog.csdn.net/zhangchao19890805/article/details/52756865">MySQL Docker 单一机器上如何配置自动备份</a></li>
<li><a href="https://yeasy.gitbooks.io/docker_practice/content/">Docker — 从入门到实践</a></li>
<li><a href="https://segmentfault.com/t/docker">docker问答</a></li>
<li><a href="https://github.com/docker/docker">moby</a></li>
<li><a href="https://wiki.openstack.org/wiki/Docker">https://wiki.openstack.org/wiki/Docker</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Docker">https://wiki.archlinux.org/index.php/Docker</a></li>
</ul>
<h4 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h4><p><a href="https://github.com/KeKe-Li/docker-directive">https://github.com/KeKe-Li/docker-directive</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo支持的协议</title>
    <url>/2019/12/31/issueGather/Dubbo%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h2><p>协议是两个网络实体进行通信的基础，数据在网络上从一个实体传输到另一个实体，以字节流的形式传递到对端。在这个字节流的世界里，如果没有协议，就无法将这个一维的字节流重塑成为二维或者多维的数据结构以及领域对象。</p>
<p>在通信过程中，不同的服务等级一般对应着不同的服务质量，那么选择合适的协议便是一件非常重要的事情。你可以根据你应用的创建来选择。例如，使用RMI协议，一般会受到防火墙的限制，所以对于外部与内部进行通信的场景，就不要使用RMI协议，而是基于HTTP协议或者Hessian协议。</p>
<h2 id="常见的协议模式"><a href="#常见的协议模式" class="headerlink" title="常见的协议模式"></a>常见的协议模式</h2><p>应用层协议一般的形式有三种：定长协议、特殊结束符和协议头+payload模式。</p>
<p>从网络上以流的形式进行数据的读取，需要确定的是一次有意义的传输内容在读到何时结束，因为一个一个byte传输过来，需要有一个结束。而且数据在网络上的传输，存在粘包和半包的情况，能够应对这个问题的办法就是协议能够准确的识别，当粘包发生时不会多读，当半包发生时会继续读取。</p>
<h3 id="定长协议"><a href="#定长协议" class="headerlink" title="定长协议"></a>定长协议</h3><p>定长的协议是指协议内容的长度是固定的，比如协议byte长度是50，当从网络上读取50个byte后，就进行decode解码操作。定长协议在读取或者写入时，效率比较高，因为数据缓存的大小基本都确定了，就好比数组一样，缺陷就是适应性不足，以RPC场景为例，很难估计出定长的长度是多少。</p>
<blockquote>
<p>可以参考Netty的FixedLengthFrameDecoder</p>
</blockquote>
<h3 id="特殊结束符"><a href="#特殊结束符" class="headerlink" title="特殊结束符"></a>特殊结束符</h3><p>相比定长协议，如果能够定义一个特殊字符作为每个协议单元结束的标示，就能够以变长的方式进行通信，从而在数据传输和高效之间取得平衡，比如用特殊字符\n。</p>
<p>特殊结束符方式的问题是过于简单的思考了协议传输的过程，对于一个协议单元必须要全部读入才能够进行处理，除此之外必须要防止用户传输的数据不能同结束符相同，否则就会出现紊乱。</p>
<blockquote>
<p>可以参考Netty的DelimiterBasedFrameDecoder</p>
</blockquote>
<h3 id="变长协议（协议头-payload）"><a href="#变长协议（协议头-payload）" class="headerlink" title="变长协议（协议头+payload）"></a>变长协议（协议头+payload）</h3><p>一般是自定义协议，会以定长加不定长的部分组成，其中定长的部分需要描述不定长的内容长度。</p>
<p>+———+<br>|定长|<br>+———+<br>|内容|<br>+———+</p>
<blockquote>
<p>可以参考Netty的LengthFieldBasedFrameDecoder</p>
</blockquote>
<h2 id="Dubbo支持的协议"><a href="#Dubbo支持的协议" class="headerlink" title="Dubbo支持的协议"></a>Dubbo支持的协议</h2><ul>
<li>Dubbo协议</li>
<li>Hessian协议</li>
<li>HTTP协议</li>
<li>RMI协议</li>
<li>WebService协议</li>
<li>Thrift协议</li>
<li>Memcached协议</li>
<li>Redis协议</li>
</ul>
<h3 id="Dubbo-协议"><a href="#Dubbo-协议" class="headerlink" title="Dubbo 协议"></a>Dubbo 协议</h3><p>Dubbo缺省协议采用单一长连接和NIO异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。Dubbo缺省协议不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低</p>
<pre><code>缺省协议，使用基于mina1.1.7+hessian3.2.1的tbremoting交互。
连接个数：单连接
连接方式：长连接
传输协议：TCP
传输方式：NIO异步传输
序列化：Hessian二进制序列化
适用范围：传入传出参数数据包较小（建议小于100K），消费者比提供者个数多，单一消费者无法压满提供者，尽量不要用dubbo协议传输大文件或超大字符串。
适用场景：常规远程服务方法调用
</code></pre><h3 id="Hessian-协议"><a href="#Hessian-协议" class="headerlink" title="Hessian 协议"></a>Hessian 协议</h3><p>Hessian协议用于集成Hessian的服务，Hessian底层采用Http通讯，采用Servlet暴露服务，Dubbo缺省内嵌Jetty作为服务器实现基于Hessian的远程调用协议。</p>
<pre><code>连接个数：多连接
连接方式：短连接
传输协议：HTTP
传输方式：同步传输
序列化：Hessian二进制序列化
适用范围：传入传出参数数据包较大，提供者比消费者个数多，提供者压力较大，可传文件
适用场景：页面传输，文件传输，或与原生hessian服务互操作
</code></pre><h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><p>采用Spring的HttpInvoker实现</p>
<pre><code>基于http表单的远程调用协议

连接个数：多连接
连接方式：短连接
传输协议：HTTP
传输方式：同步传输
序列化：表单序列化（JSON）
适用范围：传入传出参数数据包大小混合，提供者比消费者个数多，可用浏览器查看，可用表单或URL传入参数，暂不支持传文件
适用场景：需同时给应用程序和浏览器JS使用的服务。
</code></pre><h3 id="RMI-协议"><a href="#RMI-协议" class="headerlink" title="RMI 协议"></a>RMI 协议</h3><p>RMI协议采用JDK标准的java.rmi.*实现，采用阻塞式短连接和JDK标准序列化方式</p>
<pre><code>Java标准的远程调用协议

连接个数：多连接
连接方式：短连接
传输协议：TCP
传输方式：同步传输
序列化：Java标准二进制序列化
适用范围：传入传出参数数据包大小混合，消费者与提供者个数差不多，可传文件。
适用场景：常规远程服务方法调用，与原生RMI服务互操作
</code></pre><h3 id="WebService-协议"><a href="#WebService-协议" class="headerlink" title="WebService 协议"></a>WebService 协议</h3><p>基于CXF的frontend-simple和transports-http实现</p>
<pre><code>基于WebService的远程调用协议

连接个数：多连接
连接方式：短连接
传输协议：HTTP
传输方式：同步传输
序列化：SOAP文本序列化
适用场景：系统集成，跨语言调用。
</code></pre><h3 id="Thrift-协议"><a href="#Thrift-协议" class="headerlink" title="Thrift 协议"></a>Thrift 协议</h3><p>Thrift是一个轻量级、跨语言的远程服务调用框架，最初由Facebook开发，后面进入Apache开源项目。它通过自身的IDL中间语言, 并借助代码生成引擎生成各种主流语言的RPC服务端/客户端模板代码。</p>
<p>当前 dubbo 支持的 thrift 协议是对 thrift 原生协议的扩展，在原生协议的基础上添加了一些额外的头信息，比如service name，magic number等。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Dubbo%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT 命令</title>
    <url>/2019/11/22/issueGather/GIT/</url>
    <content><![CDATA[<h1 id="GIT-命令"><a href="#GIT-命令" class="headerlink" title="GIT 命令"></a>GIT 命令</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><pre><code>git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;email@example.com&quot;
</code></pre><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><pre><code>git init
</code></pre><h3 id="把文件添加到仓库"><a href="#把文件添加到仓库" class="headerlink" title="把文件添加到仓库"></a>把文件添加到仓库</h3><pre><code>git add filename
</code></pre><h3 id="把文件提交到仓库"><a href="#把文件提交到仓库" class="headerlink" title="把文件提交到仓库"></a>把文件提交到仓库</h3><pre><code>git commit -m &quot;comment message&quot;
</code></pre><p>初始化一个Git仓库，使用git init命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ul>
<li>第一步，使用命令git add ，注意，可反复多次使用，添加多个文件；</li>
<li>第二步，使用命令git commit，完成。</li>
</ul>
<h3 id="运行git-status命令看看结果"><a href="#运行git-status命令看看结果" class="headerlink" title="运行git status命令看看结果"></a>运行git status命令看看结果</h3><pre><code>git status
</code></pre><h3 id="看看具体修改了什么内容"><a href="#看看具体修改了什么内容" class="headerlink" title="看看具体修改了什么内容"></a>看看具体修改了什么内容</h3><pre><code>git diff filename
</code></pre><ul>
<li>要随时掌握工作区的状态，使用git status命令。</li>
<li>如果git status告诉你有文件被修改过，用git diff可以查看修改内容</li>
</ul>
<h2 id="多远程仓一次提交支持"><a href="#多远程仓一次提交支持" class="headerlink" title="多远程仓一次提交支持"></a>多远程仓一次提交支持</h2><h3 id="1-添加远程仓"><a href="#1-添加远程仓" class="headerlink" title="1.添加远程仓"></a>1.添加远程仓</h3><pre><code>git remote add gitee 你的gitee项目地址
</code></pre><p>查看远程仓，发现两个远程仓了</p>
<pre><code>git remote
</code></pre><p>此时推送代码需要推送两次</p>
<pre><code>git push gitRepo
git push giteeRepo
</code></pre><h3 id="2-添加推送url地址"><a href="#2-添加推送url地址" class="headerlink" title="2.添加推送url地址"></a>2.添加推送url地址</h3><pre><code>git remote set-url --add origin 你的gitee项目地址
</code></pre><p>添加完成好，只要git push就能提交到两个仓库了，比如github和gitee</p>
<h2 id="Git-回滚代码"><a href="#Git-回滚代码" class="headerlink" title="Git 回滚代码"></a>Git 回滚代码</h2><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><pre><code>git reflog或git log
</code></pre><h3 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h3><pre><code>git reset --hard HEAD        回退到上个版本
git reset --hard commit_id    退到/进到 指定commit_id
</code></pre><p>默认参数 -soft,所有commit的修改都会退回到git缓冲区<br>参数—hard，所有commit的修改直接丢弃</p>
<h3 id="推送到远程"><a href="#推送到远程" class="headerlink" title="推送到远程"></a>推送到远程</h3><pre><code>git push origin HEAD --force
</code></pre><h2 id="Git冲突解决"><a href="#Git冲突解决" class="headerlink" title="Git冲突解决"></a>Git冲突解决</h2><p>强制覆盖本地代码，你自己修改的代码即将被远程库的代码所覆盖，所以把本地自己的代码做好备份，然后执行命令</p>
<ul>
<li>git reset —hard origin/master</li>
<li>git pull</li>
<li>从你备份好的文件当中把你写的代码合进去，修改完成再进行git push</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">阮一峰常用 Git 命令清单</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java命令</title>
    <url>/2019/11/22/issueGather/JAVA/</url>
    <content><![CDATA[<h1 id="Java命令"><a href="#Java命令" class="headerlink" title="Java命令"></a>Java命令</h1><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="yum安装方法"><a href="#yum安装方法" class="headerlink" title="yum安装方法"></a>yum安装方法</h3><pre><code>- 验证Linux系统的位数  uname -a
- 查看yum库中都有哪些jdk版本  yum search java|grep jdk
- 选择版本，进行安装 yum install java-1.8.0-openjdk  安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64
- 设置环境变量    vi /etc/profile
- 进入编辑模式    i
- 复制以下三行到文件中，按esc退出编辑模式，输入:wq保存退出（这里的JAVA_HOME以自己实际的目录为准）
    export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64
    export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
    export PATH=$PATH:$JAVA_HOME/bin
- 设置环境变量立即生效  source /etc/profile
</code></pre><h2 id="运行java项目"><a href="#运行java项目" class="headerlink" title="运行java项目"></a>运行java项目</h2><pre><code>- java -jar helloworld-0.0.1.jar
</code></pre><h3 id="JDK常用命令"><a href="#JDK常用命令" class="headerlink" title="JDK常用命令"></a>JDK常用命令</h3><pre><code>- 查看JDK版本   java -version
- 查看java执行路径    which java
- 查看JAVA_HOME路径 echo $JAVA_HOME
- 查看PATH路径  echo $PATH
</code></pre><h3 id="后台运行-关闭Xshell等命令行工具，java服务不会被关闭"><a href="#后台运行-关闭Xshell等命令行工具，java服务不会被关闭" class="headerlink" title="后台运行(关闭Xshell等命令行工具，java服务不会被关闭)"></a>后台运行(关闭Xshell等命令行工具，java服务不会被关闭)</h3><ul>
<li>1.创建start.sh</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">nohup java -jar halo-latest.jar</span><br></pre></td></tr></table></figure>
<p>halo-latest.jar为java包名称</p>
<ul>
<li>2.创建stop.sh</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">PID=$(ps -ef | grep halo-latest.jar | grep -v grep | awk &#x27;&#123; print $2 &#125;&#x27;)</span><br><span class="line">if [ -z &quot;$PID&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo Application is already stopped</span><br><span class="line">else</span><br><span class="line">    echo kill $PID</span><br><span class="line">    kill $PID</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>halo-latest.jar为java包名称</p>
<ul>
<li>3.运行，进入java包目录</li>
</ul>
<p>输入以下命令后台运行java程序<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh start.sh</span><br></pre></td></tr></table></figure></p>
<ul>
<li>4.根据提示查看控制台</li>
</ul>
<p>默认为：nohup.out，在java包目录下创建文件，输入以下命令查看java控制台输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f nohup.out</span><br></pre></td></tr></table></figure>
<h2 id="查看java进程"><a href="#查看java进程" class="headerlink" title="查看java进程"></a>查看java进程</h2><pre><code>ps -ef|grep java
</code></pre><p>此条命令具体含义</p>
<pre><code>ps:将某个进程显示出来
-A 显示所有程序。 
-e 此参数的效果和指定&quot;A&quot;参数相同。
-f 显示UID,PPIP,C与STIME栏位。 
grep命令是查找
</code></pre><h2 id="找到java进程id，抓取dump"><a href="#找到java进程id，抓取dump" class="headerlink" title="找到java进程id，抓取dump"></a>找到java进程id，抓取dump</h2><pre><code>sudo -u lintq jmap -dump:format=b,file=myheap.hprof 27226
</code></pre><h2 id="有时关闭服务操作不成功，可以使用kill强杀"><a href="#有时关闭服务操作不成功，可以使用kill强杀" class="headerlink" title="有时关闭服务操作不成功，可以使用kill强杀"></a>有时关闭服务操作不成功，可以使用kill强杀</h2><pre><code>kill -9 7010
</code></pre><p> 来杀死进程，需要注意的是7010是当前tomcat进程的id </p>
<h2 id="打开控制台-查看日志"><a href="#打开控制台-查看日志" class="headerlink" title="打开控制台,查看日志"></a>打开控制台,查看日志</h2><pre><code>tail -f catalina.out
</code></pre><p>按Ctrl+c退出</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令(CentOS 系统)</title>
    <url>/2019/11/22/issueGather/LINUX/</url>
    <content><![CDATA[<h1 id="Linux-命令-CentOS-系统"><a href="#Linux-命令-CentOS-系统" class="headerlink" title="Linux 命令(CentOS 系统)"></a>Linux 命令(CentOS 系统)</h1><h2 id="保存命令"><a href="#保存命令" class="headerlink" title="保存命令"></a>保存命令</h2><pre><code>按ESC键 跳到命令模式，然后：

:w   保存文件但不退出vi
:w file 将修改另外保存到file中，不退出vi
:w!   强制保存，不推出vi
:wq  保存文件并退出vi
:wq! 强制保存文件，并退出vi
q:  不保存文件，退出vi
:q! 不保存文件，强制退出vi
:e! 放弃所有修改，从上次保存文件开始再编辑
</code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><pre><code>- 安装上传下载插件  yum install lrzsz
- 文件上传    rz
- 文件覆盖上传    rz -y
- 下载文件  sz  文件名 
- 新建目录 mkdir 目录名
- 删除已建立的目录 rmdir 目录名
- 删除文件 rm 文件名
    -f, --force    忽略不存在的文件，从不给出提示。
    -i, --interactive 进行交互式删除
    -r, -R, --recursive   指示rm将参数中列出的全部目录和子目录均递归地删除。
    -v, --verbose    详细显示进行的步骤
- 文件改名、移动 mv 
这个命令的功能是移动目录或文件，引申的功能是给目录或文件重命名。当使用该命令来移动目录时，他会连同该目录下面的子目录也一同移走。
    -b ：若需覆盖文件，则覆盖前先行备份。 
    -f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；
    -i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！
    -u ：若目标文件已经存在，且 source 比较新，才会更新(update)
    -t  ： --target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。
- 更改文件权限 chmod [可选项] &lt;mode&gt; &lt;file...&gt;
    - 数字权限使用格式 r=4，w=2，x=1; 每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限,拥有者 、群组 、其它组( u、 g 、o)的权限
    - 设置所有人可以读写及执行   chmod 777 file  (等价于  chmod u=rwx,g=rwx,o=rwx file 或  chmod a=rwx file)
    - 设置拥有者可读写，其他人不可读写执行 chmod 600 file (等价于  chmod u=rw,g=---,o=--- file 或 chmod u=rw,go-rwx file)
- 更改文件拥有者 chown [可选项] user[:group] file...
    - 设置文件 d.key、e.scrt的拥有者设为 users 群体的tom==&gt;chown tom:users file d.key e.scrt
    - 设置当前目录下与子目录下的所有文件的拥有者为 users 群体的James==&gt;chown -R James:users  *         
</code></pre><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><pre><code>- 普通用户切换为root用户：sudo su
- root 用户切换为普通用户 ：用 login -f username （加 -f 不用输入密码）例如普通用户的用户名为hadoop，这里就是 login -f hadoop
- 查看用户登陆历史记录：last
- 查看系统中有哪些用户：cut -d : -f 1 /etc/passwd
- 查看用户组：sudo cat /etc/group
- 创建新用户：useradd centos
- 设置密码：passwd centos
</code></pre><h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><pre><code>- shutdown -h now  --立即关机  
- shutdown -h 10:53  --到10:53关机，如果该时间小于当前时间，则到隔天  
- shutdown -r +30 &#39;The System Will Reboot in 30 Mins&#39;   --30分钟后重启并并发送通知给其它在线用户
- shutdown -h +10  --10分钟后自动关机  
- shutdown -r now  --立即重启  
- 查看IP：ip addr 或：ifconfig
</code></pre><h2 id="开端口相关"><a href="#开端口相关" class="headerlink" title="开端口相关"></a>开端口相关</h2><pre><code>- 查询防火墙状态   service iptables status
- 停止防火墙 service iptables stop
- 启动防火墙 service iptables start
- 重启防火墙 service iptables restart
- 永久关闭防火墙   chkconfig   iptables off
- 永久关闭后启用   chkconfig   iptables on 
- 清空防火墙规则   service iptables -F
- 查看端口占用情况  netstat -pan|grep 8787
- 查看防火墙 iptables -L
- 保存防火墙设置   service iptables save
- 查看端口是否连通  telnet ip地址 端口号
- 开8787端口，-p表示协议，示例
    - iptables -I INPUT 3 -p tcp -m tcp --dport 8787 -j ACCEPT
    - iptables -A INPUT -p tcp --dport 8787 -j ACCEPT
    - iptables -A OUTPUT -p tcp --sport 8787 -j ACCEPT
- 查看当前所有tcp端口   netstat -ntlp
- 查看所有80端口使用情况  netstat -ntulp |grep 80
- 查看所有3306端口使用情况    netstat -ntulp | grep 3306
</code></pre><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><pre><code>#添加可访问端口
sudo firewall-cmd --add-port=8787/tcp --permanent

#重新加载防火墙策略    
sudo firewall-cmd --reload
</code></pre><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="返回上一级目录"><a href="#返回上一级目录" class="headerlink" title="返回上一级目录"></a>返回上一级目录</h3><pre><code>cd ..
</code></pre><h3 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h3><pre><code>cd tomcat/logs
</code></pre><h2 id="VIM安装"><a href="#VIM安装" class="headerlink" title="VIM安装"></a>VIM安装</h2><pre><code>yum -y install vim*
</code></pre><h2 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h2><pre><code>wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
yum -y install apache-maven
</code></pre><h2 id="安装及启动mysql指令"><a href="#安装及启动mysql指令" class="headerlink" title="安装及启动mysql指令"></a>安装及启动mysql指令</h2><pre><code>- yum install mysql mysql-server
- /etc/init.d/mysqld start
</code></pre>]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL组成模块</title>
    <url>/2019/12/27/issueGather/MySQL%E7%BB%84%E6%88%90%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="MySQL基架大致包括如下几大模块组件"><a href="#MySQL基架大致包括如下几大模块组件" class="headerlink" title="MySQL基架大致包括如下几大模块组件"></a>MySQL基架大致包括如下几大模块组件</h1><ul>
<li><p>（1）MySQL向外提供的交互接口（Connectors）</p>
</li>
<li><p>（2）管理服务组件和工具组件(Management Service &amp; Utilities)</p>
</li>
<li><p>（3）连接池组件(Connection Pool)</p>
</li>
<li><p>（4）SQL接口组件(SQL Interface)</p>
</li>
<li><p>（5）查询分析器组件(Parser)</p>
</li>
<li><p>（6）优化器组件（Optimizer）</p>
</li>
<li><p>（7）缓存主件（Caches &amp; Buffers）</p>
</li>
<li><p>（8）插件式存储引擎（Pluggable Storage Engines）</p>
</li>
<li><p>（9）物理文件（File System）</p>
</li>
</ul>
<h2 id="MySQL向外提供的交互接口（Connectors）"><a href="#MySQL向外提供的交互接口（Connectors）" class="headerlink" title="MySQL向外提供的交互接口（Connectors）"></a>MySQL向外提供的交互接口（Connectors）</h2><p>Connectors组件，是MySQL向外提供的交互组件，如java,.net,php等语言可以通过该组件来操作SQL语句，实现与SQL的交互</p>
<h2 id="管理服务组件和工具组件-Management-Service-amp-Utilities"><a href="#管理服务组件和工具组件-Management-Service-amp-Utilities" class="headerlink" title="管理服务组件和工具组件(Management Service &amp; Utilities)"></a>管理服务组件和工具组件(Management Service &amp; Utilities)</h2><p>提供对MySQL的集成管理，如备份(Backup),恢复(Recovery),安全管理(Security)等</p>
<h2 id="连接池组件-Connection-Pool"><a href="#连接池组件-Connection-Pool" class="headerlink" title="连接池组件(Connection Pool)"></a>连接池组件(Connection Pool)</h2><p>负责监听对客户端向MySQL Server端的各种请求，接收请求，转发请求到目标模块。每个成功连接MySQL Server的客户请求都会被创建或分配一个线程，该线程负责客户端与MySQL Server端的通信，接收客户端发送的命令，传递服务端的结果信息等</p>
<h2 id="SQL接口组件-SQL-Interface"><a href="#SQL接口组件-SQL-Interface" class="headerlink" title="SQL接口组件(SQL Interface)"></a>SQL接口组件(SQL Interface)</h2><p>接收用户SQL命令，如DML,DDL和存储过程等，并将最终结果返回给用户</p>
<h2 id="查询分析器组件-Parser"><a href="#查询分析器组件-Parser" class="headerlink" title="查询分析器组件(Parser)"></a>查询分析器组件(Parser)</h2><p>SQL命令传递到解析器的时候会被解析器验证和解析，首先分析SQL命令语法的合法性，并尝试将SQL命令分解成数据结构，若分解失败，则提示SQL语句不合理</p>
<h2 id="优化器组件（Optimizer）"><a href="#优化器组件（Optimizer）" class="headerlink" title="优化器组件（Optimizer）"></a>优化器组件（Optimizer）</h2><p>SQL语句在查询之前会使用查询优化器对查询进行优化。</p>
<h2 id="缓存组件（Caches-amp-Buffers）"><a href="#缓存组件（Caches-amp-Buffers）" class="headerlink" title="缓存组件（Caches &amp; Buffers）"></a>缓存组件（Caches &amp; Buffers）</h2><p>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等</p>
<h2 id="存储引擎（Engine）"><a href="#存储引擎（Engine）" class="headerlink" title="存储引擎（Engine）"></a>存储引擎（Engine）</h2><p>MySQL属于关系型数据库，而关系型数据库的存储是以表的形式进行的，对于表的创建，数据的存储，检索，更新等都是由MySQL存储引擎完成的，这也是MySQL存储引擎在MySQL中扮演的重要角色。</p>
<p>MySQL之所以有多种存储引擎，是因为MySQL的开源性决定的。MySQL存储引擎，从种类上来说，大致可归结为官方存储引擎和第三方存储引起。MySQL的开源性，允许第三方基于MySQL骨架，开发适合自己业务需求的存储引擎。</p>
<h3 id="MySQL存储引擎作用"><a href="#MySQL存储引擎作用" class="headerlink" title="MySQL存储引擎作用"></a>MySQL存储引擎作用</h3><p>MySQL存储引擎在MySQL中扮演重要角色，其作比较重要作用，大致归结为如下两方面：</p>
<p>作用一：管理表创建，数据检索，索引创建等</p>
<p>作用二：满足自定义存储引擎开发。</p>
<h3 id="MySQL引擎种类"><a href="#MySQL引擎种类" class="headerlink" title="MySQL引擎种类"></a>MySQL引擎种类</h3><p>不同种类的存储引擎，在存储表时的存储引擎表机制也有所不同，从MySQL存储引擎种类上来说，可以分为官方存储引擎和第三方存储引擎。</p>
<p>当前，也存在多种MySQL存储引擎，如MyISAM存储引擎，InnoDB存储引擎，NDB存储引擎，Archive存储引擎，Federated存储引擎，Memory存储引擎，Merge存储引擎，Parter存储引擎，Community存储引擎，Custom存储引擎和其他存储引擎。</p>
<p>其中，比较常用的存储引擎包括InnoDB存储引擎，MyISAM存储引擎和Momery存储引擎。</p>
<h2 id="物理文件（File-System）"><a href="#物理文件（File-System）" class="headerlink" title="物理文件（File System）"></a>物理文件（File System）</h2><p>实际存储MySQL 数据库文件和一些日志文件等的系统，如Linux，Unix,Windows等。</p>
<p>物理文件包括：redolog、undolog、binlog（复制时还有relaylog）、errorlog、querylog、slowlog、data、index</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/MySQL%E7%BB%84%E6%88%90%E6%A8%A1%E5%9D%97.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql事务</title>
    <url>/2019/11/22/issueGather/MySqlTransaction/</url>
    <content><![CDATA[<h1 id="MySql事务"><a href="#MySql事务" class="headerlink" title="MySql事务"></a>MySql事务</h1><ul>
<li>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如开单，需要添加给订单表增加记录，还需要增加订单的各种相关明细，操作复杂度高，这些操作语句需要构成一个事务。</li>
<li>MySQL 命令行的默认设置，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>一般来说，事务需要满足4个条件（ACID）：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</li>
<li>mysql默认是自动提交事务的</li>
</ul>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><div class="table-container">
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读（Dirty Read）</th>
<th>不可重复读（NonRepeatable Read）</th>
<th>幻读（Phantom Read）</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读（Read uncommitted）</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>可串行化（Serializable ）</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody>
</table>
</div>
<p>InnoDB默认是可重复读级别的</p>
<ul>
<li>① 脏读: 脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</li>
<li>② 不可重复读:是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li>
<li>③ 幻读:第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样，幻读是数据行记录变多了或者少了。</li>
</ul>
<p>简单点总结下他们的区别：脏读是指读取了未修改完的记录，不可重复读指因为被其它事务修改了记录导致某事务两次读取记录不一致，而幻读是指因为其它事务对表做了增删导致某事务两次读取的表记录数不一致问题。</p>
<h3 id="第1级别未提交读-Read-Uncommitted"><a href="#第1级别未提交读-Read-Uncommitted" class="headerlink" title="第1级别未提交读(Read Uncommitted)"></a>第1级别未提交读(Read Uncommitted)</h3><p>允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</p>
<h3 id="第2级别提交读-Read-Committed"><a href="#第2级别提交读-Read-Committed" class="headerlink" title="第2级别提交读(Read Committed)"></a>第2级别提交读(Read Committed)</h3><p>只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</p>
<h3 id="第3级别可重复读-Repeated-Read"><a href="#第3级别可重复读-Repeated-Read" class="headerlink" title="第3级别可重复读(Repeated Read)"></a>第3级别可重复读(Repeated Read)</h3><p>可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</p>
<h3 id="第4级别串行读-Serializable"><a href="#第4级别串行读-Serializable" class="headerlink" title="第4级别串行读(Serializable)"></a>第4级别串行读(Serializable)</h3><p>完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</p>
<h2 id="mysql事务相关命令"><a href="#mysql事务相关命令" class="headerlink" title="mysql事务相关命令"></a>mysql事务相关命令</h2><h3 id="查看mysql系统的事务隔离级别"><a href="#查看mysql系统的事务隔离级别" class="headerlink" title="查看mysql系统的事务隔离级别"></a>查看mysql系统的事务隔离级别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@global</span>.tx_isolation;</span><br></pre></td></tr></table></figure>
<h3 id="查看mysql会话的事务隔离级别"><a href="#查看mysql会话的事务隔离级别" class="headerlink" title="查看mysql会话的事务隔离级别"></a>查看mysql会话的事务隔离级别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@session</span>.tx_isolation;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="设置系统的事务隔离级别"><a href="#设置系统的事务隔离级别" class="headerlink" title="设置系统的事务隔离级别"></a>设置系统的事务隔离级别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br></pre></td></tr></table></figure>
<h3 id="设置会话的事务隔离级别"><a href="#设置会话的事务隔离级别" class="headerlink" title="设置会话的事务隔离级别"></a>设置会话的事务隔离级别</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session transaction isolation level read committed;  <span class="comment">-- 值可以分别为:READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE</span></span><br></pre></td></tr></table></figure>
<h3 id="查看autocommit变量"><a href="#查看autocommit变量" class="headerlink" title="查看autocommit变量"></a>查看autocommit变量</h3><p>1：表示自动提交事务，0表示不自动提交事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br></pre></td></tr></table></figure>
<h3 id="设置mysql不自动提交事务"><a href="#设置mysql不自动提交事务" class="headerlink" title="设置mysql不自动提交事务"></a>设置mysql不自动提交事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="事务回滚"><a href="#事务回滚" class="headerlink" title="事务回滚"></a>事务回滚</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<h3 id="显示的开启一个事务"><a href="#显示的开启一个事务" class="headerlink" title="显示的开启一个事务"></a>显示的开启一个事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br></pre></td></tr></table></figure>
<h3 id="创建一个保存点"><a href="#创建一个保存点" class="headerlink" title="创建一个保存点"></a>创建一个保存点</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">savepoint</span> tem1;</span><br></pre></td></tr></table></figure>
<h3 id="显示提交事务"><a href="#显示提交事务" class="headerlink" title="显示提交事务"></a>显示提交事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html">mysql官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 排它锁之行锁、间隙锁、后码锁</title>
    <url>/2019/11/22/issueGather/MySql%E9%94%81/</url>
    <content><![CDATA[<h1 id="mysql-排它锁之行锁、间隙锁、后码锁"><a href="#mysql-排它锁之行锁、间隙锁、后码锁" class="headerlink" title="mysql 排它锁之行锁、间隙锁、后码锁"></a>mysql 排它锁之行锁、间隙锁、后码锁</h1><p>MySQL InnoDB支持三种行锁定</p>
<ul>
<li><p>行锁（Record Lock）:锁直接加在索引记录上面，锁住的是key。</p>
</li>
<li><p>间隙锁（Gap Lock）:锁定索引记录间隙，确保索引记录的间隙不变。间隙锁是针对事务隔离级别为可重复读或以上级别而设计的。</p>
</li>
<li><p>后码锁（Next-Key Lock）：行锁和间隙锁组合起来就叫Next-Key Lock。</p>
</li>
</ul>
<p>默认情况下，InnoDB工作在可重复读隔离级别下，并且会以Next-Key Lock的方式对数据行进行加锁，这样可以有效防止幻读的发生。Next-Key Lock是行锁和间隙锁的组合，当InnoDB扫描索引记录的时候，会首先对索引记录加上行锁（Record Lock），再对索引记录两边的间隙加上间隙锁（Gap Lock）。加上间隙锁之后，其他事务就不能在这个间隙修改或者插入记录。</p>
<h2 id="行锁-Record-Lock"><a href="#行锁-Record-Lock" class="headerlink" title="行锁(Record Lock)"></a>行锁(Record Lock)</h2><ul>
<li>当需要对表中的某条数据进行写操作（insert、update、delete、select for update）时，需要先获取记录的排他锁（X锁），这个就称为行锁。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> x(`id` <span class="type">int</span>, `num` <span class="type">int</span>, index `idx_id` (`id`));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> x <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务A</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">update x <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务B</span></span><br><span class="line"><span class="comment">-- 如果事务A没有commit，id=1的记录拿不到X锁，将出现等待</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">update x <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务C</span></span><br><span class="line"><span class="comment">-- id=2的记录可以拿到X锁，不会出现等待</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">update x <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>针对InnoDB RR隔离级别，上述SQL示例展示了行锁的特点：“锁定特定行不允许进行修改”，但行锁是基于表索引的，如果where条件中用的是num字段（非索引列）将产生不一样的现象：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 事务A</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">update x <span class="keyword">set</span> num <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> num <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务B</span></span><br><span class="line"><span class="comment">-- 由于事务A中num字段上没有索引将产生表锁，导致整张表的写操作都会出现等待</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">update x <span class="keyword">set</span> num <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> num <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务C</span></span><br><span class="line"><span class="comment">-- 同理，会出现等待</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">update x <span class="keyword">set</span> num <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> num <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务D</span></span><br><span class="line"><span class="comment">-- 等待</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> x <span class="keyword">values</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Gap锁-Gap-Lock"><a href="#Gap锁-Gap-Lock" class="headerlink" title="Gap锁(Gap Lock)"></a>Gap锁(Gap Lock)</h2><p>在MySQL中select称为快照读，不需要锁，而insert、update、delete、select for update则称为当前读，需要给数据加锁，幻读中的“读”即是针对当前读。</p>
<p>RR事务隔离级别允许存在幻读，但InnoDB RR级别却通过Gap锁避免了幻读</p>
<h3 id="产生间隙锁的条件（RR事务隔离级别下）"><a href="#产生间隙锁的条件（RR事务隔离级别下）" class="headerlink" title="产生间隙锁的条件（RR事务隔离级别下）"></a>产生间隙锁的条件（RR事务隔离级别下）</h3><ul>
<li>使用普通索引锁定</li>
<li>使用多列唯一索引</li>
<li>使用唯一索引锁定多行记录</li>
</ul>
<h3 id="唯一索引的间隙锁"><a href="#唯一索引的间隙锁" class="headerlink" title="唯一索引的间隙锁"></a>唯一索引的间隙锁</h3><p>测试环境</p>
<pre><code>MySQL，InnoDB，默认的隔离级别（RR）
</code></pre><p>数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小罗&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小黄&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` <span class="keyword">VALUES</span> (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>以上数据，会生成隐藏间隙</p>
<p>(-infinity, 1]<br>(1, 5]<br>(5, 7]<br>(7, 11]<br>(11, +infinity]</p>
<h4 id="只使用记录锁，不会产生间隙锁"><a href="#只使用记录锁，不会产生间隙锁" class="headerlink" title="只使用记录锁，不会产生间隙锁"></a>只使用记录锁，不会产生间隙锁</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 开启事务1 */</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">/* 查询 id = 5 的数据并加记录锁 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">5</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"><span class="comment">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务2插入一条 name = &#x27;小张&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小张&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务3插入一条 name = &#x27;小张&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;小东&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交事务1，释放事务1的锁 */</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>以上，由于主键是唯一索引，而且是只使用一个索引查询，并且只锁定一条记录，所以，只会对 id = 5 的数据加上记录锁，而不会产生间隙锁。</p>
<h4 id="产生间隙锁"><a href="#产生间隙锁" class="headerlink" title="产生间隙锁"></a>产生间隙锁</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 开启事务1 */</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">/* 查询 id 在 7 - 11 范围的数据并加记录锁 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `id` <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">7</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"><span class="comment">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务2插入一条 id = 3，name = &#x27;小张1&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;小张1&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务3插入一条 id = 4，name = &#x27;小白&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小白&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务4插入一条 id = 6，name = &#x27;小东&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;小东&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务5插入一条 id = 8， name = &#x27;大罗&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;大罗&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务6插入一条 id = 9， name = &#x27;大东&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;大东&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务7插入一条 id = 11， name = &#x27;李西&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;李西&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务8插入一条 id = 12， name = &#x27;张三&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;张三&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交事务1，释放事务1的锁 */</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>从上面我们可以看到，(5, 7]、(7, 11] 这两个区间，都不可插入数据，其它区间，都可以正常插入数据。所以当我们给 (5, 7] 这个区间加锁的时候，会锁住 (5, 7]、(7, 11] 这两个区间。</p>
<h4 id="锁住不存在的数据"><a href="#锁住不存在的数据" class="headerlink" title="锁住不存在的数据"></a>锁住不存在的数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 开启事务1 */</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">/* 查询 id = 3 这一条不存在的数据并加记录锁 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test` <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">3</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"><span class="comment">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务2插入一条 id = 3，name = &#x27;小张1&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;小张1&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务3插入一条 id = 4，name = &#x27;小白&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;小白&#x27;</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务4插入一条 id = 6，name = &#x27;小东&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;小东&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务5插入一条 id = 8， name = &#x27;大罗&#x27; 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test` (`id`, `name`) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;大罗&#x27;</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交事务1，释放事务1的锁 */</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>我们可以看出，指定查询某一条记录时，如果这条记录不存在，会产生间隙锁</p>
<p>结论</p>
<ul>
<li>对于指定查询某一条记录的加锁语句，如果该记录不存在，会产生记录锁和间隙锁，如果记录存在，则只会产生记录锁，如：WHERE <code>id</code> = 5 FOR UPDATE;</li>
<li>对于查找某一范围内的查询语句，会产生间隙锁，如：WHERE <code>id</code> BETWEEN 5 AND 7 FOR UPDATE;</li>
</ul>
<h3 id="普通索引的间隙锁"><a href="#普通索引的间隙锁" class="headerlink" title="普通索引的间隙锁"></a>普通索引的间隙锁</h3><p>数据准备</p>
<p>创建 test1 表：</p>
<ul>
<li>注意：number 不是唯一值</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test1` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `number` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数字&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `number` (`number`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>id 是主键，number上建立了一个普通索引。先加一些数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>
<p>test1表中 number 索引存在的隐藏间隙：</p>
<p>(-infinity, 1]<br>(1, 3]<br>(3, 8]<br>(8, 12]<br>(12, +infinity]</p>
<h4 id="执行以下的事务（事务1最后提交）"><a href="#执行以下的事务（事务1最后提交）" class="headerlink" title="执行以下的事务（事务1最后提交）"></a>执行以下的事务（事务1最后提交）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 开启事务1 */</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">/* 查询 number = 5 的数据并加记录锁 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test1` <span class="keyword">WHERE</span> `number` <span class="operator">=</span> <span class="number">3</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"><span class="comment">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：以下的语句不是放在一个事务中执行，而是分开多次执行，每次事务中只有一条添加语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务2插入一条 number = 0 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">0</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务3插入一条 number = 1 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">1</span>); <span class="comment">-- 被阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务4插入一条 number = 2 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">2</span>); <span class="comment">-- 被阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务5插入一条 number = 4 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">4</span>); <span class="comment">-- 被阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务6插入一条 number = 8 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">8</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务7插入一条 number = 9 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">9</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务8插入一条 number = 10 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`number`) <span class="keyword">VALUES</span> (<span class="number">10</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交事务1 */</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>这里可以看到，number (1 - 8) 的间隙中，插入语句都被阻塞了，而不在这个范围内的语句，正常执行，这就是因为有间隙锁的原因。</p>
<h4 id="加深对间隙锁的理解"><a href="#加深对间隙锁的理解" class="headerlink" title="加深对间隙锁的理解"></a>加深对间隙锁的理解</h4><p>将数据还原成初始化的那样</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 开启事务1 */</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">/* 查询 number = 5 的数据并加记录锁 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test1` <span class="keyword">WHERE</span> `number` <span class="operator">=</span> <span class="number">3</span> <span class="keyword">FOR</span> UPDATE;</span><br><span class="line"><span class="comment">/* 延迟30秒执行，防止锁释放 */</span></span><br><span class="line"><span class="keyword">SELECT</span> SLEEP(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务1插入一条 id = 2， number = 1 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`id`, `number`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务2插入一条 id = 3， number = 2 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`id`, `number`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务3插入一条 id = 6， number = 8 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`id`, `number`) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">8</span>); <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务4插入一条 id = 8， number = 8 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`id`, `number`) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">8</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务5插入一条 id = 9， number = 9 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`id`, `number`) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">9</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务6插入一条 id = 10， number = 12 的数据 */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test1` (`id`, `number`) <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">12</span>); <span class="comment">-- 正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务7修改 id = 11， number = 12 的数据 */</span></span><br><span class="line">UPDATE `test1` <span class="keyword">SET</span> `number` <span class="operator">=</span> <span class="number">5</span> <span class="keyword">WHERE</span> `id` <span class="operator">=</span> <span class="number">11</span> <span class="keyword">AND</span> `number` <span class="operator">=</span> <span class="number">12</span>; <span class="comment">-- 阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交事务1 */</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>
<p>这里有一个奇怪的现象：</p>
<p>事务3添加 id = 6，number = 8 的数据，给阻塞了；<br>事务4添加 id = 8，number = 8 的数据，正常执行了。<br>事务7将 id = 11，number = 12 的数据修改为 id = 11， number = 5的操作，给阻塞了；</p>
<p>这是为什么呢？我们来看看下边的图</p>
<p><img src="https://leaf.tqlin.cn/upload/2019/11/gap%20locks-07b45f89a22d43afb7652b57733e8750.jpg" alt="gap locks"></p>
<p>从图中可以看出，当 number 相同时，会根据主键 id 来排序，所以：</p>
<p>事务3添加的 id = 6，number = 8，这条数据是在 （3, 8） 的区间里边，所以会被阻塞；<br>事务4添加的 id = 8，number = 8，这条数据则是在（8, 12）区间里边，所以不会被阻塞；<br>事务7的修改语句相当于在 （3, 8） 的区间里边插入一条数据，所以也被阻塞了。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul>
<li>在普通索引列上，不管是何种查询，只要加锁，都会产生间隙锁，这跟唯一索引不一样</li>
<li>在普通索引跟唯一索引中，数据间隙的分析，数据行是优先根据普通索引排序，再根据唯一索引排序</li>
</ul>
<h3 id="后码锁-Next-key-Locks"><a href="#后码锁-Next-key-Locks" class="headerlink" title="后码锁(Next-key Locks)"></a>后码锁(Next-key Locks)</h3><p>后码锁是记录锁与间隙锁的组合，它的封锁范围，既包含索引记录，又包含索引区间。</p>
<p>注：Next-key Lock的主要目的，也是为了避免幻读(Phantom Read)。如果把事务的隔离级别降级为RC，Next-key Lock则也会失效。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>记录锁、间隙锁、后码锁，都属于排它锁；</li>
<li>记录锁就是锁住一行记录；</li>
<li>间隙锁只有在事务隔离级别 RR 中才会产生；</li>
<li>唯一索引只有锁住多条记录或者一条不存在的记录的时候，才会产生间隙锁，指定给某条存在的记录加锁的时候，只会加记录锁，不会产生间隙锁；</li>
<li>普通索引不管是锁住单条，还是多条记录，都会产生间隙锁；</li>
<li>间隙锁会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 幻读 现象；</li>
<li>普通索引的间隙，优先以普通索引排序，然后再根据主键索引排序；</li>
<li>事务级别是RC（读已提交）级别的话，间隙锁将会失效。</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/48269420">本文参考地址</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx命令</title>
    <url>/2019/11/22/issueGather/Nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><pre><code># 添加 Nginx 源
sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm

# 安装 Nginx
sudo yum install -y nginx

# 启动 Nginx
sudo systemctl start nginx.service

# 设置开机自启 Nginx
sudo systemctl enable nginx.service
</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code># 检查配置是否有误
sudo nginx -t

# 重载 Nginx 配置
sudo nginx -s reload
</code></pre><h2 id="配置-SSL-证书"><a href="#配置-SSL-证书" class="headerlink" title="配置 SSL 证书"></a>配置 SSL 证书</h2><pre><code># 安装 certbot 以及 certbot nginx 插件
sudo yum install certbot python2-certbot-nginx -y

# 执行配置，中途会询问你的邮箱，如实填写即可
sudo certbot --nginx

# 自动续约
sudo certbot renew --dry-run
</code></pre><h2 id="静态网站配置"><a href="#静态网站配置" class="headerlink" title="静态网站配置"></a>静态网站配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8091;                      #端口</span><br><span class="line">    server_name  tqlin.cn www.tqlin.cn;     #域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/webapps/leaf/public;    #网站目录</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 数据淘汰机制</title>
    <url>/2019/11/22/issueGather/Redis%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Redis-数据淘汰机制"><a href="#Redis-数据淘汰机制" class="headerlink" title="Redis 数据淘汰机制"></a>Redis 数据淘汰机制</h1><p>为了更好的利用内存，使Redis存储的都是缓存的热点数据，Redis设计了相应的内存淘汰机制（也叫做缓存淘汰机制）</p>
<p>通过maxmemory <bytes>配置项来设置允许用户使用的最大内存大小，当内存数据集大小达到一定的大小时，就会根据maxmemory-policy noeviction配置项配置的策略来进行数据淘汰。</p>
<h2 id="内存淘汰的过程"><a href="#内存淘汰的过程" class="headerlink" title="内存淘汰的过程"></a>内存淘汰的过程</h2><ul>
<li>客户端发起了需要申请更多内存的命令（如set）</li>
<li>Redis检查内存使用情况，如果已使用的内存大于maxmemory则开始根据用户配置的不同淘汰策略来淘汰内存（key），从而换取一定的内存</li>
<li>如果上面都没问题，则这个命令执行成功</li>
</ul>
<h2 id="6-种数据淘汰策略"><a href="#6-种数据淘汰策略" class="headerlink" title="6 种数据淘汰策略"></a>6 种数据淘汰策略</h2><p>默认为no-eviction策略</p>
<ul>
<li><p>volatile-lru</p>
<blockquote>
<p>从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p>
</blockquote>
</li>
<li><p>allkeys-lru</p>
<blockquote>
<p>从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p>
</blockquote>
</li>
<li><p>volatile-ttl</p>
<blockquote>
<p>从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p>
</blockquote>
</li>
<li><p>volatile-random</p>
<blockquote>
<p>从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p>
</blockquote>
</li>
<li><p>allkeys-random</p>
<blockquote>
<p>从数据集（server.db[i].dict）中任意选择数据淘汰</p>
</blockquote>
</li>
<li><p>no-enviction</p>
<blockquote>
<p>禁止驱逐数据，永远不过期，仅对写操作返回一个错误，默认为该项</p>
</blockquote>
</li>
</ul>
<p>Redis 确定驱逐某个键值对后，会删除这个数据，并将这个数据变更消息发布到本地（AOF 持久化）和从机（主从连接）</p>
<h3 id="LRU-数据淘汰机制"><a href="#LRU-数据淘汰机制" class="headerlink" title="LRU 数据淘汰机制"></a>LRU 数据淘汰机制</h3><p>实际上Redis实现的LRU并不是可靠的LRU，也就是名义上我们使用LRU算法淘汰键，但是实际上被淘汰的键并不一定是真正的最久没用的，这里涉及到一个权衡的问题，如果需要在全部键空间内搜索最优解，则必然会增加系统的开销，Redis是单线程的，也就是同一个实例在每一个时刻只能服务于一个客户端，所以耗时的操作一定要谨慎。为了在一定成本内实现相对的LRU，早期的Redis版本是基于采样的LRU，也就是放弃全部键空间内搜索解改为采样空间搜索最优解。自从Redis3.0版本之后，Redis作者对于基于采样的LRU进行了一些优化，目的是在一定的成本内让结果更靠近真实的LRU。</p>
<h3 id="TTL-数据淘汰机制"><a href="#TTL-数据淘汰机制" class="headerlink" title="TTL 数据淘汰机制"></a>TTL 数据淘汰机制</h3><p>Redis 数据集数据结构中保存了键值对过期时间的表，即 redisDb.expires，在使用 SET 命令的时候，就有一个键值对超时时间的选项。<br>从过期时间 redisDB.expires 表中随机挑选几个键值对，取出其中 ttl 最大的键值对淘汰。同样TTL淘汰策略并不是所有过期时间的表中最快过期的键值对，而只是随机挑选的几个键值对。</p>
<h3 id="随机淘汰"><a href="#随机淘汰" class="headerlink" title="随机淘汰"></a>随机淘汰</h3><p>在随机淘汰的场景下获取待删除的键值对，随机找hash桶再次hash指定位置的dictEntry即可</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Redis中的淘汰机制（LRU和TTL）都是非精确算法实现的，主要从性能和可靠性上做平衡，所以并不是完全可靠，在了解Redis淘汰策略之后还应在平时多主动设置或更新key的expire时间，主动删除没有价值的数据，提升Redis整体性能和空间</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Redis%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 2.4.0 发布说明</title>
    <url>/2020/12/07/issueGather/Spring%20Boot%202.4.0%20%E5%8F%91%E5%B8%83%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p>Spring Boot 2.4.0 正式版本不再添加 RELEASE 后缀声明，在这个版本中增加了大量的新特性和改进，切记，不要轻易升级</p>
<p>除了刚发布的Spring Boot 2.4.0，Spring Boot 2.3.x/2.2.x仍旧是活跃的维护的版本。Spring Boot遵循的是Pivotal OSS支持策略，从发布日期起支持主要版本3年（注意：是主要版本）。下面是详情：</p>
<ul>
<li>2.3.x：支持的版本。2020.05发布，是现在的活跃的主干</li>
<li>2.2.x：支持的版本。2019.10发布，是现在的活跃的主干</li>
<li>2.1.x：2018.10发布，支持到2020.10月底，建议尽快升级</li>
<li>2.0.x：2018.3发布，2019.4.3停止维护 </li>
<li>1.5.x：生命已终止的版本。2017.1发布，是最后一个1.x分支，2019.8.1停止维护</li>
</ul>
<h2 id="2-4-0主要新特性"><a href="#2-4-0主要新特性" class="headerlink" title="2.4.0主要新特性"></a>2.4.0主要新特性</h2><h3 id="版本命名的更改"><a href="#版本命名的更改" class="headerlink" title="版本命名的更改"></a>版本命名的更改</h3><p>从2.4.0开始，版本名将去除RELEASE后缀，所以这次的版本不是2.4.0.RELEASE，而是2.4.0</p>
<p>2.4.0是第一个使用新版本方案的Spring Boot发行版本</p>
<h3 id="全新的配置文件处理-properties-yaml"><a href="#全新的配置文件处理-properties-yaml" class="headerlink" title="全新的配置文件处理(properties/yaml)"></a>全新的配置文件处理(properties/yaml)</h3><p>这个改变最为重磅，本次改变了配置文件的加载逻辑，旨在简化和合理化外部配置的加载方式，它可能具有不向下兼容性。</p>
<p>Spring Boot 2.4改变了处理application.properties和application.yml文件的方式：</p>
<ul>
<li>若你只是简单的文件application.properties/yaml，那么升级对你是无缝的，你感受不到任何变化</li>
<li>若你使用了比较复杂的文件，如application-profile.properties/yaml这种（或者使用了Spirng Cloud的配置中心、（带有分隔符——的）多yaml文件），那么默认是不向下兼容的，需要你显式的做出些更改</li>
</ul>
<p>因为配置文件隶属于程序的一部分，特别是我们现在几乎都会使用到配置中心。因此下面针对于老版本升级到Spring Boot 2.4.0做个简单的迁移指导。</p>
<p>Spring Boot 2.4对application.poperties/yaml的处理做了更新/升级。旨在简化和合理化外部配置的加载方式。它还提供了新功能：spring.config.import支持。所以呢，对于Spring Boot 2.4.0之前的版本（老版本）若升级到2.4.0需要做些修改，指导建议如下：</p>
<p>增加此配置后，Spring Boot对配置文件的解析恢复到原来模式：仍旧使用ConfigFileApplicationListener去解析</p>
<p>此API在2.4.0已被标记为过期，按照Spring Boot的版本策略，此类将在Spring Boot 2.6.0版本被移除。因此：若不是迫不得已（时间紧急），并不建议你用兼容手法这么去做，因为这将成为技术债，迟早要还的。</p>
<h4 id="方式一：恢复旧模式（不推荐）"><a href="#方式一：恢复旧模式（不推荐）" class="headerlink" title="方式一：恢复旧模式（不推荐）"></a>方式一：恢复旧模式（不推荐）</h4><p>如果你还未准备好做配置迁移的修改，Spring Boot也帮你考虑到了，提供了一键切换到旧模式的“按钮”。具体做法是：只需要在Environment里增加一个属性spring.config.use-legacy-processing = true就搞定。最简的方式就是把这个属性放在application.poperties/yaml里即可。</p>
<h4 id="方式二：按新规则迁移（推荐）"><a href="#方式二：按新规则迁移（推荐）" class="headerlink" title="方式二：按新规则迁移（推荐）"></a>方式二：按新规则迁移（推荐）</h4><p>若你对配置文件的使用有如下情行，那么你需要做迁移：</p>
<ul>
<li>多文档的yaml文件（带有——分隔符的文件）</li>
<li>在Jar外使用配置文件，或者使用形如application-{xxx}.properties/yaml这种配置</li>
<li>若在多文档yaml中使用到了spring.profiles配置项</li>
<li>…</li>
</ul>
<p>Spring Boot 2.4.0升级对配置文件的改动是最大的，并且还不具备向下兼容性，简单的说就是从此版本开始要把Spring Boot的配置文件加载机制重学一遍（比如还增加了spring.config.import，增加了对kubernetes配置的支持等等），并且还要学会如何迁移。</p>
<h3 id="新的-spring-config-import-属性可用于导入-Kubernetes-中常用的配置树"><a href="#新的-spring-config-import-属性可用于导入-Kubernetes-中常用的配置树" class="headerlink" title="新的 spring.config.import 属性可用于导入 Kubernetes 中常用的配置树"></a>新的 spring.config.import 属性可用于导入 Kubernetes 中常用的配置树</h3><h3 id="添加了一个新的启动端点，用来显示应用启动有关的详细信息，比如可以帮助我们来诊断启动时间比预期更长的-Spring-Beans"><a href="#添加了一个新的启动端点，用来显示应用启动有关的详细信息，比如可以帮助我们来诊断启动时间比预期更长的-Spring-Beans" class="headerlink" title="添加了一个新的启动端点，用来显示应用启动有关的详细信息，比如可以帮助我们来诊断启动时间比预期更长的 Spring Beans"></a>添加了一个新的启动端点，用来显示应用启动有关的详细信息，比如可以帮助我们来诊断启动时间比预期更长的 Spring Beans</h3><h3 id="Docker-支持升级"><a href="#Docker-支持升级" class="headerlink" title="Docker 支持升级"></a>Docker 支持升级</h3><h3 id="完美支持Java-15"><a href="#完美支持Java-15" class="headerlink" title="完美支持Java 15"></a>完美支持Java 15</h3><h3 id="核心依赖升级"><a href="#核心依赖升级" class="headerlink" title="核心依赖升级"></a>核心依赖升级</h3><ul>
<li><p>Spring AMQP 2.3</p>
</li>
<li><p>Spring Batch 4.3</p>
</li>
<li><p>Spring Data 2020.0</p>
</li>
<li><p>Spring Framework 5.3</p>
</li>
<li><p>Spring Integration 5.4</p>
</li>
<li><p>Spring HATEOAS 1.2</p>
</li>
<li><p>Spring Kafka 2.6</p>
</li>
<li><p>Spring Retry 1.3</p>
</li>
<li><p>Spring Security 5.4</p>
</li>
<li><p>Spring Session 2020.0</p>
</li>
</ul>
<h3 id="嵌入式数据库检测"><a href="#嵌入式数据库检测" class="headerlink" title="嵌入式数据库检测"></a>嵌入式数据库检测</h3><p>改进嵌入式数据库检测机制：仅当数据库在内存中时才将其视为嵌入式数据库。所以如果使用H2、HSQL等产品，但是你是基于文件的持久性或使用的是服务器模式，那么将不会检测为内存数据库。而对于非内存数据库，你可能需要额外做如下动作：</p>
<ul>
<li>sa用户名将不会再被主动设置。所以如果你的数据库需要用户名，请增加配置项：spring.datasource.username = sa</li>
<li>这种数据库将不会再被自动初始化，若要使用请根据需要更改spring.datasource.initialization-mode的值</li>
</ul>
<h3 id="Logback配置属性的更改"><a href="#Logback配置属性的更改" class="headerlink" title="Logback配置属性的更改"></a>Logback配置属性的更改</h3><p>Logback一些配置项改名了,新增了配置类LogbackLoggingSystemProperties用于对应，它继承自之前的LoggingSystemProperties</p>
<p>之前的配置项有些被废弃（此版本还未删除，后续版本肯定会删除的），对应关系如下</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>老(<del>~已废弃</del>~)</th>
<th>新</th>
</tr>
</thead>
<tbody>
<tr>
<td>logging.pattern.rolling-file-name</td>
<td>logging.logback.rollingpolicy.file-name-pattern</td>
</tr>
<tr>
<td>logging.file.clean-history-on-start</td>
<td>logging.logback.rollingpolicy.clean-history-on-start</td>
</tr>
<tr>
<td>logging.file.max-size</td>
<td>logging.logback.rollingpolicy.max-file-size</td>
</tr>
<tr>
<td>logging.file.total-size-cap</td>
<td>logging.logback.rollingpolicy.total-size-cap</td>
</tr>
<tr>
<td>logging.file.max-history</td>
<td>logging.logback.rollingpolicy.max-history</td>
</tr>
</tbody>
</table>
</div>
<p>一些属性是被放到system environment里面的：<br>|老(<del>~已废弃</del>~)|新|<br>|—-|—-|<br>|ROLLING_FILE_NAME_PATTERN | LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN|<br>|LOG_FILE_CLEAN_HISTORY_ON_START | LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START|<br>|LOG_FILE_MAX_SIZE | LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE|<br>|LOG_FILE_TOTAL_SIZE_CAP | LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP|<br>|LOG_FILE_MAX_HISTORY | LOGBACK_ROLLINGPOLICY_MAX_HISTORY|</p>
<h3 id="不再注册DefaultServlet"><a href="#不再注册DefaultServlet" class="headerlink" title="不再注册DefaultServlet"></a>不再注册DefaultServlet</h3><p>从Spring Boot 2.4开始，默认将不会再注册DefaultServlet。因为在绝大多数的应用中，Spring MVC提供的DispatcherServlet是唯一需要被注册的Servlet。</p>
<pre><code>若你的工程强依赖于此Servelt，那么可以通过此配置项server.servlet.register-default-servlet = true把它注册上去。
</code></pre><h3 id="HTTP-traces不再包含cookie头"><a href="#HTTP-traces不再包含cookie头" class="headerlink" title="HTTP traces不再包含cookie头"></a>HTTP traces不再包含cookie头</h3><p>默认情况下，不在 HTTP traces中包含 Cookie 请求头和 set-Cookie 响应头。</p>
<pre><code>若你仍旧想保留老的习惯，那么请用配置项management.trace.http.include = cookies, errors, request-headers, response-headers自行控制。
</code></pre><h3 id="从spring-boot-starter-test中删除Vintage-Engine"><a href="#从spring-boot-starter-test中删除Vintage-Engine" class="headerlink" title="从spring-boot-starter-test中删除Vintage Engine"></a>从spring-boot-starter-test中删除Vintage Engine</h3><p>Spring Boot 2.2.0版本开始就引入JUnit 5作为单元测试默认库，在此之前，spring-boot-starter-test包含的是JUnit 4的依赖，Spring Boot 2.2.0版本之后替换成了Junit Jupiter（Junit5）。</p>
<p>Vintage Engine属于Junit5的一个模块，它的作用是：允许用JUnit 5运行用JUnit 4编写的测试，从而提供了向下兼容的能力。</p>
<p>从2.2.0到现在经过了2个版本的迭代，到Spring Boot 2.4.0这个版本决定了把Vintage Engine从spring-boot-starter-test正式移除。因此：若你的工程仍需要对JUnit4支持，那么请手动引入依赖项（如果工程量不大，强烈建议使用JUnit5，比4好用太多）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre><code>说明：其实在2.4.0之前，若你是从https://start.spring.io生成的项目其实也是不会带有vintage-engine的。只不过它是通过显式的在pom里通过exclusion标签来排除的
</code></pre><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo">Spring Boot、Cloud学习示例</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Spring%20Boot%202.4.0%20%E5%8F%91%E5%B8%83%E8%AF%B4%E6%98%8E.md">原文地址</a></li>
<li><a href="https://www.mdeditor.tw/pl/p5WO">参考资料</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.4-Release-Notes">官网发布说明</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 常用注解汇总</title>
    <url>/2019/11/22/issueGather/Spring%20Boot%20%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Spring-Boot-常用注解汇总"><a href="#Spring-Boot-常用注解汇总" class="headerlink" title="Spring Boot 常用注解汇总"></a>Spring Boot 常用注解汇总</h1><h2 id="一、启动注解-SpringBootApplication"><a href="#一、启动注解-SpringBootApplication" class="headerlink" title="一、启动注解 @SpringBootApplication"></a>一、启动注解 @SpringBootApplication</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">// ... 此处省略源码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看源码可发现，@SpringBootApplication是一个复合注解，包含了@SpringBootConfiguration，@EnableAutoConfiguration，@ComponentScan这三个注解</p>
<h3 id="SpringBootConfiguration-注解，继承-Configuration注解，主要用于加载配置文件"><a href="#SpringBootConfiguration-注解，继承-Configuration注解，主要用于加载配置文件" class="headerlink" title="@SpringBootConfiguration 注解，继承@Configuration注解，主要用于加载配置文件"></a>@SpringBootConfiguration 注解，继承@Configuration注解，主要用于加载配置文件</h3><p>@SpringBootConfiguration继承自@Configuration，二者功能也一致，标注当前类是配置类， 并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到spring容器中，并且实例名就是方法名。</p>
<h3 id="EnableAutoConfiguration-注解，开启自动配置功能"><a href="#EnableAutoConfiguration-注解，开启自动配置功能" class="headerlink" title="@EnableAutoConfiguration 注解，开启自动配置功能"></a>@EnableAutoConfiguration 注解，开启自动配置功能</h3><p>@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成</p>
<h3 id="ComponentScan-注解，主要用于组件扫描和自动装配"><a href="#ComponentScan-注解，主要用于组件扫描和自动装配" class="headerlink" title="@ComponentScan 注解，主要用于组件扫描和自动装配"></a>@ComponentScan 注解，主要用于组件扫描和自动装配</h3><p>@ComponentScan的功能其实就是自动扫描并加载符合条件的组件或bean定义，最终将这些bean定义加载到容器中。我们可以通过basePackages等属性指定@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现从声明@ComponentScan所在类的package进行扫描，默认情况下是不指定的，所以SpringBoot的启动类最好放在root package下。</p>
<h2 id="二、Controller-相关注解"><a href="#二、Controller-相关注解" class="headerlink" title="二、Controller 相关注解"></a>二、Controller 相关注解</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h3><p>控制器，处理http请求。</p>
<h3 id="RestController-复合注解"><a href="#RestController-复合注解" class="headerlink" title="@RestController 复合注解"></a>@RestController 复合注解</h3><p>查看@RestController源码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">	 * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从源码我们知道,@RestController注解相当于@ResponseBody+@Controller合在一起的作用,RestController使用的效果是将方法返回的对象直接在浏览器上展示成json格式.</p>
<h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>通过HttpMessageConverter读取Request Body并反序列化为Object（泛指）对象</p>
<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>@RequestMapping 是 Spring Web 应用程序中最常被用到的注解之一。这个注解会将 HTTP 请求映射到 MVC 和 REST 控制器的处理方法上</p>
<h3 id="GetMapping用于将HTTP-get请求映射到特定处理程序的方法注解"><a href="#GetMapping用于将HTTP-get请求映射到特定处理程序的方法注解" class="headerlink" title="@GetMapping用于将HTTP get请求映射到特定处理程序的方法注解"></a>@GetMapping用于将HTTP get请求映射到特定处理程序的方法注解</h3><p>注解简写：@RequestMapping(value = “/say”,method = RequestMethod.GET)等价于：@GetMapping(value = “/say”)</p>
<p>GetMapping源码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GetMapping &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>是@RequestMapping(method = RequestMethod.GET)的缩写</p>
<h3 id="PostMapping用于将HTTP-post请求映射到特定处理程序的方法注解"><a href="#PostMapping用于将HTTP-post请求映射到特定处理程序的方法注解" class="headerlink" title="@PostMapping用于将HTTP post请求映射到特定处理程序的方法注解"></a>@PostMapping用于将HTTP post请求映射到特定处理程序的方法注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PostMapping &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是@RequestMapping(method = RequestMethod.POST)的缩写</p>
<h2 id="三、取请求参数值"><a href="#三、取请求参数值" class="headerlink" title="三、取请求参数值"></a>三、取请求参数值</h2><h3 id="PathVariable-获取url中的数据"><a href="#PathVariable-获取url中的数据" class="headerlink" title="@PathVariable:获取url中的数据"></a>@PathVariable:获取url中的数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getUser/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span>Integer id, Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求示例：<a href="http://localhost:8080/User/getUser/123">http://localhost:8080/User/getUser/123</a></p>
<h3 id="RequestParam-获取请求参数的值"><a href="#RequestParam-获取请求参数的值" class="headerlink" title="@RequestParam:获取请求参数的值"></a>@RequestParam:获取请求参数的值</h3><p>@Controller<br>@RequestMapping(“/User”)<br>public class HelloWorldController {</p>
<pre><code>@RequestMapping(&quot;/getUser&quot;)
public String getUser(@RequestParam(&quot;uid&quot;)Integer id, Model model) &#123;
    System.out.println(&quot;id:&quot;+id);
    return &quot;user&quot;;
&#125;
</code></pre><p>}</p>
<p>请求示例：<a href="http://localhost:8080/User/getUser?uid=123">http://localhost:8080/User/getUser?uid=123</a></p>
<h3 id="RequestHeader-把Request请求header部分的值绑定到方法的参数上"><a href="#RequestHeader-把Request请求header部分的值绑定到方法的参数上" class="headerlink" title="@RequestHeader 把Request请求header部分的值绑定到方法的参数上"></a>@RequestHeader 把Request请求header部分的值绑定到方法的参数上</h3><h3 id="CookieValue-把Request-header中关于cookie的值绑定到方法的参数上"><a href="#CookieValue-把Request-header中关于cookie的值绑定到方法的参数上" class="headerlink" title="@CookieValue 把Request header中关于cookie的值绑定到方法的参数上"></a>@CookieValue 把Request header中关于cookie的值绑定到方法的参数上</h3><h2 id="四、注入bean相关"><a href="#四、注入bean相关" class="headerlink" title="四、注入bean相关"></a>四、注入bean相关</h2><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h3><p>DAO层注解，DAO层中接口继承JpaRepository<T,ID extends Serializable>,需要在build.gradle中引入相关jpa的一个jar自动加载。</p>
<p>Repository注解源码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">	 * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">	 * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>@Service是@Component注解的一个特例，作用在类上</li>
<li>@Service注解作用域默认为单例</li>
<li>使用注解配置和类路径扫描时，被@Service注解标注的类会被Spring扫描并注册为Bean</li>
<li>@Service用于标注服务层组件,表示定义一个bean</li>
<li>@Service使用时没有传参数，Bean名称默认为当前类的类名，首字母小写</li>
<li>@Service(“serviceBeanId”)或@Service(value=”serviceBeanId”)使用时传参数，使用value作为Bean名字</li>
</ul>
<h3 id="Scope作用域注解"><a href="#Scope作用域注解" class="headerlink" title="@Scope作用域注解"></a>@Scope作用域注解</h3><p>@Scope作用在类上和方法上，用来配置 spring bean 的作用域，它标识 bean 的作用域</p>
<p>@Scope源码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Alias for &#123;<span class="doctag">@link</span> #scopeName&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #scopeName</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(&quot;scopeName&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">scopeName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">ScopedProxyMode <span class="title">proxyMode</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>属性介绍</p>
<pre><code>value
    singleton   表示该bean是单例的。(默认)
    prototype   表示该bean是多例的，即每次使用该bean时都会新建一个对象。
    request     在一次http请求中，一个bean对应一个实例。
    session     在一个httpSession中，一个bean对应一个实例。

proxyMode
    DEFAULT         不使用代理。(默认)
    NO              不使用代理，等价于DEFAULT。
    INTERFACES      使用基于接口的代理(jdk dynamic proxy)。
    TARGET_CLASS    使用基于类的代理(cglib)。
</code></pre><h3 id="Entity实体类注解"><a href="#Entity实体类注解" class="headerlink" title="@Entity实体类注解"></a>@Entity实体类注解</h3><p>@Table(name =”数据库表名”)，这个注解也注释在实体类上，对应数据库中相应的表。<br>@Id、@Column注解用于标注实体类中的字段，pk字段标注为@Id，其余@Column。</p>
<h3 id="Bean产生一个bean的方法"><a href="#Bean产生一个bean的方法" class="headerlink" title="@Bean产生一个bean的方法"></a>@Bean产生一个bean的方法</h3><p>@Bean明确地指示了一种方法，产生一个bean的方法，并且交给Spring容器管理。支持别名@Bean(“xx-name”)</p>
<h3 id="Autowired-自动导入"><a href="#Autowired-自动导入" class="headerlink" title="@Autowired 自动导入"></a>@Autowired 自动导入</h3><ul>
<li>@Autowired注解作用在构造函数、方法、方法参数、类字段以及注解上</li>
<li>@Autowired注解可以实现Bean的自动注入</li>
</ul>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>把普通pojo实例化到spring容器中，相当于配置文件中的<bean id="" class=""/></p>
<p>虽然有了@Autowired,但是我们还是要写一堆bean的配置文件,相当麻烦,而@Component就是告诉spring,我是pojo类,把我注册到容器中吧,spring会自动提取相关信息。那么我们就不用写麻烦的xml配置文件了</p>
<h2 id="五、导入配置文件"><a href="#五、导入配置文件" class="headerlink" title="五、导入配置文件"></a>五、导入配置文件</h2><h3 id="PropertySource注解"><a href="#PropertySource注解" class="headerlink" title="@PropertySource注解"></a>@PropertySource注解</h3><p>引入单个properties文件：</p>
<p>@PropertySource(value = {“classpath : xxxx/xxx.properties”})</p>
<p>引入多个properties文件：</p>
<p>@PropertySource(value = {“classpath : xxxx/xxx.properties”，”classpath : xxxx.properties”})</p>
<h3 id="ImportResource导入xml配置文件"><a href="#ImportResource导入xml配置文件" class="headerlink" title="@ImportResource导入xml配置文件"></a>@ImportResource导入xml配置文件</h3><p>可以额外分为两种模式 相对路径classpath，绝对路径（真实路径）file</p>
<p>注意：单文件可以不写value或locations，value和locations都可用</p>
<p>相对路径（classpath）</p>
<ul>
<li><p>引入单个xml配置文件：@ImportSource(“classpath : xxx/xxxx.xml”)</p>
</li>
<li><p>引入多个xml配置文件：@ImportSource(locations={“classpath : xxxx.xml” , “classpath : yyyy.xml”})</p>
</li>
</ul>
<p>绝对路径（file）</p>
<ul>
<li><p>引入单个xml配置文件：@ImportSource(locations= {“file : d:/hellxz/dubbo.xml”})</p>
</li>
<li><p>引入多个xml配置文件：@ImportSource(locations= {“file : d:/hellxz/application.xml” , “file : d:/hellxz/dubbo.xml”})</p>
</li>
</ul>
<p>取值：使用@Value注解取配置文件中的值</p>
<p>@Value(“${properties中的键}”)<br>private String xxx;</p>
<h3 id="Import-导入额外的配置信息"><a href="#Import-导入额外的配置信息" class="headerlink" title="@Import 导入额外的配置信息"></a>@Import 导入额外的配置信息</h3><p>功能类似XML配置的，用来导入配置类，可以导入带有@Configuration注解的配置类或实现了ImportSelector/ImportBeanDefinitionRegistrar。</p>
<p>使用示例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Import(&#123;SmsConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="六、事务注解-Transactional"><a href="#六、事务注解-Transactional" class="headerlink" title="六、事务注解 @Transactional"></a>六、事务注解 @Transactional</h2><p>在Spring中，事务有两种实现方式，分别是编程式事务管理和声明式事务管理两种方式</p>
<ul>
<li>编程式事务管理： 编程式事务管理使用TransactionTemplate或者直接使用底层的PlatformTransactionManager。对于编程式事务管理，spring推荐使用TransactionTemplate。</li>
<li>声明式事务管理： 建立在AOP之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务，通过@Transactional就可以进行事务操作，更快捷而且简单。推荐使用</li>
</ul>
<h2 id="七、全局异常处理"><a href="#七、全局异常处理" class="headerlink" title="七、全局异常处理"></a>七、全局异常处理</h2><h3 id="ControllerAdvice-统一处理异常"><a href="#ControllerAdvice-统一处理异常" class="headerlink" title="@ControllerAdvice 统一处理异常"></a>@ControllerAdvice 统一处理异常</h3><p>@ControllerAdvice 注解定义全局异常处理类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="ExceptionHandler-注解声明异常处理方法"><a href="#ExceptionHandler-注解声明异常处理方法" class="headerlink" title="@ExceptionHandler 注解声明异常处理方法"></a>@ExceptionHandler 注解声明异常处理方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">handleException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Exception Deal!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="八、资料"><a href="#八、资料" class="headerlink" title="八、资料"></a>八、资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Spring%20Boot%20%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 搭建TCP Server</title>
    <url>/2019/12/13/issueGather/Spring%20Boot%20%E6%90%AD%E5%BB%BATCP%20Server/</url>
    <content><![CDATA[<p>本示例首先介绍Java原生API实现BIO通信，然后进阶实现NIO通信，最后利用Netty实现NIO通信及Netty主要模块组件介绍。</p>
<p>Netty 是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p>
<h2 id="BIO（Blocking-I-O）-方案"><a href="#BIO（Blocking-I-O）-方案" class="headerlink" title="BIO（Blocking I/O） 方案"></a>BIO（Blocking I/O） 方案</h2><p>BIO通信（一请求一应答）模型图如下</p>
<p><img src="https://tqlin.cn/images/bio.png" alt=""></p>
<p>采用 BIO 通信模型 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在while(true) 循环中服务端会调用 accept() 方法等待接收客户端的连接的方式监听请求，一旦接收到一个连接请求，就可以在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待当前连接的客户端的操作执行完成， 如果要让 BIO 通信模型 能够同时处理多个客户端请求，就必须使用多线程（主要原因是socket.accept()、socket.read()、socket.write() 涉及的三个主要函数都是同步阻塞的）</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="BIO服务端"><a href="#BIO服务端" class="headerlink" title="BIO服务端"></a>BIO服务端</h4><p>BIOServer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.javaBio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">10002</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket client = server.accept(); <span class="comment">//等待客户端的连接，如果没有获取连接  ,在此步一直等待</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServerThread(client)).start(); <span class="comment">//为每个客户端连接开启一个线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//server.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端:&quot;</span> + client.getInetAddress().getLocalHost() + <span class="string">&quot;已连接到服务器&quot;</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</span><br><span class="line">        <span class="comment">//读取客户端发送来的消息</span></span><br><span class="line">        String mess = br.readLine();</span><br><span class="line">        log.info(<span class="string">&quot;客户端：&quot;</span> + mess);</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(client.getOutputStream()));</span><br><span class="line">        bw.write(mess + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="BIO客户端"><a href="#BIO客户端" class="headerlink" title="BIO客户端"></a>BIO客户端</h4><p>BIOClient.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.javaBio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">10002</span>);</span><br><span class="line"></span><br><span class="line">        InputStream input = s.getInputStream();</span><br><span class="line">        OutputStream output = s.getOutputStream();</span><br><span class="line"></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(output));</span><br><span class="line">        bw.write(<span class="string">&quot;客户端给服务端发消息测试\n&quot;</span>);  <span class="comment">//向服务器端发送一条消息</span></span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input));  <span class="comment">//读取服务器返回的消息</span></span><br><span class="line">        String mess = br.readLine();</span><br><span class="line">        log.info(<span class="string">&quot;服务器：&quot;</span> + mess);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p>运行BIO服务端，然后再运行BIO客户端，观察控制台</p>
<p>BIOServer控制台输出：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: &#x27;127.0.0.1:64346&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line">17:29:52.519 [Thread-1] INFO com.easy.javaBio.ServerThread - 客户端:YHE6OR5UXQJ6D35/192.168.9.110已连接到服务器</span><br><span class="line">17:29:52.523 [Thread-1] INFO com.easy.javaBio.ServerThread - 客户端：客户端给服务端发消息测试</span><br></pre></td></tr></table></figure></p>
<p>BIOClient控制台输出:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: &#x27;127.0.0.1:64355&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line">17:29:52.527 [main] INFO com.easy.javaBio.BIOClient - 服务器：客户端给服务端发消息测试</span><br><span class="line">Disconnected from the target VM, address: &#x27;127.0.0.1:64355&#x27;, transport: &#x27;socket&#x27;</span><br></pre></td></tr></table></figure></p>
<p>这表示我们实现了一个最简单的BIO通信了</p>
<p>这种方式为每个客户端开启一个线程，高并发时消耗资源较多，容易浪费，甚至导致服务端崩溃，对性能造成负面影响，高并发下不推荐使用。</p>
<h2 id="NIO（New-I-O）方案"><a href="#NIO（New-I-O）方案" class="headerlink" title="NIO（New I/O）方案"></a>NIO（New I/O）方案</h2><p>NIO通信模型图如下</p>
<p><img src="https://tqlin.cn/images/nio.png" alt=""></p>
<p>NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p>
<p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p>
<h3 id="NIO服务端"><a href="#NIO服务端" class="headerlink" title="NIO服务端"></a>NIO服务端</h3><p>NIOServer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.javaBio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InetAddress addr;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NIOServer</span><span class="params">(InetAddress addr, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        startServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获得selector及通道(socketChannel)</span></span><br><span class="line">        <span class="keyword">this</span>.selector = Selector.open();</span><br><span class="line">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line">        serverChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定地址及端口</span></span><br><span class="line">        InetSocketAddress listenAddr = <span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.addr, <span class="keyword">this</span>.port);</span><br><span class="line">        serverChannel.socket().bind(listenAddr);</span><br><span class="line">        serverChannel.register(<span class="keyword">this</span>.selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;NIOServer运行中...按下Ctrl-C停止服务&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;服务器等待新的连接和selector选择…&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.selector.select();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 选择key工作</span></span><br><span class="line">            Iterator keys = <span class="keyword">this</span>.selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (keys.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = (SelectionKey) keys.next();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 防止出现重复的key，处理完需及时移除</span></span><br><span class="line">                keys.remove();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//无效直接跳过</span></span><br><span class="line">                <span class="keyword">if</span> (!key.isValid()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.accept(key);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.read(key);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.write(key);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.connect(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line">        <span class="keyword">if</span> (channel.finishConnect()) &#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            log.info(<span class="string">&quot;成功连接了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            log.info(<span class="string">&quot;失败连接&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();</span><br><span class="line">        SocketChannel channel = serverChannel.accept();</span><br><span class="line">        channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        channel.register(<span class="keyword">this</span>.selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">        Socket socket = channel.socket();</span><br><span class="line">        SocketAddress remoteAddr = socket.getRemoteSocketAddress();</span><br><span class="line">        log.info(<span class="string">&quot;连接到: &quot;</span> + remoteAddr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(BUFF_SIZE);</span><br><span class="line">        <span class="keyword">int</span> numRead = channel.read(buffer);</span><br><span class="line">        <span class="keyword">if</span> (numRead == -<span class="number">1</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;关闭客户端连接: &quot;</span> + channel.socket().getRemoteSocketAddress());</span><br><span class="line">            channel.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String msg = <span class="keyword">new</span> String(buffer.array()).trim();</span><br><span class="line">        log.info(<span class="string">&quot;得到了: &quot;</span> + msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回复客户端</span></span><br><span class="line">        String reMsg = msg + <span class="string">&quot; 你好，这是BIOServer给你的回复消息:&quot;</span> + System.currentTimeMillis();</span><br><span class="line">        channel.write(ByteBuffer.wrap(reMsg.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(BUFF_SIZE);</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        SocketChannel clientChannel = (SocketChannel) key.channel();</span><br><span class="line">        <span class="keyword">while</span> (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">            clientChannel.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        byteBuffer.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> NIOServer(<span class="keyword">null</span>, <span class="number">10002</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用NIO, 可以用Selector最终决定哪一组注册的socket准备执行I/O</p>
<h3 id="NIO客户端"><a href="#NIO客户端" class="headerlink" title="NIO客户端"></a>NIO客户端</h3><p>NIOClient.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.javaBio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">10002</span>);</span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open(socketAddress);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;连接 BIOServer 服务，端口：10002...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; companyDetails = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建消息列表</span></span><br><span class="line">        companyDetails.add(<span class="string">&quot;腾讯&quot;</span>);</span><br><span class="line">        companyDetails.add(<span class="string">&quot;阿里巴巴&quot;</span>);</span><br><span class="line">        companyDetails.add(<span class="string">&quot;京东&quot;</span>);</span><br><span class="line">        companyDetails.add(<span class="string">&quot;百度&quot;</span>);</span><br><span class="line">        companyDetails.add(<span class="string">&quot;google&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String companyName : companyDetails) &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(companyName.getBytes()));</span><br><span class="line">            log.info(<span class="string">&quot;发送: &quot;</span> + companyName);</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(BUFF_SIZE);</span><br><span class="line">            buffer.clear();</span><br><span class="line">            socketChannel.read(buffer);</span><br><span class="line">            String result = <span class="keyword">new</span> String(buffer.array()).trim();</span><br><span class="line">            log.info(<span class="string">&quot;收到NIOServer回复的消息：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待2秒钟再发送下一条消息</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="运行示例-1"><a href="#运行示例-1" class="headerlink" title="运行示例"></a>运行示例</h3><p>首先运行我们的NIOServer，然后再运行NIOClient，观察控制台输出</p>
<p>NIOServer控制台输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:35:40.921 [main] INFO com.easy.javaBio.NIOServer - NIOServer运行中...按下Ctrl-C停止服务</span><br><span class="line">17:35:40.924 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:29.188 [main] INFO com.easy.javaBio.NIOServer - 连接到: /192.168.9.110:64443</span><br><span class="line">17:36:29.188 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:29.194 [main] INFO com.easy.javaBio.NIOServer - 得到了: 腾讯</span><br><span class="line">17:36:29.194 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:31.194 [main] INFO com.easy.javaBio.NIOServer - 得到了: 阿里巴巴</span><br><span class="line">17:36:31.195 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:33.195 [main] INFO com.easy.javaBio.NIOServer - 得到了: 京东</span><br><span class="line">17:36:33.195 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:35.196 [main] INFO com.easy.javaBio.NIOServer - 得到了: 百度</span><br><span class="line">17:36:35.197 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:37.197 [main] INFO com.easy.javaBio.NIOServer - 得到了: google</span><br><span class="line">17:36:37.198 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br><span class="line">17:36:39.198 [main] INFO com.easy.javaBio.NIOServer - 关闭客户端连接: /192.168.9.110:64443</span><br><span class="line">17:36:39.198 [main] INFO com.easy.javaBio.NIOServer - 服务器等待新的连接和selector选择…</span><br></pre></td></tr></table></figure></p>
<p>NIOClient控制台输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:36:29.189 [main] INFO com.easy.javaBio.NIOClient - 连接 BIOServer 服务，端口：10002...</span><br><span class="line">17:36:29.194 [main] INFO com.easy.javaBio.NIOClient - 发送: 腾讯</span><br><span class="line">17:36:29.194 [main] INFO com.easy.javaBio.NIOClient - 收到NIOServer回复的消息：腾讯 你好，这是BIOServer给你的回复消息:1576229789194</span><br><span class="line">17:36:31.194 [main] INFO com.easy.javaBio.NIOClient - 发送: 阿里巴巴</span><br><span class="line">17:36:31.195 [main] INFO com.easy.javaBio.NIOClient - 收到NIOServer回复的消息：阿里巴巴 你好，这是BIOServer给你的回复消息:1576229791194</span><br><span class="line">17:36:33.195 [main] INFO com.easy.javaBio.NIOClient - 发送: 京东</span><br><span class="line">17:36:33.196 [main] INFO com.easy.javaBio.NIOClient - 收到NIOServer回复的消息：京东 你好，这是BIOServer给你的回复消息:1576229793195</span><br><span class="line">17:36:35.196 [main] INFO com.easy.javaBio.NIOClient - 发送: 百度</span><br><span class="line">17:36:35.197 [main] INFO com.easy.javaBio.NIOClient - 收到NIOServer回复的消息：百度 你好，这是BIOServer给你的回复消息:1576229795197</span><br><span class="line">17:36:37.197 [main] INFO com.easy.javaBio.NIOClient - 发送: google</span><br><span class="line">17:36:37.198 [main] INFO com.easy.javaBio.NIOClient - 收到NIOServer回复的消息：google 你好，这是BIOServer给你的回复消息:1576229797198</span><br></pre></td></tr></table></figure></p>
<p>NIO服务端每隔两秒会收到客户端的请求，并对客户端的消息做出回复。</p>
<p>直接使用Java NIO API构建应用程序是可以的，但要做到正确和安全并不容易。特别是在高负载下，可靠和高效地处理和调度I/O操作是一项繁琐而且容易出错的任务。可以选中Netty, Apache Mina等高性能网络编程框架。</p>
<h2 id="Netty-构建-NIO-通信服务-方案"><a href="#Netty-构建-NIO-通信服务-方案" class="headerlink" title="Netty 构建 NIO 通信服务 方案"></a>Netty 构建 NIO 通信服务 方案</h2><h3 id="使用JDK原生网络应用程序API，会存在的问题"><a href="#使用JDK原生网络应用程序API，会存在的问题" class="headerlink" title="使用JDK原生网络应用程序API，会存在的问题"></a>使用JDK原生网络应用程序API，会存在的问题</h3><ul>
<li><p>NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等</p>
</li>
<li><p>需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序</p>
</li>
<li><p>可靠性能力补齐，开发工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大</p>
</li>
</ul>
<h3 id="Netty对JDK自带的NIO的API进行封装，解决上述问题，主要特点有"><a href="#Netty对JDK自带的NIO的API进行封装，解决上述问题，主要特点有" class="headerlink" title="Netty对JDK自带的NIO的API进行封装，解决上述问题，主要特点有"></a>Netty对JDK自带的NIO的API进行封装，解决上述问题，主要特点有</h3><ul>
<li>高并发</li>
</ul>
<p>Netty是一款基于NIO（Nonblocking I/O，非阻塞IO）开发的网络通信框架，对比于BIO（Blocking I/O，阻塞IO），他的并发性能得到了很大提高 。</p>
<ul>
<li>传输快</li>
</ul>
<p>Netty的传输快其实也是依赖了NIO的一个特性——零拷贝。</p>
<ul>
<li>封装好</li>
</ul>
<p>Netty封装了NIO操作的很多细节，提供易于使用的API。</p>
<h3 id="Netty框架的优势"><a href="#Netty框架的优势" class="headerlink" title="Netty框架的优势"></a>Netty框架的优势</h3><ul>
<li>API使用简单，开发门槛低；</li>
<li>功能强大，预置了多种编解码功能，支持多种主流协议；</li>
<li>定制能力强，可以通过ChannelHandler对通信框架进行灵活地扩展；</li>
<li>性能高，通过与其他业界主流的NIO框架对比，Netty的综合性能最优；</li>
<li>成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼；</li>
<li>社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会加入；</li>
<li>经历了大规模的商业应用考验，质量得到验证。在互联网、大数据、网络游戏、企业应用、电信软件等众多行业得到成功商用，证明了它已经完全能够满足不同行业的商业应用了。</li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>pom.xml依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>netty<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.netty/netty-all --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.43.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>java-tcp<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>netty-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>netty-client<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="搭建-Netty-服务端"><a href="#搭建-Netty-服务端" class="headerlink" title="搭建 Netty 服务端"></a>搭建 Netty 服务端</h4><p>NettyServer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.nettyServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boss 线程组用于处理连接工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * work 线程组用于数据处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup work = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;netty.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动Netty Server</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        bootstrap.group(boss, work)</span><br><span class="line">                <span class="comment">// 指定Channel</span></span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                <span class="comment">//使用指定的端口设置套接字地址</span></span><br><span class="line">                .localAddress(<span class="keyword">new</span> InetSocketAddress(port))</span><br><span class="line"></span><br><span class="line">                <span class="comment">//服务端可连接队列数,对应TCP/IP协议listen函数中backlog参数</span></span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置TCP长连接,一般如果两个小时内没有数据的通信时,TCP会自动发送一个活动探测数据报文</span></span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将小的数据包包装成更大的帧进行传送，提高网络的负载</span></span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">                .childHandler(<span class="keyword">new</span> ServerChannelInitializer());</span><br><span class="line">        ChannelFuture future = bootstrap.bind().sync();</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;启动 Netty Server&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        boss.shutdownGracefully().sync();</span><br><span class="line">        work.shutdownGracefully().sync();</span><br><span class="line">        log.info(<span class="string">&quot;关闭Netty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NettyServerHandler.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.nettyServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端连接会触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Channel active......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端发消息会触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;服务器收到消息: &#123;&#125;&quot;</span>, msg.toString());</span><br><span class="line">        ctx.write(<span class="string">&quot;我是服务端，我收到你的消息了！&quot;</span>);</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生异常触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ServerChannelInitializer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.nettyServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//添加编解码</span></span><br><span class="line">        socketChannel.pipeline().addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder(CharsetUtil.UTF_8));</span><br><span class="line">        socketChannel.pipeline().addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder(CharsetUtil.UTF_8));</span><br><span class="line">        socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="创建-Netty-客户端"><a href="#创建-Netty-客户端" class="headerlink" title="创建 Netty 客户端"></a>创建 Netty 客户端</h4><p>NettyClient.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.nettyClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFutureListener;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;netty.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;netty.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        socketChannel.writeAndFlush(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        bootstrap.group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .remoteAddress(host, port)</span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> NettyClientInitializer());</span><br><span class="line">        ChannelFuture future = bootstrap.connect();</span><br><span class="line">        <span class="comment">//客户端断线重连逻辑</span></span><br><span class="line">        future.addListener((ChannelFutureListener) future1 -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future1.isSuccess()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;连接Netty服务端成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;连接失败，进行断线重连&quot;</span>);</span><br><span class="line">                future1.channel().eventLoop().schedule(() -&gt; start(), <span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        socketChannel = (SocketChannel) future.channel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>NettyClientHandler.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.nettyClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端Active .....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端收到消息: &#123;&#125;&quot;</span>, msg.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>NettyClientInitializer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.easy.nettyClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        socketChannel.pipeline().addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">        socketChannel.pipeline().addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">        socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="运行示例-2"><a href="#运行示例-2" class="headerlink" title="运行示例"></a>运行示例</h3><p>打开浏览器，地址栏输入：<a href="http://localhost:8091/send?msg=%E4%BD%A0%E5%A5%BD，观察服务端和客户端控制台">http://localhost:8091/send?msg=%E4%BD%A0%E5%A5%BD，观察服务端和客户端控制台</a></p>
<p>服务端控制台输出<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">01</span>:<span class="number">37.901</span>  INFO <span class="number">11288</span> --- [           main] com.easy.nettyServer.NettyServer         : 启动 Netty Server</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">01</span>:<span class="number">45.834</span>  INFO <span class="number">11288</span> --- [ntLoopGroup-<span class="number">3</span>-<span class="number">1</span>] com.easy.nettyServer.NettyServerHandler  : Channel active......</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">02</span>:<span class="number">07.858</span>  INFO <span class="number">11288</span> --- [ntLoopGroup-<span class="number">3</span>-<span class="number">1</span>] com.easy.nettyServer.NettyServerHandler  : 服务器收到消息: 你好</span><br></pre></td></tr></table></figure></p>
<p>客户端控制台输出<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">01</span>:<span class="number">45.822</span>  INFO <span class="number">11908</span> --- [ntLoopGroup-<span class="number">2</span>-<span class="number">1</span>] com.easy.nettyClient.NettyClient         : 连接Netty服务端成功</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">01</span>:<span class="number">45.822</span>  INFO <span class="number">11908</span> --- [ntLoopGroup-<span class="number">2</span>-<span class="number">1</span>] com.easy.nettyClient.NettyClientHandler  : 客户端Active .....</span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">02</span>:<span class="number">08.005</span>  INFO <span class="number">11908</span> --- [ntLoopGroup-<span class="number">2</span>-<span class="number">1</span>] com.easy.nettyClient.NettyClientHandler  : 客户端收到消息: 我是服务端，我收到你的消息了！</span><br></pre></td></tr></table></figure></p>
<p>表示使用Netty实现了我们的NIO通信了</p>
<h2 id="Netty-模块组件"><a href="#Netty-模块组件" class="headerlink" title="Netty 模块组件"></a>Netty 模块组件</h2><h3 id="Bootstrap、ServerBootstrap"><a href="#Bootstrap、ServerBootstrap" class="headerlink" title="Bootstrap、ServerBootstrap"></a>Bootstrap、ServerBootstrap</h3><p>一个Netty应用通常由一个Bootstrap开始，主要作用是配置整个Netty程序，串联各个组件，Netty中Bootstrap类是客户端程序的启动引导类，ServerBootstrap是服务端启动引导类。</p>
<h3 id="Future、ChannelFuture"><a href="#Future、ChannelFuture" class="headerlink" title="Future、ChannelFuture"></a>Future、ChannelFuture</h3><p>在Netty中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理，但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过Future和ChannelFuture，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>Netty网络通信组件，能够用于执行网络I/O操作。Channel为用户提供：</p>
<ul>
<li>当前网络连接的通道的状态（例如是否打开？是否已连接？）</li>
<li>网络连接的配置参数 （例如接收缓冲区大小）</li>
<li>提供异步的网络I/O操作(如建立连接，读写，绑定端口)，异步调用意味着任何I/O调用都将立即返回，并且不保证在调用结束时所请求的I/O操作已完成。调用立即返回一个ChannelFuture实例，通过注册监听器到ChannelFuture上，可以I/O操作成功、失败或取消时回调通知调用方。</li>
<li>支持关联I/O操作与对应的处理程序</li>
</ul>
<p>不同协议、不同阻塞类型的连接都有不同的 Channel 类型与之对应，下面是一些常用的 Channel 类型</p>
<ul>
<li>NioSocketChannel，异步的客户端 TCP Socket 连接</li>
<li>NioServerSocketChannel，异步的服务器端 TCP Socket 连接</li>
<li>NioDatagramChannel，异步的 UDP 连接</li>
<li>NioSctpChannel，异步的客户端 Sctp 连接</li>
<li>NioSctpServerChannel，异步的 Sctp 服务器端连接</li>
</ul>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>Netty基于Selector对象实现I/O多路复用，通过 Selector, 一个线程可以监听多个连接的Channel事件, 当向一个Selector中注册Channel 后，Selector 内部的机制就可以自动不断地查询(select) 这些注册的Channel是否有已就绪的I/O事件(例如可读, 可写, 网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个 Channel </p>
<h3 id="NioEventLoop"><a href="#NioEventLoop" class="headerlink" title="NioEventLoop"></a>NioEventLoop</h3><p>NioEventLoop中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用NioEventLoop的run方法，执行I/O任务和非I/O任务：</p>
<ul>
<li>I/O任务 即selectionKey中ready的事件，如accept、connect、read、write等，由processSelectedKeys方法触发。</li>
<li>非IO任务 添加到taskQueue中的任务，如register0、bind0等任务，由runAllTasks方法触发。</li>
</ul>
<p>两种任务的执行时间比由变量ioRatio控制，默认为50，则表示允许非IO任务执行的时间与IO任务的执行时间相等。</p>
<h3 id="NioEventLoopGroup"><a href="#NioEventLoopGroup" class="headerlink" title="NioEventLoopGroup"></a>NioEventLoopGroup</h3><p>NioEventLoopGroup，主要管理eventLoop的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个Channel上的事件，而一个Channel只对应于一个线程。</p>
<h3 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h3><p>ChannelHandler是一个接口，处理I/O事件或拦截I/O操作，并将其转发到其ChannelPipeline(业务处理链)中的下一个处理程序。</p>
<h3 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h3><p>保存Channel相关的所有上下文信息，同时关联一个ChannelHandler对象</p>
<h3 id="ChannelPipline"><a href="#ChannelPipline" class="headerlink" title="ChannelPipline"></a>ChannelPipline</h3><p>保存ChannelHandler的List，用于处理或拦截Channel的入站事件和出站操作。 ChannelPipeline实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及Channel中各个的ChannelHandler如何相互交互。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/netty">netty 示例源码</a></li>
<li><a href="https://netty.io/">netty官网</a></li>
<li><a href="https://juejin.im/post/5bea1d2e51882523d3163657">参考</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring容器</title>
    <url>/2020/01/04/issueGather/Spring%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Spring容器是什么？"><a href="#Spring容器是什么？" class="headerlink" title="Spring容器是什么？"></a>Spring容器是什么？</h2><p>Spring容器是Spring的核心，Spring容器是管理bean对象的地方，其通过IoC技术管理。Spring容器也就是一个bean工厂（BeanFactory）。应用中bean的实例化，获取，销毁等都是由这个bean工厂管理的。更进一步讲，spring容器是管理service和dao的容器。</p>
<p>Spring提供了两种容器类型：BeanFactory和ApplicationContext</p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>基础类型IoC容器，提供完整的IoC服务支持。如果没有特殊指定，默认采用延迟初始化策略（lazy-load）。只有当客户端对象需要访问容器中的某个受管对象的时候，才对该受管对象进行初始化以及依赖注入操作。所以，相对来说，容器启动初期速度较快，所需要的资源有限。</p>
<p>对于资源有限，并且功能要求不是很严格的场景，BeanFactory是比较合适的IoC容器选择。</p>
<h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext在BeanFactory的基础上构建，是相对比较高级的容器实现，除了拥有BeanFactory的所有支持，ApplicationContext还提供了其他高级特性，比如事件发布、国际化信息支持等。ApplicationContext所管理的对象，在该类型容器启动之后，默认全部初始化并绑定完成。所以，相对于BeanFactory来说，ApplicationContext要求更多的系统资源，同时，因为在启动时就完成所有初始化，容器启动时间较之BeanFactory也会长一些。</p>
<p>在那些系统资源充足，并且要求更多功能的场景中，ApplicationContext类型的容器是比较合适的选择。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Spring%E5%AE%B9%E5%99%A8.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程之ThreadLocal解析</title>
    <url>/2019/11/22/issueGather/ThreadLocal/</url>
    <content><![CDATA[<h1 id="Java并发编程之ThreadLocal解析"><a href="#Java并发编程之ThreadLocal解析" class="headerlink" title="Java并发编程之ThreadLocal解析"></a>Java并发编程之ThreadLocal解析</h1><p><img src="/images/ThreadLocal.png" alt=""></p>
<p>本文讨论的是JDK 1.8中的ThreadLocal</p>
<h2 id="ThreadLocal概念"><a href="#ThreadLocal概念" class="headerlink" title="ThreadLocal概念"></a>ThreadLocal概念</h2><p>ThreadLocal多线程间并发访问变量的解决方案，为每个线程提供变量的副本，用空间换时间。</p>
<ul>
<li>ThreadLocal在每个线程中对该变量会创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，实现线程隔离，这样一来就不存在线程安全问题，也不会严重影响程序执行性能</li>
<li>由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大</li>
<li>如果使用ThreadLocal，通常定义为private static类型，在我看来最好是定义为private static final类型</li>
</ul>
<h2 id="ThreadLocal使用场景"><a href="#ThreadLocal使用场景" class="headerlink" title="ThreadLocal使用场景"></a>ThreadLocal使用场景</h2><p>个人认为只要满足以下两点需求，就可以考虑使用ThreadLocal</p>
<ul>
<li>每个线程需要有自己单独的实例</li>
<li>实例需要在多个方法中共享，但不希望被多线程共享</li>
</ul>
<p>比如：创建数据库连接，在多线程情况下，我们肯定不希望出现A线程拿到连接未执行完，B线程就把它关闭或多个线程共用一个连接导致数据操作混乱等情况。而我们正确的姿势应该会撸上以下这样的类似代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; connTl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">    Connection conn = connTl.get();</span><br><span class="line">    <span class="keyword">if</span>(conn==<span class="keyword">null</span>)&#123;</span><br><span class="line">        conn = dataSource.getConnection();</span><br><span class="line">        connTl.set(conn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ThreadLocal常用方法介绍"><a href="#ThreadLocal常用方法介绍" class="headerlink" title="ThreadLocal常用方法介绍"></a>ThreadLocal常用方法介绍</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置当前线程的线程局部变量的值"><a href="#设置当前线程的线程局部变量的值" class="headerlink" title="设置当前线程的线程局部变量的值"></a>设置当前线程的线程局部变量的值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="返回当前线程所对应的线程局部变量"><a href="#返回当前线程所对应的线程局部变量" class="headerlink" title="返回当前线程所对应的线程局部变量"></a>返回当前线程所对应的线程局部变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="删除该线程当前线程局部变量的值"><a href="#删除该线程当前线程局部变量的值" class="headerlink" title="删除该线程当前线程局部变量的值"></a>删除该线程当前线程局部变量的值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<h2 id="ThreadLocal源码解析"><a href="#ThreadLocal源码解析" class="headerlink" title="ThreadLocal源码解析"></a>ThreadLocal源码解析</h2><h3 id="在看常用方法源码前，我们要先了解下ThreadLocalMap"><a href="#在看常用方法源码前，我们要先了解下ThreadLocalMap" class="headerlink" title="在看常用方法源码前，我们要先了解下ThreadLocalMap"></a>在看常用方法源码前，我们要先了解下ThreadLocalMap</h3><p>ThreadLocalMap是ThreadLocal内部的一个静态类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">           Object value;</span><br><span class="line"></span><br><span class="line">           Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">               <span class="keyword">super</span>(k);</span><br><span class="line">               value = v;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 初始容量</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/** </span></span><br><span class="line"><span class="comment">       * 实体表 </span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 表初始大小</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 扩容上限，当size到达threashold时，需要resize整个Map，threshold的初始值为len * 2 / 3</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 将调整大小阈值设置为最坏情况下保持2/3的负载因子。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">           threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 获取下一个索引，超出长度则返回0</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 返回上一个索引，如果-1为负数，返回长度-1的索引</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 构造参数创建一个ThreadLocalMap代码</span></span><br><span class="line"><span class="comment">        * ThreadLocal为key，我们的泛型为value</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">           table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">           <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">           table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">           size = <span class="number">1</span>;</span><br><span class="line">           setThreshold(INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * ThreadLocal本身是线程隔离的，按道理是不会出现数据共享和传递的行为的</span></span><br><span class="line"><span class="comment">        * 这是InheritableThreadLocal提供了了一种父子间数据共享的机制</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">           Entry[] parentTable = parentMap.table;</span><br><span class="line">           <span class="keyword">int</span> len = parentTable.length;</span><br><span class="line">           setThreshold(len);</span><br><span class="line">           table = <span class="keyword">new</span> Entry[len];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">               Entry e = parentTable[j];</span><br><span class="line">               <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                   ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();</span><br><span class="line">                   <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       Object value = key.childValue(e.value);</span><br><span class="line">                       Entry c = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">                       <span class="keyword">int</span> h = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                       <span class="keyword">while</span> (table[h] != <span class="keyword">null</span>)</span><br><span class="line">                           h = nextIndex(h, len);</span><br><span class="line">                       table[h] = c;</span><br><span class="line">                       size++;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 获取ThreadLocal的索引位置，通过下标索引获取内容</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 通过hashcode确定下标</span></span><br><span class="line">           <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">           Entry e = table[i];</span><br><span class="line">           <span class="comment">// 如果找到则直接返回</span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">               <span class="keyword">return</span> e;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="comment">// 找不到的话接着从i位置开始向后遍历，基于线性探测法，是有可能在i之后的位置找到的</span></span><br><span class="line">               <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 循环向后遍历</span></span><br><span class="line">           <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// 获取节点对应的k</span></span><br><span class="line">               ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">               <span class="comment">// 相等则返回</span></span><br><span class="line">               <span class="keyword">if</span> (k == key)</span><br><span class="line">                   <span class="keyword">return</span> e;</span><br><span class="line">               <span class="comment">// 如果为null，触发一次连续段清理</span></span><br><span class="line">               <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">                   expungeStaleEntry(i);</span><br><span class="line">               <span class="comment">// 获取下一个下标接着进行判断</span></span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   i = nextIndex(i, len);</span><br><span class="line">               e = tab[i];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * ThreadLocalMap的set方法，通过这个方法，我们可以看出该哈希表是用线性探测法来解决冲突的</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 新开一个引用指向table</span></span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="comment">// 获取table的长度</span></span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="comment">// 获取对应ThreadLocal在table当中的下标</span></span><br><span class="line">           <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 从该下标开始循环遍历</span></span><br><span class="line">           <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">                e != <span class="keyword">null</span>;</span><br><span class="line">                e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">               ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 如遇相同key，则直接替换value</span></span><br><span class="line">               <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                   e.value = value;</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 如果该key已经被回收失效，则替换该失效的key</span></span><br><span class="line">               <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   replaceStaleEntry(key, value, i);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 找到空的位置，创建Entry对象并插入</span></span><br><span class="line">           tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">           <span class="comment">// table内元素size自增</span></span><br><span class="line">           <span class="keyword">int</span> sz = ++size;</span><br><span class="line">           <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">               rehash();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 移除key方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line">           <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">           <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">                e != <span class="keyword">null</span>;</span><br><span class="line">                e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">               <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">                   e.clear();</span><br><span class="line">                   expungeStaleEntry(i);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 建个引用变量指向table</span></span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="comment">// 获取table长度</span></span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line">           Entry e;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 记录当前失效的节点下标</span></span><br><span class="line">           <span class="keyword">int</span> slotToExpunge = staleSlot;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 由staleSlot下标开始向前扫描,查找并记录最前位置value为null的下标</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = prevIndex(staleSlot, len);</span><br><span class="line">                (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">                i = prevIndex(i, len))</span><br><span class="line">               <span class="keyword">if</span> (e.get() == <span class="keyword">null</span>)</span><br><span class="line">                   slotToExpunge = i;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 由staleSlot下标开始向后扫描</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = nextIndex(staleSlot, len);</span><br><span class="line">                (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">                i = nextIndex(i, len)) &#123;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 获取Entry节点对应的ThreadLocal对象</span></span><br><span class="line">               ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 如果与新的key对应，直接赋值value，替换i与staleSlot两个下标</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                   e.value = value;</span><br><span class="line"></span><br><span class="line">                   tab[i] = tab[staleSlot];</span><br><span class="line">                   tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (slotToExpunge == staleSlot)</span><br><span class="line">                       slotToExpunge = i;                    </span><br><span class="line"></span><br><span class="line">                   cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">/* 如果当前下标所在已经失效，并且向后扫描过程当中没有找到失效的Entry节点，则slotToExpunge赋值为当前位置*/</span></span><br><span class="line">               <span class="keyword">if</span> (k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">                   slotToExpunge = i;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 如果并没有在table当中找到该key，则直接在当前位置new一个Entry</span></span><br><span class="line">           tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">           tab[staleSlot] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (slotToExpunge != staleSlot)</span><br><span class="line">               cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">/**        </span></span><br><span class="line"><span class="comment">        * 核心清理函数，它主要做的事情就是</span></span><br><span class="line"><span class="comment">        * 1、从staleSlot开始，向后遍历将ThreadLocal对象被回收所在Entry节点的value和Entry节点本身设置null，方便GC，并且size自减1</span></span><br><span class="line"><span class="comment">        * 2、会对非null的Entry节点进行rehash，只要不是在当前位置，就会将Entry挪到下一个为null的位置上</span></span><br><span class="line"><span class="comment">        * 所以实际上是对从staleSlot开始做一个连续段的清理和rehash操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="comment">//获取长度</span></span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 将传过来的下标置null</span></span><br><span class="line">           tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">           tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">           size--;</span><br><span class="line">           </span><br><span class="line">           Entry e;</span><br><span class="line">           <span class="keyword">int</span> i;</span><br><span class="line">           <span class="comment">//遍历删除指定节点所有后续节点当中，ThreadLocal被回收的节点</span></span><br><span class="line">           <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">                (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">                i = nextIndex(i, len)) &#123;</span><br><span class="line">               <span class="comment">//获取entry当中的key</span></span><br><span class="line">               ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">               <span class="comment">// 如果ThreadLocal为null，则将value以及数组下标所在位置设置null，方便GC并且size-1</span></span><br><span class="line">               <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   e.value = <span class="keyword">null</span>;</span><br><span class="line">                   tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                   size--;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;    <span class="comment">//如果不为null</span></span><br><span class="line">                   <span class="comment">//重新计算key的下标</span></span><br><span class="line">                   <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                   </span><br><span class="line">                   <span class="comment">// 如果是当前位置则遍历下一个</span></span><br><span class="line">                   <span class="comment">// 不是当前位置，则重新从i开始找到下一个为null的坐标进行赋值</span></span><br><span class="line">                   <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                       tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                       </span><br><span class="line">                       <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                           h = nextIndex(h, len);</span><br><span class="line">                       tab[h] = e;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> i;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 清理被回收的Entry</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               i = nextIndex(i, len);</span><br><span class="line">               Entry e = tab[i];</span><br><span class="line">               <span class="comment">// Entry对象不为空，但是ThreadLocal这个key已经为null,则清除</span></span><br><span class="line">               <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   n = len;</span><br><span class="line">                   removed = <span class="keyword">true</span>;</span><br><span class="line">                   <span class="comment">// 调用清理函数</span></span><br><span class="line">                   i = expungeStaleEntry(i);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">           <span class="keyword">return</span> removed;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * rehash操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Use lower threshold for doubling to avoid hysteresis</span></span><br><span class="line">           <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">               resize();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 对table进行扩容，因为要保证table的长度是2的幂，所以扩容就扩大2倍</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Entry[] oldTab = table;</span><br><span class="line">           <span class="comment">//旧表长度</span></span><br><span class="line">           <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">           <span class="comment">//新表长度</span></span><br><span class="line">           <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">           Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">           <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 从下标0开始，逐个向后遍历插入到新的table当中</span></span><br><span class="line"><span class="comment">            * 1、如遇到key已经为null，则value设置null，方便GC回收</span></span><br><span class="line"><span class="comment">            * 2、通过hashcode &amp; len - 1计算下标，如果该位置已经有Entry数组，则通过线性探测向后探测插入</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">               Entry e = oldTab[j];</span><br><span class="line">               <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                   <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                       <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                           h = nextIndex(h, newLen);</span><br><span class="line">                       newTab[h] = e;</span><br><span class="line">                       count++;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//重新设置扩容的阈值</span></span><br><span class="line">           setThreshold(newLen);</span><br><span class="line">           <span class="comment">//更新size</span></span><br><span class="line">           size = count;</span><br><span class="line">           <span class="comment">//指向新的Entry数组</span></span><br><span class="line">           table = newTab;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 清除table中所有无用的entry</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Entry[] tab = table;</span><br><span class="line">           <span class="keyword">int</span> len = tab.length;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">               Entry e = tab[j];</span><br><span class="line">               <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>)</span><br><span class="line">                   expungeStaleEntry(j);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前的Thread对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 通过getMap获取Thread内的ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);      </span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果map已经存在，以当前的ThreadLocal为键，获取Entry对象，并从从Entry中取出值</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果map为空,则调用setInitialValue进行初始化</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="getMap方法"><a href="#getMap方法" class="headerlink" title="getMap方法"></a>getMap方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回线程中ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Thread.java类threadLocals属性</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<p>ThreadLocalMap引用其实是存在ThreadLocal类里面的</p>
<h4 id="Entry实体"><a href="#Entry实体" class="headerlink" title="Entry实体"></a>Entry实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Entry是一个key-value结构，key为ThreadLocal，value为存储的值</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="setInitialValue方法"><a href="#setInitialValue方法" class="headerlink" title="setInitialValue方法"></a>setInitialValue方法</h4><p>setInitialValue在Map不存在的时候调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用initialValue生成一个初始的value值，深入initialValue函数，我们可知它就是返回一个null</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//如果不存在则会调用createMap创建ThreadLocalMap</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//new一个ThreadLocalMap对象进去</span></span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取map</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="map-set-this-value-方法"><a href="#map-set-this-value-方法" class="headerlink" title="map.set(this,value)方法"></a>map.set(this,value)方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">//根据key计算出位置</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环检测</span></span><br><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果Entry已经存在并且key等于传入的key，那么这时候直接给这个Entry赋新的value值。</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果Entry存在，但是key为null，则调用replaceStaleEntry来更换这个key为空的Entry</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个entry</span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">    <span class="comment">//sz加1</span></span><br><span class="line">    <span class="keyword">int</span> sz = ++size;</span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取map</span></span><br><span class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//调用map的remove</span></span><br><span class="line">        m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ThreadLocalMap-remove-this-方法"><a href="#ThreadLocalMap-remove-this-方法" class="headerlink" title="ThreadLocalMap.remove(this)方法"></a>ThreadLocalMap.remove(this)方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">//获取索引位置</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//循环遍历table表</span></span><br><span class="line">    <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        <span class="comment">//如果找到,调调用清除相关方法,并结束循环</span></span><br><span class="line">        <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">            <span class="comment">//调用weakrefrence的clear()清除引用</span></span><br><span class="line">            e.clear();</span><br><span class="line">            <span class="comment">//连续段清除</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://juejin.im/post/5c99c7c8f265da60e65ba56d#heading-14">ThreadLocal和ThreadLocalMap源码分析</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>源码解析</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows上部署MySql</title>
    <url>/2019/11/22/issueGather/Windows%E4%B8%8A%E9%83%A8%E7%BD%B2MySql/</url>
    <content><![CDATA[<h1 id="Windows上部署MySql"><a href="#Windows上部署MySql" class="headerlink" title="Windows上部署MySql"></a>Windows上部署MySql</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>最新版本可以在 <a href="https://dev.mysql.com/downloads/mysql/">MySQL 下载</a>中下载。</p>
<p>下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在 D:\Program Files\Java\mysql-8.0.16-winx64下</p>
<h2 id="配置-MySQL-的配置文件"><a href="#配置-MySQL-的配置文件" class="headerlink" title="配置 MySQL 的配置文件"></a>配置 MySQL 的配置文件</h2><p>打开刚刚解压的文件夹 D:\Program Files\Java\mysql-8.0.16-winx64 ，在该文件夹下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql] </span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld] </span><br><span class="line">basedir=D:\Program Files\Java\mysql-8.0.16-winx64</span><br><span class="line">datadir=D:\Program Files\Java\mysql-8.0.16-winx64\data </span><br><span class="line">port=3306 </span><br><span class="line">max_connections=200 </span><br><span class="line">character-set-server=utf8 </span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure>
<p>这里我们把data一起放到mysql-8.0.16-winx64目录，所以在该目录下需要创建data文件</p>
<h2 id="初始化并启动-MySQL-数据库"><a href="#初始化并启动-MySQL-数据库" class="headerlink" title="初始化并启动 MySQL 数据库"></a>初始化并启动 MySQL 数据库</h2><h3 id="1-以管理员身份打开-cmd-命令行工具，切换目录"><a href="#1-以管理员身份打开-cmd-命令行工具，切换目录" class="headerlink" title="1.以管理员身份打开 cmd 命令行工具，切换目录"></a>1.以管理员身份打开 cmd 命令行工具，切换目录</h3><pre><code>cd D:\Program Files\Java\mysql-8.0.16-winx64\bin
</code></pre><h3 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="2.初始化数据库"></a>2.初始化数据库</h3><pre><code>mysqld --initialize --console
</code></pre><p>执行完成后，会输出 root 用户的初始默认密码，如：</p>
<pre><code>...
2019-09-28T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: J0kqlpkJ,CKz
...
</code></pre><p>J0kqlpkJ,CKz 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。</p>
<h3 id="3-输入以下安装命令"><a href="#3-输入以下安装命令" class="headerlink" title="3.输入以下安装命令"></a>3.输入以下安装命令</h3><pre><code>mysqld install
</code></pre><h3 id="4-启动输入以下命令即可"><a href="#4-启动输入以下命令即可" class="headerlink" title="4.启动输入以下命令即可"></a>4.启动输入以下命令即可</h3><pre><code>net start mysql
</code></pre><p>注意: 在 5.7 需要初始化 data 目录：</p>
<pre><code>cd D:\Program Files\Java\mysql-8.0.16-winx64\bin
mysqld --initialize-insecure 
</code></pre><p>初始化后再运行 net start mysql 即可启动 mysq</p>
<h2 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h2><p>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:</p>
<pre><code>mysql -h 主机名 -u 用户名 -p
</code></pre><p>参数说明：</p>
<ul>
<li>-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li>
<li>-u : 登录的用户名;</li>
<li>-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li>
</ul>
<p>如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可：</p>
<pre><code>mysql -u root -p
</code></pre><p>按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:</p>
<p>Enter password:<br>若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welcome to the MySQL monitor… 的提示语。</p>
<p>然后命令提示符会一直以 mysq&gt; 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。</p>
<h2 id="使用Navicat-for-MySQL连接mysql"><a href="#使用Navicat-for-MySQL连接mysql" class="headerlink" title="使用Navicat for MySQL连接mysql"></a>使用Navicat for MySQL连接mysql</h2><h3 id="连接报错"><a href="#连接报错" class="headerlink" title="连接报错"></a>连接报错</h3><p>Navicat连接MySQL Server8.0版本时出现Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>出现连接失败的原因：mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password。两种解决方案</p>
<p>1.升级navicat，由于navicat是收费的，个人感觉升级会比较麻烦点。</p>
<p>2.把用户密码登录的加密规则还原成mysql_native_password这种加密方式，本人选择第二种解决方案</p>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><h4 id="1-命令行登录mysql"><a href="#1-命令行登录mysql" class="headerlink" title="1.命令行登录mysql"></a>1.命令行登录mysql</h4><pre><code>mysql -u root -p
</code></pre><h4 id="2-输入命令修改密码方法"><a href="#2-输入命令修改密码方法" class="headerlink" title="2.输入命令修改密码方法"></a>2.输入命令修改密码方法</h4><pre><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;
</code></pre><h4 id="3-刷新权限，使自己的修改生效"><a href="#3-刷新权限，使自己的修改生效" class="headerlink" title="3.刷新权限，使自己的修改生效"></a>3.刷新权限，使自己的修改生效</h4><pre><code>FLUSH PRIVILEGES;
</code></pre><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Windows%E4%B8%8A%E9%83%A8%E7%BD%B2MySql.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper之Leader选举过程</title>
    <url>/2019/11/22/issueGather/Zookeeper-Leader/</url>
    <content><![CDATA[<h1 id="Zookeeper之Leader选举过程"><a href="#Zookeeper之Leader选举过程" class="headerlink" title="Zookeeper之Leader选举过程"></a>Zookeeper之Leader选举过程</h1><p>Leader在集群中是一个非常重要的角色，负责了整个事务的处理和调度，保证分布式数据一致性的关键所在。既然Leader在ZooKeeper集群中这么重要所以一定要保证集群在任何时候都有且仅有一个Leader存在。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="Zookeeper-Server三种角色：Leader，Follower，Observer。"><a href="#Zookeeper-Server三种角色：Leader，Follower，Observer。" class="headerlink" title="Zookeeper Server三种角色：Leader，Follower，Observer。"></a>Zookeeper Server三种角色：Leader，Follower，Observer。</h3><p>Leader是Zookeeper 集群工作机制的核心，主要工作：</p>
<ul>
<li>a.调度者：集群内部各个服务节点的调度者</li>
<li>b.事务请求：事务请求的唯一调度和处理者，保证集群事务处理的顺序性</li>
</ul>
<p>Follower主要职责：</p>
<ul>
<li>a.非事务请求：Follower 直接处理非事务请求，对于事务请求，转发给 Leader</li>
<li>b.Proposal 投票：Leader 上执行事务时，需要 Follower 投票，Leader 才真正执行</li>
<li>c.Leader 选举投票</li>
</ul>
<p>Observer主要职责：</p>
<ul>
<li>a.非事务请求：Follower 直接处理非事务请求，对于事务请求，转发给 Leader</li>
</ul>
<p>Observer 跟 Follower的区别：</p>
<ul>
<li>a.Follower 参与投票：Leader 选举、Proposal 提议投票（事务执行确认）</li>
<li>b.Observer 不参与投票：只用于提供非事务请求的处理</li>
</ul>
<h3 id="Zookeeper-Server的状态"><a href="#Zookeeper-Server的状态" class="headerlink" title="Zookeeper Server的状态"></a>Zookeeper Server的状态</h3><ul>
<li>LOOKING：寻找Leader</li>
<li>LEADING：Leader状态，对应的节点为Leader。</li>
<li>FOLLOWING：Follower状态，对应的节点为Follower。</li>
<li>OBSERVING：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>
</ul>
<h3 id="其它概念"><a href="#其它概念" class="headerlink" title="其它概念"></a>其它概念</h3><ul>
<li>ZXID（zookeeper transaction id）：每个改变Zookeeper状态的操作都会形成一个对应的zxid，并记录到transaction log中。 这个值越大，表示更新越新</li>
<li>myid：服务器SID，一个数字,通过配置文件配置，唯一</li>
<li>SID：服务器的唯一标识</li>
<li>成为Leader的必要条件： Leader要具有最高的zxid；当集群的规模是n时，集群中大多数的机器（至少n/2+1）得到响应并follow选出的Leader。</li>
<li>心跳机制：Leader与Follower利用PING来感知对方的是否存活，当Leader无法相应PING时，将重新发起Leader选举。</li>
</ul>
<p>选举有两种情况，一是服务器启动的投票，二是运行期间的投票。</p>
<h2 id="服务器启动时期的Leader选举"><a href="#服务器启动时期的Leader选举" class="headerlink" title="服务器启动时期的Leader选举"></a>服务器启动时期的Leader选举</h2><h3 id="1-每个服务器发送一个投票-SID-ZXID"><a href="#1-每个服务器发送一个投票-SID-ZXID" class="headerlink" title="1.每个服务器发送一个投票(SID,ZXID)"></a>1.每个服务器发送一个投票(SID,ZXID)</h3><p>其中sid是自己的myid，初始阶段都将自己投为Leader。</p>
<h3 id="2-接收来自其他服务器的投票。"><a href="#2-接收来自其他服务器的投票。" class="headerlink" title="2.接收来自其他服务器的投票。"></a>2.接收来自其他服务器的投票。</h3><p>集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票、是否来自LOOKING状态的服务器。</p>
<h3 id="3-处理投票"><a href="#3-处理投票" class="headerlink" title="3.处理投票"></a>3.处理投票</h3><p>针对每个投票都按以下规则与自己的投票PK，PK后依据情况是否更新投票，再发送给其他机器。</p>
<ul>
<li>a.优先检查ZXID，ZXID较大者优先为Leader</li>
<li>b.如果ZXID相同，检查SID，SID较大者优先为Leader</li>
</ul>
<h3 id="5-统计投票"><a href="#5-统计投票" class="headerlink" title="5.统计投票"></a>5.统计投票</h3><p>每次投票后，服务器统计所有投票，判断是否有过半的机器收到相同的投票，如果某个投票达到一半的要求，则认为该投票提出者可以成为Leader。</p>
<h3 id="6-改变服务器状态"><a href="#6-改变服务器状态" class="headerlink" title="6.改变服务器状态"></a>6.改变服务器状态</h3><p>一旦确定了Leader，每个服务器都更新自己的状态，Leader变更为Leading，Follower变更为Following<br>正常情况下一旦选出一个Leader则一直会保持，除非Leader服务器宕掉，则再进行重新选举。</p>
<h2 id="服务器运行时期的Leader选举"><a href="#服务器运行时期的Leader选举" class="headerlink" title="服务器运行时期的Leader选举"></a>服务器运行时期的Leader选举</h2><h3 id="1-变更状态"><a href="#1-变更状态" class="headerlink" title="1.变更状态"></a>1.变更状态</h3><p>当Leader宕机后，余下的所非Observer的服务器都会将自己的状态变更为Looking，然后开启新的Leader选举流程。</p>
<h3 id="2-每个服务器发出一个投票。"><a href="#2-每个服务器发出一个投票。" class="headerlink" title="2.每个服务器发出一个投票。"></a>2.每个服务器发出一个投票。</h3><p>生成(SID,ZXID)信息，注意运行期间的ZXID可能是不同的，但是在投票时都会将自己投为Leader，然后发送给其他的服务器。</p>
<h3 id="3-接收来自各个服务器的投票"><a href="#3-接收来自各个服务器的投票" class="headerlink" title="3.接收来自各个服务器的投票"></a>3.接收来自各个服务器的投票</h3><p>与启动时过程相同</p>
<h3 id="4-处理投票"><a href="#4-处理投票" class="headerlink" title="4.处理投票"></a>4.处理投票</h3><p>与启动时过程相同</p>
<h3 id="5-统计投票-1"><a href="#5-统计投票-1" class="headerlink" title="5.统计投票"></a>5.统计投票</h3><p>与启动时过程相同</p>
<h3 id="6-改变服务器状态-1"><a href="#6-改变服务器状态-1" class="headerlink" title="6.改变服务器状态"></a>6.改变服务器状态</h3><p>与启动时过程相同</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="http://ningg.top/zookeeper-lesson-2-leader-election/">ZooKeeper 技术内幕：Leader 选举</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>问题收集</title>
    <url>/2020/08/01/issueGather/index/</url>
    <content><![CDATA[<h1 id="问题收集"><a href="#问题收集" class="headerlink" title="问题收集"></a>问题收集</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/Zookeeper-Leader.md">Zookeeper之Leader选举过程</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/mq-redis">redis实现mq</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/ThreadLocal/ThreadLocal.md">并发编程之ThreadLocal常用方法及源码解析</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/cloud-feign">Cloud-Feign 声明式服务调用示例</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/Spring%20Boot%20%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.md">spring boot 常用注解</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Dubbo%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE.md">Dubbo支持的协议</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Spring%E5%AE%B9%E5%99%A8.md">spring 容器介绍</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/tree/master/bean">bean生命周期</a></li>
<li>分布式事务原理及实现方式</li>
<li>zk分布式事务实现原理</li>
<li>switch字符串比较实现原理</li>
<li>java装箱拆箱、Integer源码阅读</li>
<li>jvm数据区划分</li>
<li>并发编程之线程如何共享数据</li>
<li>谈谈对java信号量的理解</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>10亿数字寻找重复数字</li>
<li>10亿数字寻找前10大数字</li>
<li>滴滴用户地图上显示附近司机该如何实现</li>
</ul>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ul>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/MySqlTransaction.md">mysql事务详解</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/Windows%E4%B8%8A%E9%83%A8%E7%BD%B2MySql.md">Windows上部署MySql</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/Centos7%E9%83%A8%E7%BD%B2mysql.md">Centos7部署mysql</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/MySql%E9%94%81.md">排它锁之行锁、间隙锁、后码锁</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/%E8%A1%A8%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.md">表索引设计原则</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/MySQL%E7%BB%84%E6%88%90%E6%A8%A1%E5%9D%97.md">mysql组成模块</a></li>
<li>mysql索引了解，常用索引，B树，B+树</li>
<li>mysql组合索引详解，注意事项</li>
</ul>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ul>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/Redis%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E6%9C%BA%E5%88%B6.md">redis数据淘汰策略</a></li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/LINUX.md">Linux命令</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/JAVA.md">Java命令</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/GIT.md">Git命令</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/issueGather/Nginx.md">Nginx命令</a></li>
</ul>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/tree/master/docker">使用 Docker 部署 Spring Boot 项目</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/Docker%E5%91%BD%E4%BB%A4.md">Docker 常用命令</a></li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Docker 部署 Spring Boot 项目</title>
    <url>/2020/03/25/issueGather/%E4%BD%BF%E7%94%A8%20Docker%20%E9%83%A8%E7%BD%B2%20Spring%20Boot%20%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="使用-Docker-部署-Spring-Boot-项目"><a href="#使用-Docker-部署-Spring-Boot-项目" class="headerlink" title="使用 Docker 部署 Spring Boot 项目"></a>使用 Docker 部署 Spring Boot 项目</h1><h2 id="Docker-介绍"><a href="#Docker-介绍" class="headerlink" title="Docker 介绍"></a>Docker 介绍</h2><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>
<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>
<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>
<h3 id="Docker-的主要用途"><a href="#Docker-的主要用途" class="headerlink" title="Docker 的主要用途"></a>Docker 的主要用途</h3><ul>
<li><p>（1）提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p>
</li>
<li><p>（2）提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p>
</li>
<li><p>（3）组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p>
</li>
</ul>
<h3 id="Docker-的安装（CentOS环境）"><a href="#Docker-的安装（CentOS环境）" class="headerlink" title="Docker 的安装（CentOS环境）"></a>Docker 的安装（CentOS环境）</h3><ul>
<li>安装命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure>
<ul>
<li>安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br><span class="line"></span><br><span class="line">#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：</span><br><span class="line">systemctl  start docker.service</span><br><span class="line">systemctl  enable docker.service</span><br></pre></td></tr></table></figure>
<ul>
<li>使用Docker 中国加速器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi  /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">#添加后：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;],</span><br><span class="line">    &quot;live-restore&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新启动docker</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>输入 docker version 返回版本信息则安装正常。</p>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install java-1.8.0-openjdk*</span><br></pre></td></tr></table></figure>
<p>配置环境变量 打开 vim /etc/profile 添加一下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>
<p>修改完成之后，使其生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<p>输入java -version 返回版本信息则安装正常。</p>
<h2 id="安装-MAVEN"><a href="#安装-MAVEN" class="headerlink" title="安装 MAVEN"></a>安装 MAVEN</h2><p>下载：<a href="https://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz">https://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 解压</span><br><span class="line">tar vxf apache-maven-3.6.3-bin.tar.gz</span><br><span class="line">## 移动</span><br><span class="line">mv apache-maven-3.6.3 /usr/local/maven3</span><br></pre></td></tr></table></figure>
<p>修改环境变量， 在/etc/profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAVEN_HOME=/usr/local/maven3</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行source /etc/profile使环境变量生效。</p>
<p>输入mvn -version 返回版本信息则安装正常。</p>
<pre><code>到止，通过docker,jdk,maven的安装，整个构建环境算配置完成了。
</code></pre><h2 id="创建-spring-boot-项目"><a href="#创建-spring-boot-项目" class="headerlink" title="创建 spring boot 项目"></a>创建 spring boot 项目</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.easy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-docker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-docker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>springboot<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Docker maven plugin --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Docker maven plugin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Dockerfile-配置"><a href="#Dockerfile-配置" class="headerlink" title="Dockerfile 配置"></a>Dockerfile 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line">EXPOSE 8282</span><br><span class="line">ADD spring-boot-docker-1.0.jar app.jar</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>Dockerfile 文件介绍，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中:</p>
<ul>
<li>FROM，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</li>
<li>VOLUME，VOLUME 指向了一个/tmp的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用/tmp作为工作目录。这个命令的效果是：在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/tmp目录</li>
<li>EXPOSE，EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li>
<li>ADD，拷贝文件并且重命名</li>
<li>ENTRYPOINT，为了缩短 Tomcat 的启动时间，添加java.security.egd的系统属性指向/dev/urandom作为 ENTRYPOINT</li>
</ul>
<h3 id="其它示例代码"><a href="#其它示例代码" class="headerlink" title="其它示例代码"></a>其它示例代码</h3><p>DockerController.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Docker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>DockerApplication.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DockerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>application.properties<br><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8282</span></span><br></pre></td></tr></table></figure></p>
<h2 id="使用-Docker-部署-Spring-Boot-项目-1"><a href="#使用-Docker-部署-Spring-Boot-项目-1" class="headerlink" title="使用 Docker 部署 Spring Boot 项目"></a>使用 Docker 部署 Spring Boot 项目</h2><p>将项目 docker 拷贝至服务器中，进入项目路径下进行打包测试。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#打包</span><br><span class="line">mvn package</span><br><span class="line">#启动</span><br><span class="line">java -jar target/spring-boot-docker-1.0.jar</span><br></pre></td></tr></table></figure>
<p>看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package docker:build</span><br></pre></td></tr></table></figure>
<p>第一次构建可能有点慢，当看到以下内容的时候表明构建成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Step 1/5 : FROM openjdk:8-jdk-alpine</span><br><span class="line"> ---&gt; a3562aa0b991</span><br><span class="line">Step 2/5 : VOLUME /tmp</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; d070c927d0a7</span><br><span class="line">Step 3/5 : EXPOSE 8282</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b16d14267527</span><br><span class="line">Step 4/5 : ADD spring-boot-docker-1.0.jar app.jar</span><br><span class="line"> ---&gt; c4ddc409b458</span><br><span class="line">Removing intermediate container c58c986e6b9a</span><br><span class="line">Step 5/5 : ENTRYPOINT java -Djava.security.egd=file:/dev/./urandom -jar /app.jar</span><br><span class="line"> ---&gt; Running in d2b61fddd616</span><br><span class="line"> ---&gt; 13c600d3f625</span><br><span class="line">Removing intermediate container d2b61fddd616</span><br><span class="line">Successfully built 13c600d3f625</span><br><span class="line">[INFO] Built springboot/spring-boot-docker</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 7.273 s</span><br><span class="line">[INFO] Finished at: 2020-03-25T10:05:04+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用docker images命令查看构建好的镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker images</span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">springboot/spring-boot-docker   latest              13c600d3f625        18 minutes ago      122 MB</span><br><span class="line">docker.io/openjdk               8-jdk-alpine        a3562aa0b991        10 months ago       105 MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>springboot/spring-boot-docker 就是我们构建好的镜像，下一步就是运行该镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 8282:8282 -t springboot/spring-boot-docker</span><br></pre></td></tr></table></figure>
<p>启动完成之后我们使用docker ps查看正在运行的镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker ps</span><br><span class="line">CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">a626c3dbdb1b        springboot/spring-boot-docker   &quot;java -Djava.secur...&quot;   34 seconds ago      Up 34 seconds       0.0.0.0:8282-&gt;8282/tcp   suspicious_murdock</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到我们构建的容器正在在运行，访问浏览器：<a href="http://192.168.0.x:8282/,返回">http://192.168.0.x:8282/,返回</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Docker!</span><br></pre></td></tr></table></figure>
<pre><code>说明使用 Docker 部署 Spring Boot 项目成功！
</code></pre><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/docker">示例代码-github</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></li>
<li><a href="http://www.ityouknow.com/springboot/2018/03/19/spring-boot-docker.html">Spring Boot 2 (四)：使用 Docker 部署 Spring Boot</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 表索引设计原则</title>
    <url>/2019/11/29/issueGather/%E8%A1%A8%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="MySql-表索引设计原则"><a href="#MySql-表索引设计原则" class="headerlink" title="MySql 表索引设计原则"></a>MySql 表索引设计原则</h1><h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><ul>
<li><p>1.加快数据的检索速度，这是创建索引的最主要的原因;</p>
</li>
<li><p>2.通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性;</p>
</li>
<li><p>3.加速表和表之间的连接;</p>
</li>
<li><p>4.在使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。</p>
</li>
</ul>
<h2 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h2><ul>
<li><p>1.创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</p>
</li>
<li><p>2.索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p>
</li>
<li><p>3.当对表中的数据进行增加、删除和修改的时候，索引也要同步动态的维护，这样就降低了数据的增删改速度。</p>
</li>
</ul>
<p>所以单表数据太少，索引反而会影响速度；更新非常频繁的数据不适宜建索引</p>
<h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><p>根据数据库的功能，可以在数据库设计器中创建三种索引</p>
<ul>
<li>唯一索引：唯一索引是不允许其中任何两行具有相同索引值的索引</li>
<li>主键索引：表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时， 它允许对数据的快速访问</li>
<li>聚集索引：表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表 只能包含一个聚集索引</li>
</ul>
<blockquote>
<p>选择索引的最终目的是为了使查询的速度变快。下面给出的原则是最基本的准则，但不能拘泥于这些准则，应该根据应用的实际情况进行分析和判断，选择最合适的索引方式。</p>
</blockquote>
<h3 id="1-索引最左匹配原则"><a href="#1-索引最左匹配原则" class="headerlink" title="1.索引最左匹配原则"></a>1.索引最左匹配原则</h3><ul>
<li>索引可以简单如一个列(a)，也可以复杂如多个列(a, b, c, d)，即联合索引。</li>
<li>如果是联合索引，那么key也由多个列组成，同时，索引只能用于查找key是否存在（相等），遇到范围查询(&gt;、&lt;、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找。因此，列的排列顺序决定了可命中索引的列数。</li>
</ul>
<p>例子：</p>
<p>如有索引(a, b, c, d)，查询条件a = 1 and b = 2 and c &gt; 3 and d = 4，则会在每个节点依次命中a、b、c，无法命中d。(很简单：索引命中只能是相等的情况，不能是范围匹配)</p>
<blockquote>
<p>明白最左匹配原则，对我们设计索引和编写高效SQL语句非常有帮助</p>
</blockquote>
<h3 id="2-为经常需要排序、分组操作的字段建立索引"><a href="#2-为经常需要排序、分组操作的字段建立索引" class="headerlink" title="2.为经常需要排序、分组操作的字段建立索引"></a>2.为经常需要排序、分组操作的字段建立索引</h3><p>经常需要ORDER BY、GROUP BY、DISTINCT等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p>
<blockquote>
<p>分组字段或者排序字段应该创建索引</p>
</blockquote>
<h3 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3.为常作为查询条件的字段建立索引"></a>3.为常作为查询条件的字段建立索引</h3><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p>
<blockquote>
<p>Where 子句中经常使用的字段应该创建索引</p>
</blockquote>
<h3 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4.限制索引的数目"></a>4.限制索引的数目</h3><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p>
<h3 id="5-尽量选择区分度高的列作为索引"><a href="#5-尽量选择区分度高的列作为索引" class="headerlink" title="5.尽量选择区分度高的列作为索引"></a>5.尽量选择区分度高的列作为索引</h3><p>尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p>
<h3 id="6-索引列不能参与计算"><a href="#6-索引列不能参与计算" class="headerlink" title="6.索引列不能参与计算"></a>6.索引列不能参与计算</h3><p>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2019-12-02’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p>
<blockquote>
<p>即索引列不能带函数，否则会导致索引失效</p>
</blockquote>
<h3 id="7-扩展索引"><a href="#7-扩展索引" class="headerlink" title="7.扩展索引"></a>7.扩展索引</h3><p>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p>
<h3 id="8-条件带like-注意事项"><a href="#8-条件带like-注意事项" class="headerlink" title="8.条件带like 注意事项"></a>8.条件带like 注意事项</h3><p>like 模糊查询中，右模糊查询(abc%)会使用索引，而(%abc)和(%abc%)会放弃索引而使用全表扫描</p>
<h3 id="9-尽量使用数据量少的索引"><a href="#9-尽量使用数据量少的索引" class="headerlink" title="9.尽量使用数据量少的索引"></a>9.尽量使用数据量少的索引</h3><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间要比对CHAR(10)类型的字段需要的时间要多。</p>
<h3 id="10-尽量使用前缀来索引"><a href="#10-尽量使用前缀来索引" class="headerlink" title="10.尽量使用前缀来索引"></a>10.尽量使用前缀来索引</h3><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p>
<h3 id="11-删除不再使用或者很少使用的索引"><a href="#11-删除不再使用或者很少使用的索引" class="headerlink" title="11.删除不再使用或者很少使用的索引"></a>11.删除不再使用或者很少使用的索引</h3><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p>
<h3 id="12-和in可以乱序。"><a href="#12-和in可以乱序。" class="headerlink" title="12.=和in可以乱序。"></a>12.=和in可以乱序。</h3><p>比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p>
<h3 id="13-联合查询"><a href="#13-联合查询" class="headerlink" title="13.联合查询"></a>13.联合查询</h3><p>联合查询，子查询等多表操作时关联字段要加索引</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/index.md">Java问题收集</a></li>
<li><a href="https://github.com/smltq/blog/blob/master/source/_posts/issueGather/%E8%A1%A8%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.md">原文地址</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 二叉树的层次遍历</title>
    <url>/2019/11/22/leetcode/Sub102/</url>
    <content><![CDATA[<h1 id="LeetCode-二叉树的层次遍历"><a href="#LeetCode-二叉树的层次遍历" class="headerlink" title="LeetCode 二叉树的层次遍历"></a>LeetCode 二叉树的层次遍历</h1><p>第102题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line">给定二叉树: [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line">返回其层次遍历结果：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/binary-tree-level-order-traversal</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="如何遍历一棵树"><a href="#如何遍历一棵树" class="headerlink" title="如何遍历一棵树"></a>如何遍历一棵树</h2><p>有两种通用的遍历树的策略：</p>
<ul>
<li>深度优先搜索（DFS）</li>
</ul>
<p>在这个策略中，我们采用深度作为优先级，以便从跟开始一直到达某个确定的叶子，然后再返回根到达另一个分支。</p>
<p>深度优先搜索策略又可以根据根节点、左孩子和右孩子的相对顺序被细分为先序遍历，中序遍历和后序遍历。</p>
<ul>
<li>宽度优先搜索（BFS）</li>
</ul>
<p>我们按照高度顺序一层一层的访问整棵树，高层次的节点将会比低层次的节点先被访问到。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法-1：迭代-队列"><a href="#方法-1：迭代-队列" class="headerlink" title="方法 1：迭代+队列"></a>方法 1：迭代+队列</h3><p>我们将树上顶点按照层次依次放入队列结构中，队列中元素满足 FIFO（先进先出）的原则。使用 Queue 接口中的 LinkedList实现。</p>
<p>算法实现如下：</p>
<ul>
<li>初始化队列只包含一个节点 root。</li>
<li>初始一个List变量result，用来做返回结果<br>当队列非空的时候，循环开始：</li>
<li>计算当前层有多少个元素：等于队列的长度</li>
<li>初始一个List变量subResult，用来存当前层的节点值</li>
<li>将这些元素从队列中弹出，将他们的值加入subResult列表中</li>
<li>将他们的孩子节点作为下一层压入队列中</li>
<li>进入下一层，将当前层subResult add到result中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广搜+队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution102_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> BFS(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; BFS(TreeNode root) &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            List&lt;Integer&gt; subResult = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                subResult.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(subResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法-2：递归"><a href="#方法-2：递归" class="headerlink" title="方法 2：递归"></a>方法 2：递归</h3><p>首先确认树非空，然后调用递归函数 DFS(node,result,level)，参数是当前节点、返回结果列表、节点的层次。</p>
<p>算法实现如下：</p>
<ul>
<li>result列表的长度小于level，为result add一个新列表</li>
<li>为当前层的result列表add节点值，即result.get(level - 1).add(node.val)</li>
<li>如果有左孩子，调用DFS(node.left, result, level + 1)，进入递归</li>
<li>如果有右孩子，调用DFS(node.right, result, level + 1)，进入递归</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深搜+递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution102_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        DFS(root, result, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode node, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.size() &lt; level) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        result.get(level - <span class="number">1</span>).add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DFS(node.left, result, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DFS(node.right, result, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub102</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        root.left = <span class="keyword">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line">        root.right = <span class="keyword">new</span> TreeNode(<span class="number">20</span>);</span><br><span class="line">        root.right.left = <span class="keyword">new</span> TreeNode(<span class="number">15</span>);</span><br><span class="line">        root.right.right = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        Solution102_2 solution = <span class="keyword">new</span> Solution102_2();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = solution.levelOrder(root);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; subList : list) &#123;</span><br><span class="line">            System.out.println(subList.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 广搜+队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution102_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> BFS(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; BFS(TreeNode root) &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            List&lt;Integer&gt; subResult = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                subResult.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(subResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深搜+递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution102_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        DFS(root, result, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode node, List&lt;List&lt;Integer&gt;&gt; result, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.size() &lt; level) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        result.get(level - <span class="number">1</span>).add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DFS(node.left, result, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DFS(node.right, result, level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub102.java">源码地址</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub102.md">文章地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode">LeetCode 题解目录</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 二叉树的锯齿形层次遍历</title>
    <url>/2019/11/22/leetcode/Sub103/</url>
    <content><![CDATA[<h1 id="LeetCode-二叉树的锯齿形层次遍历"><a href="#LeetCode-二叉树的锯齿形层次遍历" class="headerlink" title="LeetCode 二叉树的锯齿形层次遍历"></a>LeetCode 二叉树的锯齿形层次遍历</h1><p>第103题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">给定二叉树 [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line">返回锯齿形层次遍历如下：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">20</span>,<span class="number">9</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>基于<a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub103.md">二叉树层序遍历</a>改一点代码即可</p>
<ul>
<li>双端队列（deque，全名double-ended queue）是一种具有队列和栈性质的抽象数据类型。双端队列中的元素可以从两端弹出，插入和删除操作限定在队列的两边进行。</li>
<li>本题和普通的层序遍历区别在于如何正确的选取加入子节点的顺序以及先后.</li>
<li>利用双端队列，左进的时候，右出；右进的时候，左出。正好满足一层正序遍历，一层逆序遍历。</li>
</ul>
<p>代码实现<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution103_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BFS(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; BFS(TreeNode root) &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        deque.addLast(root);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> reverse = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = deque.size();</span><br><span class="line">            List&lt;Integer&gt; subResult = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node;</span><br><span class="line">                <span class="keyword">if</span> (reverse) &#123;</span><br><span class="line">                    <span class="comment">//头出</span></span><br><span class="line">                    node = deque.pollFirst();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//尾进</span></span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addLast(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addLast(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//尾出</span></span><br><span class="line">                    node = deque.pollLast();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//头进</span></span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addFirst(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addFirst(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                subResult.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(subResult);</span><br><span class="line">            reverse = !reverse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub103</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        root.left = <span class="keyword">new</span> TreeNode(<span class="number">9</span>);</span><br><span class="line">        root.right = <span class="keyword">new</span> TreeNode(<span class="number">20</span>);</span><br><span class="line">        root.right.left = <span class="keyword">new</span> TreeNode(<span class="number">15</span>);</span><br><span class="line">        root.right.right = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        TreeNode root = new TreeNode(1);</span></span><br><span class="line"><span class="comment">//        root.left = new TreeNode(2);</span></span><br><span class="line"><span class="comment">//        root.right = new TreeNode(3);</span></span><br><span class="line"><span class="comment">//        root.left.left = new TreeNode(4);</span></span><br><span class="line"><span class="comment">//        root.right.right = new TreeNode(5);</span></span><br><span class="line"></span><br><span class="line">        Solution103_1 solution = <span class="keyword">new</span> Solution103_1();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = solution.zigzagLevelOrder(root);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; subList : list) &#123;</span><br><span class="line">            System.out.println(subList.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution103_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BFS(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; BFS(TreeNode root) &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        deque.addLast(root);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> reverse = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = deque.size();</span><br><span class="line">            List&lt;Integer&gt; subResult = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node;</span><br><span class="line">                <span class="keyword">if</span> (reverse) &#123;</span><br><span class="line">                    <span class="comment">//头出</span></span><br><span class="line">                    node = deque.pollFirst();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//尾进</span></span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addLast(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addLast(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//尾出</span></span><br><span class="line">                    node = deque.pollLast();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//头进</span></span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addFirst(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deque.addFirst(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                subResult.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(subResult);</span><br><span class="line">            reverse = !reverse;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub103.java">源码地址</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub103.md">文章地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode">LeetCode 题解目录</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树</title>
    <url>/2019/11/22/leetcode/Sub108/</url>
    <content><![CDATA[<h1 id="LeetCode-将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树"><a href="#LeetCode-将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树" class="headerlink" title="LeetCode 将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树"></a>LeetCode 将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树</h1><p>第108题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</span><br><span class="line"></span><br><span class="line">本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 <span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">给定有序数组: [-<span class="number">10</span>,-<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[<span class="number">0</span>,-<span class="number">3</span>,<span class="number">9</span>,-<span class="number">10</span>,<span class="keyword">null</span>,<span class="number">5</span>]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">     / \</span><br><span class="line">   -<span class="number">3</span>   <span class="number">9</span></span><br><span class="line">   /   /</span><br><span class="line"> -<span class="number">10</span>  <span class="number">5</span></span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>从定义我们知道，BST的中序遍历为一个递增序列，给定的数组其实就是中序遍历结果</li>
<li>取有序数组的中间值做根，左边部分做左树，右边部分做右树如此循环迭代去二分就可还原这棵BST树</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-二分-递归实现"><a href="#1-二分-递归实现" class="headerlink" title="1.二分+递归实现"></a>1.二分+递归实现</h3><p>每次取数组的中间值，作为二分搜索树的中间节点，依次递归下去即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二分+递归实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution108_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> convertToBST(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode <span class="title">convertToBST</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//取中值</span></span><br><span class="line">        <span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        <span class="comment">//左叶子树</span></span><br><span class="line">        root.left = convertToBST(nums, begin, mid - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//右叶子树</span></span><br><span class="line">        root.right = convertToBST(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-利用堆栈，去递归化实现"><a href="#2-利用堆栈，去递归化实现" class="headerlink" title="2.利用堆栈，去递归化实现"></a>2.利用堆栈，去递归化实现</h3><ul>
<li>定义一个栈，用来存将要处理数组的左索引和右索引值</li>
<li>定义另一个栈，用来存树的节点，因为节点是先初始化，后更新节点值的迭代过程。所以需要借用堆栈先建好节点，建立好关系。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution108_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//数组最大索引值入栈</span></span><br><span class="line">        stack.add(nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//数组最小索引值入栈</span></span><br><span class="line">        stack.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; tree = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//随便new树节点入栈</span></span><br><span class="line">        tree.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> right = stack.pop();</span><br><span class="line">            <span class="comment">//求出中间节点索引值</span></span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            TreeNode node = tree.pop();</span><br><span class="line">            <span class="comment">//更新根节点值</span></span><br><span class="line">            node.val = nums[mid];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算左叶子节点最大最小索引值</span></span><br><span class="line">            <span class="keyword">int</span> r = mid - <span class="number">1</span>, l = left;</span><br><span class="line">            <span class="comment">//如果存在左叶子节点</span></span><br><span class="line">            <span class="keyword">if</span> (l &lt;= r) &#123;</span><br><span class="line">                node.left = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//随便new个树节点入栈</span></span><br><span class="line">                tree.add(node.left);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//对应右索引值入栈</span></span><br><span class="line">                stack.push(r);</span><br><span class="line">                <span class="comment">//对应左索引值入栈</span></span><br><span class="line">                stack.push(l);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算右节点最大最小索引值</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            r = right;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= r) &#123;</span><br><span class="line">                node.right = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//随便new个树节点入栈</span></span><br><span class="line">                tree.add(node.right);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//对应右索引值入栈</span></span><br><span class="line">                stack.push(r);</span><br><span class="line">                <span class="comment">//对应左索引值入栈</span></span><br><span class="line">                stack.add(l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不出所料，通过提交代码发现堆栈实现会比递归执行效率慢很多,这是因为：</p>
<ul>
<li>堆栈实现需要频繁的push(入栈)、pop(出栈)操作导致性能下降</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub108.java">示例源码</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub108.md">原文地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo">Spring Boot、Spring Cloud 示例学习</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 按序打印</title>
    <url>/2019/11/22/leetcode/Sub1114/</url>
    <content><![CDATA[<h1 id="LeetCode-按序打印"><a href="#LeetCode-按序打印" class="headerlink" title="LeetCode 按序打印"></a>LeetCode 按序打印</h1><p>第1114题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们提供了一个类：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123; print(<span class="string">&quot;one&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123; print(<span class="string">&quot;two&quot;</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">three</span><span class="params">()</span> </span>&#123; print(<span class="string">&quot;three&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line">三个不同的线程将会共用一个 Foo 实例。</span><br><span class="line"></span><br><span class="line">线程 A 将会调用 one() 方法</span><br><span class="line">线程 B 将会调用 two() 方法</span><br><span class="line">线程 C 将会调用 three() 方法</span><br><span class="line">请设计修改程序，以确保 two() 方法在 one() 方法之后被执行，three() 方法在 two() 方法之后被执行。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="string">&quot;onetwothree&quot;</span></span><br><span class="line">解释:</span><br><span class="line">有三个线程会被异步启动。</span><br><span class="line">输入 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。</span><br><span class="line">正确的输出是 <span class="string">&quot;onetwothree&quot;</span>。</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="string">&quot;onetwothree&quot;</span></span><br><span class="line">解释:</span><br><span class="line">输入 [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 three() 方法，线程 C 将会调用 two() 方法。</span><br><span class="line">正确的输出是 <span class="string">&quot;onetwothree&quot;</span>。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line"></span><br><span class="line">尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。</span><br><span class="line"></span><br><span class="line">你看到的输入格式主要是为了确保测试的全面性。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/print-in-order</span></span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>1.定义一个flag信号量及对象锁lock</li>
<li>2.定义三个方法first，second，third用来分别执行A,B,C三个线程，并且在run()前增加限制，执行后更新flag值。比如：first执行条件为flag=0（即C线程执行完），A线程执行完后，flag设置为1表示可以执行B线程了</li>
<li>3.通过以上设置，保存了A,B,C线程按顺序执行，这里题目要求从A线程要第一个执行，所以要把flag信号量初始值为0</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub1114</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//测试用例字符串</span></span><br><span class="line">        <span class="keyword">int</span>[] runOrder = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成结果字符串</span></span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        Runnable one = () -&gt; result.append(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        Runnable two = () -&gt; result.append(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        Runnable three = () -&gt; result.append(<span class="string">&quot;three&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">        Thread threads[] = <span class="keyword">new</span> Thread[runOrder.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; runOrder.length; ++i) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (runOrder[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                thread = <span class="keyword">new</span> FirstThread(foo, one);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (runOrder[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                thread = <span class="keyword">new</span> SecondThread(foo, two);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (runOrder[i] == <span class="number">3</span>) &#123;</span><br><span class="line">                thread = <span class="keyword">new</span> ThirdThread(foo, three);</span><br><span class="line">            &#125;</span><br><span class="line">            thread.start();</span><br><span class="line">            threads[i] = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等侍所有线程执行完</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果串</span></span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Foo foo;</span><br><span class="line">    Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstThread</span><span class="params">(Foo h2o, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = h2o;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo.first(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Foo foo;</span><br><span class="line">    Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondThread</span><span class="params">(Foo h2o, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = h2o;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo.second(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThirdThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Foo foo;</span><br><span class="line">    Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThirdThread</span><span class="params">(Foo h2o, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = h2o;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo.third(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//信号量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义Object对象为锁</span></span><br><span class="line">    <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">(Runnable printFirst)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">//如果flag不为0则让first线程等待，while循环控制first线程如果不满住条件就一直在while代码块中，防止出现中途跳入，执行下面的代码，其余线程while循环同理</span></span><br><span class="line">            <span class="keyword">while</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            printFirst.run();</span><br><span class="line">            <span class="comment">//定义成员变量为 1</span></span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//唤醒其余所有的线程</span></span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Runnable printSecond)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">//如果成员变量不为1则让二号等待</span></span><br><span class="line">            <span class="keyword">while</span> (flag != <span class="number">1</span>) &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            printSecond.run();</span><br><span class="line">            <span class="comment">//如果成员变量为 1 ，则代表first线程刚执行完，所以执行second，并且改变成员变量为 2</span></span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//唤醒其余所有的线程</span></span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">third</span><span class="params">(Runnable printThird)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="comment">//如果flag不等于2 则一直处于等待的状态</span></span><br><span class="line">            <span class="keyword">while</span> (flag != <span class="number">2</span>) &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果成员变量为 2 ，则代表second线程刚执行完，所以执行third，并且改变成员变量为 0</span></span><br><span class="line">            printThird.run();</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub1114.java">示例源码</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub1114.md">原文地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo">Spring Boot、Spring Cloud 示例学习</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 交替打印FooBar</title>
    <url>/2019/11/22/leetcode/Sub1115/</url>
    <content><![CDATA[<h1 id="LeetCode-交替打印FooBar"><a href="#LeetCode-交替打印FooBar" class="headerlink" title="LeetCode 交替打印FooBar"></a>LeetCode 交替打印FooBar</h1><p>第1115题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">我们提供一个类：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooBar</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      print(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      print(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">两个不同的线程将会共用一个 FooBar 实例。其中一个线程将会调用 foo() 方法，另一个线程将会调用 bar() 方法。</span><br><span class="line"></span><br><span class="line">请设计修改程序，以确保 <span class="string">&quot;foobar&quot;</span> 被输出 n 次。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: n = <span class="number">1</span></span><br><span class="line">输出: <span class="string">&quot;foobar&quot;</span></span><br><span class="line">解释: 这里有两个线程被异步启动。其中一个调用 foo() 方法, 另一个调用 bar() 方法，<span class="string">&quot;foobar&quot;</span> 将被输出一次。</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: n = <span class="number">2</span></span><br><span class="line">输出: <span class="string">&quot;foobarfoobar&quot;</span></span><br><span class="line">解释: <span class="string">&quot;foobar&quot;</span> 将被输出两次。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/print-foobar-alternately</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>1.定义一个flag信号量及对象锁lock</li>
<li>2.定义信号量flag及锁对象lock，分别给foo和bar方法的循环内加锁</li>
<li>3.当flag为0时，执行printFoo.run()；flag为1时执行printBar.run()；调用run后，分别更新flag值，使它能够交替等待</li>
<li>4.通过以上设置，A、B线程能够交替执行，否则循环等待了。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub1115</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//测试用例字符串</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成结果字符串</span></span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        Runnable foo = () -&gt; result.append(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        Runnable bar = () -&gt; result.append(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FooBar fooBar = <span class="keyword">new</span> FooBar(n);</span><br><span class="line"></span><br><span class="line">        Thread threads[] = <span class="keyword">new</span> Thread[n];</span><br><span class="line">        Thread fooThread = <span class="keyword">new</span> FooThread(fooBar, foo);</span><br><span class="line">        Thread barThread = <span class="keyword">new</span> BarThread(fooBar, bar);</span><br><span class="line"></span><br><span class="line">        fooThread.start();</span><br><span class="line">        barThread.start();</span><br><span class="line"></span><br><span class="line">        threads[<span class="number">0</span>] = fooThread;</span><br><span class="line">        threads[<span class="number">1</span>] = barThread;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等侍所有线程执行完</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果串</span></span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    FooBar fooBar;</span><br><span class="line">    Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooThread</span><span class="params">(FooBar fooBar, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fooBar = fooBar;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fooBar.foo(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    FooBar fooBar;</span><br><span class="line">    Runnable runnable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BarThread</span><span class="params">(FooBar fooBar, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fooBar = fooBar;</span><br><span class="line">        <span class="keyword">this</span>.runnable = runnable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fooBar.bar(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooBar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Object对象为锁</span></span><br><span class="line">    <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooBar</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Runnable printFoo)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">while</span> (flag != <span class="number">0</span>) &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                printFoo.run();</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                lock.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(Runnable printBar)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">while</span> (flag != <span class="number">1</span>) &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                printBar.run();</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                lock.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub1115.java">示例源码</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub1115.md">原文地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo">Spring Boot、Spring Cloud 示例学习</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode H2O 生成</title>
    <url>/2019/11/22/leetcode/Sub1117/</url>
    <content><![CDATA[<h1 id="LeetCode-H2O-生成"><a href="#LeetCode-H2O-生成" class="headerlink" title="LeetCode H2O 生成"></a>LeetCode H2O 生成</h1><p>第1117题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">现在有两种线程，氢 oxygen 和氧 hydrogen，你的目标是组织这两种线程来产生水分子。</span><br><span class="line"></span><br><span class="line">存在一个屏障（barrier）使得每个线程必须等候直到一个完整水分子能够被产生出来。</span><br><span class="line"></span><br><span class="line">氢和氧线程会被分别给予 releaseHydrogen 和 releaseOxygen 方法来允许它们突破屏障。</span><br><span class="line"></span><br><span class="line">这些线程应该三三成组突破屏障并能立即组合产生一个水分子。</span><br><span class="line"></span><br><span class="line">你必须保证产生一个水分子所需线程的结合必须发生在下一个水分子产生之前。</span><br><span class="line"></span><br><span class="line">换句话说:</span><br><span class="line"></span><br><span class="line">如果一个氧线程到达屏障时没有氢线程到达，它必须等候直到两个氢线程到达。</span><br><span class="line">如果一个氢线程到达屏障时没有其它线程到达，它必须等候直到一个氧线程和另一个氢线程到达。</span><br><span class="line">书写满足这些限制条件的氢、氧线程同步代码。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;HOH&quot;</span></span><br><span class="line">输出: <span class="string">&quot;HHO&quot;</span></span><br><span class="line">解释: <span class="string">&quot;HOH&quot;</span> 和 <span class="string">&quot;OHH&quot;</span> 依然都是有效解。</span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;OOHHHH&quot;</span></span><br><span class="line">输出: <span class="string">&quot;HHOHHO&quot;</span></span><br><span class="line">解释: <span class="string">&quot;HOHHHO&quot;</span>, <span class="string">&quot;OHHHHO&quot;</span>, <span class="string">&quot;HHOHOH&quot;</span>, <span class="string">&quot;HOHHOH&quot;</span>, <span class="string">&quot;OHHHOH&quot;</span>, <span class="string">&quot;HHOOHH&quot;</span>, <span class="string">&quot;HOHOHH&quot;</span> 和 <span class="string">&quot;OHHOHH&quot;</span> 依然都是有效解。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">限制条件:</span><br><span class="line"></span><br><span class="line">输入字符串的总长将会是 3n, <span class="number">1</span> ≤ n ≤ <span class="number">50</span>；</span><br><span class="line">输入字符串中的 “H” 总数将会是 2n；</span><br><span class="line">输入字符串中的 “O” 总数将会是 n。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/building-h2o</span></span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>1.设定一个h信息号</li>
<li>2.每生成一个h，当h等于2的时候则进入等待o。否则生成氢气并且h自加1。</li>
<li>3.每生成一个o，当h小于2的时候则进入等侍h。否则生成o并且h清0，重新开始生成一个水份子</li>
<li>4.注意Runnable和Thread的区别，实现了Runnable接口，无法启动线程，必须依托其他类或线程</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub1117</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//测试用例字符串</span></span><br><span class="line">        String test = <span class="string">&quot;HOHOHHOOHOHHHHHOHHHOH&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成结果字符串</span></span><br><span class="line">        StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意：创建的Runnable任务，无法启动线程，必须依托其他类或线程启动</span></span><br><span class="line">        <span class="comment">//创建生成氧气任务</span></span><br><span class="line">        Runnable releaseHydrogen = () -&gt; result.append(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建生成氧气任务</span></span><br><span class="line">        Runnable releaseOxygen = () -&gt; result.append(<span class="string">&quot;O&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存线程数组</span></span><br><span class="line">        Thread threads[] = <span class="keyword">new</span> Thread[test.length()];</span><br><span class="line"></span><br><span class="line">        H2O h2o = <span class="keyword">new</span> H2O();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; test.length(); ++i) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//根据获得的字符调用相应的氧气或氢气线程</span></span><br><span class="line">            <span class="keyword">if</span> (test.charAt(i) == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                thread = <span class="keyword">new</span> OGenerator(h2o, releaseOxygen);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (test.charAt(i) == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">                thread = <span class="keyword">new</span> HGenerator(h2o, releaseHydrogen);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//开始线程</span></span><br><span class="line">            thread.start();</span><br><span class="line">            <span class="comment">//保存到线程数组</span></span><br><span class="line">            threads[i] = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等侍所有线程执行完</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果串</span></span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//氢气生成线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HGenerator</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    H2O h2o;</span><br><span class="line">    Runnable releaseHydrogen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HGenerator</span><span class="params">(H2O h2o, Runnable releaseHydrogen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h2o = h2o;</span><br><span class="line">        <span class="keyword">this</span>.releaseHydrogen = releaseHydrogen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h2o.hydrogen(releaseHydrogen);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//氧气生成线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OGenerator</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    H2O h2o;</span><br><span class="line">    Runnable releaseOxygen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OGenerator</span><span class="params">(H2O h2o, Runnable releaseOxygen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h2o = h2o;</span><br><span class="line">        <span class="keyword">this</span>.releaseOxygen = releaseOxygen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            h2o.oxygen(releaseOxygen);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H2O</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">H2O</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">hydrogen</span><span class="params">(Runnable releaseHydrogen)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (h == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        releaseHydrogen.run();</span><br><span class="line">        ++h;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">oxygen</span><span class="params">(Runnable releaseOxygen)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        releaseOxygen.run();</span><br><span class="line">        h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub1117.java">示例源码</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub1117.md">原文地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo">Spring Boot、Spring Cloud 示例学习</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>4.寻找两个有序数组的中位数</title>
    <url>/2020/01/14/leetcode/Sub4/</url>
    <content><![CDATA[<h1 id="LeetCode-寻找两个有序数组的中位数"><a href="#LeetCode-寻找两个有序数组的中位数" class="headerlink" title="LeetCode 寻找两个有序数组的中位数"></a>LeetCode 寻找两个有序数组的中位数</h1><p>第4题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</span><br><span class="line"></span><br><span class="line">请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</span><br><span class="line"></span><br><span class="line">你可以假设 nums1 和 nums2 不会同时为空。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 <span class="number">2.0</span></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/median-of-two-sorted-arrays</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="中位数定义"><a href="#中位数定义" class="headerlink" title="中位数定义"></a>中位数定义</h2><blockquote>
<p>将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。</p>
</blockquote>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>将数组进行切。</p>
<ul>
<li><p>长度为 m 的数组，有 0 到 m 总共 m + 1 个位置可以切。</p>
</li>
<li><p>把数组 A 和数组 B 分别在 i 和 j 进行切割。</p>
</li>
<li><p>将 i 的左边和 j 的左边组合成「左半部分」，将 i 的右边和 j 的右边组合成「右半部分」。</p>
</li>
</ul>
<h3 id="当-A-数组和-B-数组的总长度是偶数时，如果我们能够保证"><a href="#当-A-数组和-B-数组的总长度是偶数时，如果我们能够保证" class="headerlink" title="当 A 数组和 B 数组的总长度是偶数时，如果我们能够保证"></a>当 A 数组和 B 数组的总长度是偶数时，如果我们能够保证</h3><ul>
<li><p>左半部分的长度等于右半部分 $i+j=m-i+n-j$, 也就是 $j=(m+n)/2-i$</p>
</li>
<li><p>左半部分最大的值小于等于右半部分最小的值 $max(A[i-1],B[j-1])&lt;=min(A[i],B[j])$</p>
</li>
</ul>
<p>那么，中位数就可以表示如下</p>
<p>$(左半部分最大值+右半部分最小值)/2$==&gt;$(max(A[i-1],B[j-1])+min(A[i],B[j]))/2$</p>
<h3 id="当-A-数组和-B-数组的总长度是奇数时，如果我们能够保证"><a href="#当-A-数组和-B-数组的总长度是奇数时，如果我们能够保证" class="headerlink" title="当 A 数组和 B 数组的总长度是奇数时，如果我们能够保证"></a>当 A 数组和 B 数组的总长度是奇数时，如果我们能够保证</h3><ul>
<li><p>左半部分的长度比右半部分大1，即$i+j=m-i+n-j+1$ 也就是 $j=(m+n+1)/2-i$</p>
</li>
<li><p>左半部分最大的值小于等于右半部分最小的值 $max(A[i-1],B[j-1]) &lt;=min(A[i],B[j])$</p>
</li>
</ul>
<p>那么，中位数就是</p>
<p>左半部分最大值，也就是左半部比右半部分多出的那一个数==&gt;$max(A[i-1],B[j-1])$</p>
<h3 id="对以上条件进行分析"><a href="#对以上条件进行分析" class="headerlink" title="对以上条件进行分析"></a>对以上条件进行分析</h3><h4 id="第一个条件"><a href="#第一个条件" class="headerlink" title="第一个条件"></a>第一个条件</h4><p>我们其实可以合并为 $j=(m+n+1)/2-i$，因为如果$m+n$ 是偶数，由于我们取的是 int 值，所以加 1 也不会影响结果。当然，由于 $0&lt;=i&lt;=m$，为了保证 $0&lt;=j&lt;=n$，我们必须保证 $m&lt;=n$。</p>
<ul>
<li><p>$m≤n,i<m,j=(m+n+1)/2−i≥(m+m+1)/2−i>(m+m+1)/2−m=0$</p>
</li>
<li><p>$m≤n,i&gt;0,j=(m+n+1)/2−i≤(n+n+1)/2−i&lt;(n+n+1)/2=n$</p>
</li>
</ul>
<p>最后一步由于是 int 间的运算，所以 $1/2=0$</p>
<h4 id="第二个条件"><a href="#第二个条件" class="headerlink" title="第二个条件"></a>第二个条件</h4><p>奇数和偶数的情况是一样的，我们进一步分析。</p>
<p>为了保证 $max(A[i-1],B[j-1])&lt;=min(A[i],B[j])$，因为 A 数组和 B 数组是有序的，所以 $A[i-1]&lt;=A[i]，B[i-1]&lt;=B[i] 这是一定的，所以我们只需要保证 $B[j-1]&lt;=A[i]和A[i-1]&lt;=B[j]$，即我们要分两种情况讨论：</p>
<ul>
<li><p>$B[j-1]&gt;A[i]$，并且为了不越界，要保证 $j!= 0，i!=m$，此时很明显，我们需要增加 i ，为了数量的平衡还要减少 j ，幸运的是 $j=(m+n+1)/2-i$，i 增大，j 自然会减少。</p>
</li>
<li><p>$A[i-1]&gt;B[j]$，并且为了不越界，要保证 $i!=0，j!=n$，此时和上边的情况相反，我们要减少 i ，增大 j 。</p>
</li>
</ul>
<p>上边两种情况，我们把边界都排除了，需要单独讨论。</p>
<ul>
<li><p>当 i=0, 或者 j=0，也就是切在了最前边。此时左半部分当 j = 0 时，最大的值就是 $A[i-1]$ ；当 i=0 时 最大的值就是 $B[j-1]$。右半部分最小值和之前一样。</p>
</li>
<li><p>当 i = m 或者 j = n，也就是切在了最后边。此时左半部分最大值和之前一样。右半部分当 $j=n$ 时，最小值就是 $A[i]$；当 i = m 时，最小值就是$B[j]$。</p>
</li>
</ul>
<p>所有的思路都理清了，最后一个问题，增加 i 的方式。当然用二分了。初始化 i 为中间的值，然后减半找中间的，减半找中间的，减半找中间的直到答案。</p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = A.length;</span><br><span class="line">        <span class="keyword">int</span> n = B.length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123; </span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(B,A); <span class="comment">// 保证 m &lt;= n</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> iMin = <span class="number">0</span>, iMax = m;</span><br><span class="line">        <span class="keyword">while</span> (iMin &lt;= iMax) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = (iMin + iMax) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = (m + n + <span class="number">1</span>) / <span class="number">2</span> - i;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span> &amp;&amp; i != m &amp;&amp; B[j-<span class="number">1</span>] &gt; A[i])&#123; <span class="comment">// i 需要增大</span></span><br><span class="line">                iMin = i + <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; j != n &amp;&amp; A[i-<span class="number">1</span>] &gt; B[j]) &#123; <span class="comment">// i 需要减小</span></span><br><span class="line">                iMax = i - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 达到要求，并且将边界条件列出来单独考虑</span></span><br><span class="line">                <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; maxLeft = B[j-<span class="number">1</span>]; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; maxLeft = A[i-<span class="number">1</span>]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; maxLeft = Math.max(A[i-<span class="number">1</span>], B[j-<span class="number">1</span>]); &#125;</span><br><span class="line">                <span class="keyword">if</span> ( (m + n) % <span class="number">2</span> == <span class="number">1</span> ) &#123; <span class="keyword">return</span> maxLeft; &#125; <span class="comment">// 奇数的话不需要考虑右半部分</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> minRight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == m) &#123; minRight = B[j]; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123; minRight = A[i]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; minRight = Math.min(B[j], A[i]); &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>; <span class="comment">//如果是偶数的话返回结果</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>时间复杂度</li>
</ul>
<p>我们对较短的数组进行了二分查找，所以时间复杂度是 $O(log(min(m,n)))$。</p>
<ul>
<li>空间复杂度</li>
</ul>
<p>只有一些固定的变量，和数组长度无关，所以空间复杂度是 $O(1)$。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub4.java">源码地址</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub4.md">文章地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode">LeetCode 题解目录</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 把二叉搜索树转换为累加树</title>
    <url>/2019/11/22/leetcode/Sub538/</url>
    <content><![CDATA[<h1 id="LeetCode-把二叉搜索树转换为累加树"><a href="#LeetCode-把二叉搜索树转换为累加树" class="headerlink" title="LeetCode 把二叉搜索树转换为累加树"></a>LeetCode 把二叉搜索树转换为累加树</h1><p>第538题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">输入: 二叉搜索树:</span><br><span class="line">              <span class="number">5</span></span><br><span class="line">            /   \</span><br><span class="line">           <span class="number">2</span>     <span class="number">13</span></span><br><span class="line"></span><br><span class="line">输出: 转换为累加树:</span><br><span class="line">             <span class="number">18</span></span><br><span class="line">            /   \</span><br><span class="line">          <span class="number">20</span>     <span class="number">13</span></span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/convert-bst-to-greater-tree</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><pre><code>二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。
</code></pre><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><pre><code>中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，中序遍历首先遍历左子树，然后访问根结点，最后遍历右子树。
</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>从定义我们知道，BST的中序遍历为一个递增序列</li>
<li>我们将中序遍历倒置（先右子树，后根节点、再左子树），即可实现一个递减序列</li>
<li>遍历该序列，从大往小累加并更新节点值，即可实现累加树（节点值=原来的节点值加上所有大于它的节点值之和）</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-递归倒置中序遍历思路实现"><a href="#1-递归倒置中序遍历思路实现" class="headerlink" title="1.递归倒置中序遍历思路实现"></a>1.递归倒置中序遍历思路实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        addSum(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addSum</span><span class="params">(TreeNode node, <span class="keyword">int</span> parentVal)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有节点了，返回父节点值</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parentVal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加右边所有节点值</span></span><br><span class="line">        <span class="keyword">int</span> rVal = addSum(node.right, parentVal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前节点值=右边所有节点累加值+当前节点值</span></span><br><span class="line">        node.val += rVal;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;当前节点值：&quot; + node.val);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加左边所有节点值</span></span><br><span class="line">        <span class="keyword">int</span> lVal = addSum(node.left, node.val);</span><br><span class="line">        <span class="keyword">return</span> lVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-利用堆栈，去递归化实现"><a href="#2-利用堆栈，去递归化实现" class="headerlink" title="2.利用堆栈，去递归化实现"></a>2.利用堆栈，去递归化实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用堆栈，去递归化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode oRoot = root;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//右节点入栈</span></span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果栈为空退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则出栈进入计算</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode node = stack.pop();</span><br><span class="line">                <span class="comment">//更新节点值</span></span><br><span class="line">                node.val += sum;</span><br><span class="line">                <span class="comment">//更新sum值</span></span><br><span class="line">                sum = node.val;</span><br><span class="line">                <span class="comment">//左节点进入[右节点入栈]</span></span><br><span class="line">                root = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回原树，此时该树所有节点已做更新</span></span><br><span class="line">        <span class="keyword">return</span> oRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过提交代码发现堆栈实现会比递归执行效率慢很多,这是因为：</p>
<ul>
<li>尾递归被jvm编译器识别并针对其迭代对应进行优化处理过</li>
<li>堆栈实现需要频繁的push(入栈)、pop(出栈)操作导致性能下降</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://github.com/smltq/spring-boot-demo/blob/master/leetcode/src/main/java/com/easy/leetcode/Sub538.java">示例源码</a></li>
<li><a href="https://github.com/smltq/blog/tree/master/source/_posts/leetcode/Sub538.md">原文地址</a></li>
<li><a href="https://github.com/smltq/spring-boot-demo">Spring Boot、Spring Cloud 示例学习</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>数学公式</title>
    <url>/2019/12/06/math/Math/</url>
    <content><![CDATA[<h2 id="数列"><a href="#数列" class="headerlink" title="数列"></a>数列</h2><h3 id="等比数列"><a href="#等比数列" class="headerlink" title="等比数列"></a>等比数列</h3><p>前N项和为 $S_n$，通项为$a_n$，公比为 $q$，且$a_1\not=0$。</p>
<ul>
<li><p>当$q=1$时，则$S_n=na_1$</p>
</li>
<li><p>当$q\not=0$时，则$S_n=\cfrac{a_1(1-q^n)}{1-q}$</p>
</li>
<li><p>$a_n=a_1*q^n$</p>
</li>
<li><p>$a_n=a_mq^{n-m}$</p>
</li>
</ul>
<h3 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h3><p>前N项和为 $S_n$，通项为$a_n$，公差为 $d$。</p>
<ul>
<li><p>$S_n=\cfrac{(a_1+a_n)*n}{2}$</p>
</li>
<li><p>$a_n=a_1+(n-1)d$</p>
</li>
<li><p>$a_n=a_m+(n-m)d$</p>
</li>
</ul>
<h2 id="解析几何"><a href="#解析几何" class="headerlink" title="解析几何"></a>解析几何</h2><h3 id="点到点距离"><a href="#点到点距离" class="headerlink" title="点到点距离"></a>点到点距离</h3><p>设两个点A、B以及坐标分别为 $A(x_1,y_1)、B(x_2,y_2)$，A和B两点之间的距离为 $d$。</p>
<p>则 $d=\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$</p>
<h3 id="点到直线距离"><a href="#点到直线距离" class="headerlink" title="点到直线距离"></a>点到直线距离</h3><p>直线的方程为 $l:Ax+By+c=0 ，A、B$ 均不为0，点的坐标为 $P(x_0，y_0)$，点 $P$ 到 $l$ 的距离为 $d$。</p>
<p>则 $d=\cfrac{|Ax_0+Bx_0+c|}{\sqrt{A^2+B^2}}$</p>
<h3 id="两条平行线距离"><a href="#两条平行线距离" class="headerlink" title="两条平行线距离"></a>两条平行线距离</h3><p>直线的方程为 $l_1：Ax+By+c_1=0，l_2:Ax+By+c_2=0$，它们的距离为 $d$。</p>
<p>则 $d=\cfrac{|c_1-c_2|}{\sqrt{A^2+B^2}}$</p>
<h2 id="立体几何"><a href="#立体几何" class="headerlink" title="立体几何"></a>立体几何</h2><h3 id="球体表面积"><a href="#球体表面积" class="headerlink" title="球体表面积"></a>球体表面积</h3><p>球体半径为 $r$，球体表面积为：$S$。</p>
<p>则 $S=4\pi r^2$</p>
<h3 id="球体体积"><a href="#球体体积" class="headerlink" title="球体体积"></a>球体体积</h3><p>球体半径为 $r$，体积为：$V$</p>
<p>则 $V=\cfrac{4}{3}\pi r^3$</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>$\sqrt{xy}+\sqrt[a]{x}$</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://katex.org/docs/supported.html">数学公式语法</a></li>
<li><a href="https://github.com/sun11/hexo-renderer-kramed">hexo-renderer-kramed插件</a></li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
</search>
